
Sabatoge.elf:     file format elf32-littlenios2
Sabatoge.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011990 memsz 0x00011990 flags r-x
    LOAD off    0x00013000 vaddr 0x40000000 paddr 0x000119b0 align 2**12
         filesz 0x00002184 memsz 0x000022e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001176c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000047c  40000000  000119b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d08  4000047c  00011e2c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  40002184  00013b34  00015184  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00013b34  00013b34  00015184  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  00015184  2**0
                  CONTENTS
  8 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00015184  2**0
                  CONTENTS
  9 .ARM_A9_HPS_axi_sdram 00000000  400022e4  400022e4  00015184  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  00015184  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001138  00000000  00000000  000151a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0002ce04  00000000  00000000  000162e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b2ba  00000000  00000000  000430e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d801  00000000  00000000  0004e39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026e0  00000000  00000000  0005bba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000040f4  00000000  00000000  0005e280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00018796  00000000  00000000  00062374  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000020  00000000  00000000  0007ab0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001a70  00000000  00000000  0007ab30  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  0007ff11  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  0007ff14  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0007ff19  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0007ff1a  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0007ff1b  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  0007ff1f  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  0007ff23  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   00000009  00000000  00000000  0007ff27  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    00000009  00000000  00000000  0007ff30  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   00000009  00000000  00000000  0007ff39  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000f  00000000  00000000  0007ff42  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 00000010  00000000  00000000  0007ff51  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0045b3b9  00000000  00000000  0007ff61  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
4000047c l    d  .rwdata	00000000 .rwdata
40002184 l    d  .bss	00000000 .bss
00013b34 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
400022e4 l    d  .ARM_A9_HPS_axi_sdram	00000000 .ARM_A9_HPS_axi_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Sabatoge_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bluetooth.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 gps.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
4000047c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000020fc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
40000112 l     O .rodata	00000010 zeroes.4404
0000488c l     F .text	000000bc __sbprintf
40000122 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfprintf_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00004cac l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000067dc l     F .text	00000008 __fp_unlock
000067f0 l     F .text	0000019c __sinit.part.1
0000698c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
40000cc8 l     O .rwdata	00000020 lc_ctype_charset
40000ca8 l     O .rwdata	00000020 lc_message_charset
40000ce8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
40000150 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
000091ec l     F .text	000000fc __sprint_r.part.0
40000284 l     O .rodata	00000010 blanks.4348
40000274 l     O .rodata	00000010 zeroes.4349
0000a778 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e0b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e1c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e1f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e2dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e3bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e4a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e67c l     F .text	0000003c alt_get_errno
0000e6b8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0000e8d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40002174 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000eb1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ec50 l     F .text	00000034 alt_dev_reg
40000ec8 l     O .rwdata	00001060 JTAG_UART
40001f28 l     O .rwdata	000000c4 GPS_UART
40001fec l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
40002048 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
400020a4 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
40002100 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f7dc l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f9e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010020 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000102d0 l     F .text	0000009c altera_avalon_uart_irq
0001036c l     F .text	000000e4 altera_avalon_uart_rxirq
00010450 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000105ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00010804 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010b38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000111e8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
400021b8 g     O .bss	00000004 alt_instruction_exception_handler
00002010 g     F .text	00000018 putchar
00008a3c g     F .text	00000074 _mprec_log10
00008b28 g     F .text	0000008c __any_on
000076a0 g     F .text	00000054 _isatty_r
4000015c g     O .rodata	00000028 __mprec_tinytens
0000e5b8 g     F .text	0000007c alt_main
00002028 g     F .text	000000c0 _puts_r
400021e4 g     O .bss	00000100 alt_irq
000077d0 g     F .text	00000060 _lseek_r
00011e2c g       *ABS*	00000000 __flash_rwdata_start
00006b7c g     F .text	000000ac __sflags
0000cbe4 g     F .text	00000088 .hidden __eqdf2
400022e4 g       *ABS*	00000000 __alt_heap_start
00001e64 g     F .text	0000003c printf
0000ac04 g     F .text	0000009c _wcrtomb_r
000024a0 g     F .text	0000005c __sseek
00006b2c g     F .text	00000010 __sinit
0000494c g     F .text	00000140 __swbuf_r
000076f4 g     F .text	0000007c _setlocale_r
00006994 g     F .text	00000068 __sfmoreglue
0000e658 g     F .text	00000024 __malloc_unlock
00007a5c g     F .text	0000015c memmove
00006b14 g     F .text	00000018 _cleanup
00007bb8 g     F .text	000000a8 _Balloc
00000a8c g     F .text	00000130 NMEA_parse2
0000cc6c g     F .text	000000dc .hidden __gtdf2
000114cc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000760 g     F .text	00000060 printRX
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001190 g     F .text	0000005c _fstat_r
00000280 g     F .text	00000090 bluetooth_driver
40002184 g     O .bss	00000004 errno
00002360 g     F .text	00000014 __srget
0000241c g     F .text	00000008 __seofread
400021a4 g     O .bss	00000004 alt_argv
4000a144 g       *ABS*	00000000 _gp
40000d48 g     O .rwdata	00000180 alt_fd_list
000011ec g     F .text	00000070 _getc_r
0000125c g     F .text	00000088 getc
00002008 g     F .text	00000008 _putchar_r
00010cd8 g     F .text	00000090 alt_find_dev
00007914 g     F .text	00000148 memcpy
000067e4 g     F .text	0000000c _cleanup_r
0000ded0 g     F .text	000000dc .hidden __floatsidf
000112ac g     F .text	0000007c alt_io_redirect
0000cd48 g     F .text	000000f4 .hidden __ltdf2
000119b0 g       *ABS*	00000000 __DTOR_END__
000020e8 g     F .text	00000014 puts
00011580 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009178 g     F .text	00000074 __fpclassifyd
00008998 g     F .text	000000a4 __ratio
0000a75c g     F .text	0000001c __vfiprintf_internal
0000fbe0 g     F .text	0000021c altera_avalon_jtag_uart_read
00001e34 g     F .text	00000030 _printf_r
0000b994 g     F .text	00000064 .hidden __udivsi3
0000e318 g     F .text	000000a4 isatty
400001ac g     O .rodata	000000c8 __mprec_tens
00007770 g     F .text	0000000c __locale_charset
000114f0 g     F .text	00000090 alt_icache_flush
40002190 g     O .bss	00000004 __malloc_top_pad
40002154 g     O .rwdata	00000004 __mb_cur_max
000077a0 g     F .text	0000000c _localeconv_r
00007fc4 g     F .text	0000003c __i2b
0000705c g     F .text	000004bc __sfvwrite_r
00002374 g     F .text	00000054 _sbrk_r
00008bb4 g     F .text	00000060 _read_r
4000216c g     O .rwdata	00000004 alt_max_fd
0000a8f8 g     F .text	000000f0 _fclose_r
000067ac g     F .text	00000030 fflush
4000218c g     O .bss	00000004 __malloc_max_sbrked_mem
0000ba50 g     F .text	000008ac .hidden __adddf3
00008740 g     F .text	0000010c __b2d
0000b364 g     F .text	00000538 .hidden __umoddi3
0000e4e4 g     F .text	000000d4 lseek
00000668 g     F .text	000000f8 parse_raw_buffer
40002144 g     O .rwdata	00000004 _global_impure_ptr
00008c14 g     F .text	00000564 _realloc_r
400022e4 g       *ABS*	00000000 __bss_end
000110f8 g     F .text	000000f0 alt_iic_isr_register
000113c4 g     F .text	00000108 alt_tick
0000adec g     F .text	00000578 .hidden __udivdi3
000007c0 g     F .text	00000154 read_serial
0000ab60 g     F .text	00000024 _fputwc_r
40000184 g     O .rodata	00000028 __mprec_bigtens
00007da8 g     F .text	00000104 __s2b
0000dfac g     F .text	000000a8 .hidden __floatunsidf
00008480 g     F .text	00000060 __mcmp
00010224 g     F .text	000000ac altera_avalon_uart_init
00006b4c g     F .text	00000018 __fp_lock_all
000110ac g     F .text	0000004c alt_ic_irq_enabled
00011328 g     F .text	0000009c alt_alarm_stop
400021ac g     O .bss	00000004 alt_irq_active
00000d30 g     F .text	00000444 _fseeko_r
000000fc g     F .exceptions	000000d4 alt_irq_handler
40000d20 g     O .rwdata	00000028 alt_dev_null
00000914 g     F .text	00000178 NMEA_parse
00010b18 g     F .text	00000020 alt_dcache_flush_all
00007eac g     F .text	00000068 __hi0bits
0000de50 g     F .text	00000080 .hidden __fixdfsi
40002184 g       *ABS*	00000000 __ram_rwdata_end
40002164 g     O .rwdata	00000008 alt_dev_list
0000eb58 g     F .text	000000f8 write
00001ea0 g     F .text	000000a0 _putc_r
4000047c g       *ABS*	00000000 __ram_rodata_end
0000e22c g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000cd48 g     F .text	000000f4 .hidden __ledf2
000081f8 g     F .text	00000140 __pow5mult
00009300 g     F .text	0000145c ___vfiprintf_internal_r
4000219c g     O .bss	00000004 __nlocale_changed
40000000 g       *ABS*	00000000 __alt_mem_ARM_A9_HPS_axi_sdram
0000b9f8 g     F .text	00000058 .hidden __umodsi3
400022e4 g       *ABS*	00000000 end
00001174 g     F .text	0000001c fseeko
00010840 g     F .text	000001ac altera_avalon_uart_write
00000d14 g     F .text	0000001c fseek
0000f71c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000119b0 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
00010098 g     F .text	0000007c alt_avalon_timer_sc_init
00010174 g     F .text	00000060 altera_avalon_uart_write_fd
0000e054 g     F .text	00000064 .hidden __clzsi2
000101d4 g     F .text	00000050 altera_avalon_uart_close_fd
0000fdfc g     F .text	00000224 altera_avalon_jtag_uart_write
00006b3c g     F .text	00000004 __sfp_lock_acquire
00007830 g     F .text	000000e4 memchr
00002678 g     F .text	000021f8 ___vfprintf_internal_r
00006d4c g     F .text	00000310 _free_r
0000777c g     F .text	00000010 __locale_mb_cur_max
000117fc g     F .text	00000180 __call_exitprocs
000022ec g     F .text	00000074 __srget_r
40002198 g     O .bss	00000004 __mlocale_changed
4000214c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
400021b0 g     O .bss	00000004 _alt_tick_rate
00008338 g     F .text	00000148 __lshift
400021b4 g     O .bss	00000004 _alt_nticks
0000e90c g     F .text	000000fc read
0000ecbc g     F .text	000008fc alt_sys_init
00001dd4 g     F .text	00000060 _open_r
000116e4 g     F .text	00000118 __register_exitproc
0000036c g     F .text	000002fc gps_driver
00008000 g     F .text	000001f8 __multiply
0000fa88 g     F .text	00000068 altera_avalon_jtag_uart_close
4000047c g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
400021bc g     O .bss	00000028 __malloc_current_mallinfo
0000884c g     F .text	0000014c __d2b
00000310 g     F .text	0000005c dbg_printf
0000f5b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010e70 g     F .text	000000a4 alt_get_fd
00004c58 g     F .text	00000054 _close_r
00011668 g     F .text	0000007c memcmp
0000f678 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
400022e4 g       *ABS*	00000000 __alt_stack_base
0000f6c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004b04 g     F .text	00000154 __swsetup_r
0000c2fc g     F .text	000008e8 .hidden __divdf3
000069fc g     F .text	00000118 __sfp
00008ab0 g     F .text	00000078 __copybits
400008a0 g     O .rwdata	00000408 __malloc_av_
00006b48 g     F .text	00000004 __sinit_lock_release
0000ce3c g     F .text	00000718 .hidden __muldf3
000023c8 g     F .text	00000054 __sread
00010d68 g     F .text	00000108 alt_find_file
00010b74 g     F .text	000000a4 alt_dev_llist_insert
0000e634 g     F .text	00000024 __malloc_lock
0000ea6c g     F .text	000000b0 sbrk
00006750 g     F .text	0000005c _fflush_r
0000a834 g     F .text	000000c4 _calloc_r
00000cf8 g     F .text	00000018 fopen
40002184 g       *ABS*	00000000 __bss_start
00001cac g     F .text	00000128 memset
00000bbc g     F .text	00000048 main
400021a8 g     O .bss	00000004 alt_envp
40002188 g     O .bss	00000004 __malloc_max_total_mem
0000f618 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00004a8c g     F .text	00000018 __swbuf
000024fc g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
0000a9e8 g     F .text	00000014 fclose
00004eac g     F .text	00001688 _dtoa_r
000014a0 g     F .text	0000080c _malloc_r
0000ad60 g     F .text	00000030 __ascii_wctomb
40002170 g     O .rwdata	00000004 alt_errno
00007518 g     F .text	000000c4 _fwalk
00001f40 g     F .text	000000c8 putc
0000b89c g     F .text	00000084 .hidden __divsi3
00006c28 g     F .text	00000124 _malloc_trim_r
000119b0 g       *ABS*	00000000 __CTOR_END__
00002504 g     F .text	000000dc strcmp
000119b0 g       *ABS*	00000000 __flash_rodata_start
000119b0 g       *ABS*	00000000 __DTOR_LIST__
0000cbe4 g     F .text	00000088 .hidden __nedf2
0000ec84 g     F .text	00000038 alt_irq_init
0000ea08 g     F .text	00000064 alt_release_fd
40000294 g     O .rodata	00000100 .hidden __clz_tab
40002194 g     O .bss	00000004 _PathLocale
0001161c g     F .text	00000014 atexit
00004aa4 g     F .text	00000060 _write_r
000077ac g     F .text	00000018 setlocale
40002148 g     O .rwdata	00000004 _impure_ptr
400021a0 g     O .bss	00000004 alt_argc
00006534 g     F .text	0000021c __sflush_r
00010c78 g     F .text	00000060 _do_dtors
00007798 g     F .text	00000008 __locale_cjk_lang
00000d10 g     F .text	00000004 _fseek_r
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00002118 g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
000086dc g     F .text	00000064 __ulp
00006b64 g     F .text	00000018 __fp_unlock_all
4000215c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000077c4 g     F .text	0000000c localeconv
00010f48 g     F .text	00000050 alt_ic_isr_register
40002184 g       *ABS*	00000000 _edata
00010114 g     F .text	00000060 altera_avalon_uart_read_fd
400022e4 g       *ABS*	00000000 _end
0000a9fc g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000faf0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00011020 g     F .text	0000008c alt_ic_irq_disable
00002424 g     F .text	0000007c __swrite
40002150 g     O .rwdata	00000004 __malloc_trim_threshold
0000778c g     F .text	0000000c __locale_msgcharset
00011630 g     F .text	00000038 exit
000075dc g     F .text	000000c4 _fwalk_reent
000084e0 g     F .text	000001fc __mdiff
0000b920 g     F .text	00000074 .hidden __modsi3
80000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006b40 g     F .text	00000004 __sfp_lock_release
00010598 g     F .text	00000054 altera_avalon_uart_close
00000c04 g     F .text	000000f4 _fopen_r
0001197c g     F .text	00000034 _exit
000109ec g     F .text	0000012c alt_alarm_start
000012e4 g     F .text	000001bc __smakebuf_r
000025e0 g     F .text	00000098 strlen
0000e77c g     F .text	00000154 open
0000cc6c g     F .text	000000dc .hidden __gedf2
40002158 g     O .rwdata	00000004 __wctomb
000092e8 g     F .text	00000018 __sprint_r
00010f14 g     F .text	00000034 alt_icache_flush_all
40002178 g     O .rwdata	00000004 alt_priority_mask
00010f98 g     F .text	00000088 alt_ic_irq_enable
00004870 g     F .text	0000001c __vfprintf_internal
00010628 g     F .text	000001dc altera_avalon_uart_read
0000ad90 g     F .text	0000005c _wctomb_r
0000d554 g     F .text	000008fc .hidden __subdf3
00007f14 g     F .text	000000b0 __lo0bits
4000217c g     O .rwdata	00000008 alt_alarm_list
00010c18 g     F .text	00000060 _do_ctors
0000aca0 g     F .text	000000c0 wcrtomb
0000e0f4 g     F .text	000000d0 close
0000e424 g     F .text	00000084 alt_load
00004948 g     F .text	00000004 vfprintf
0000ab84 g     F .text	00000080 fputwc
00006b44 g     F .text	00000004 __sinit_lock_acquire
00007c88 g     F .text	00000120 __multadd
00007c60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0x80000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00900034 	movhi	r2,16384
 140:	10887904 	addi	r2,r2,8676
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00900034 	movhi	r2,16384
 158:	10887904 	addi	r2,r2,8676
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0x8000012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0x80000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a01d17 	ldw	r2,-32652(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a01d17 	ldw	r2,-32652(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
     250:	d6a85114 	ori	gp,gp,41284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
     258:	10886114 	ori	r2,r2,8580

    movhi r3, %hi(__bss_end)
     25c:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
     260:	18c8b914 	ori	r3,r3,8932

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0x80000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000e4240 	call	e424 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000e5b80 	call	e5b8 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0x8000027c>

00000280 <bluetooth_driver>:
#include <stdlib.h>
#include <string.h>

#include "debug.h"

int bluetooth_driver() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4

	FILE *fp;
	fp = fopen("/dev/GPS_UART", "r+");
     290:	01500034 	movhi	r5,16384
     294:	29400004 	addi	r5,r5,0
     298:	01100034 	movhi	r4,16384
     29c:	21000104 	addi	r4,r4,4
     2a0:	0000cf80 	call	cf8 <fopen>
     2a4:	e0bfff15 	stw	r2,-4(fp)

	if (!fp) {
     2a8:	e0bfff17 	ldw	r2,-4(fp)
     2ac:	1000051e 	bne	r2,zero,2c4 <bluetooth_driver+0x44>
		printf("Error\n");
     2b0:	01100034 	movhi	r4,16384
     2b4:	21000504 	addi	r4,r4,20
     2b8:	00020e80 	call	20e8 <puts>
		return -1;
     2bc:	00bfffc4 	movi	r2,-1
     2c0:	00000e06 	br	2fc <bluetooth_driver+0x7c>
	}

	putc('$', fp);
     2c4:	e17fff17 	ldw	r5,-4(fp)
     2c8:	01000904 	movi	r4,36
     2cc:	0001f400 	call	1f40 <putc>
	putc('$', fp);
     2d0:	e17fff17 	ldw	r5,-4(fp)
     2d4:	01000904 	movi	r4,36
     2d8:	0001f400 	call	1f40 <putc>
	putc('$', fp);
     2dc:	e17fff17 	ldw	r5,-4(fp)
     2e0:	01000904 	movi	r4,36
     2e4:	0001f400 	call	1f40 <putc>

	while (1) {
		printf("%c",getc(fp));
     2e8:	e13fff17 	ldw	r4,-4(fp)
     2ec:	000125c0 	call	125c <getc>
     2f0:	1009883a 	mov	r4,r2
     2f4:	00020100 	call	2010 <putchar>
	}
     2f8:	003ffb06 	br	2e8 <__alt_data_end+0x800002e8>

	fclose(fp);
	return 0;
}
     2fc:	e037883a 	mov	sp,fp
     300:	dfc00117 	ldw	ra,4(sp)
     304:	df000017 	ldw	fp,0(sp)
     308:	dec00204 	addi	sp,sp,8
     30c:	f800283a 	ret

00000310 <dbg_printf>:
#include <stdlib.h>

#include "debug.h"

void dbg_printf(const char *fmt, ...)
{
     310:	defff904 	addi	sp,sp,-28
     314:	dfc00315 	stw	ra,12(sp)
     318:	df000215 	stw	fp,8(sp)
     31c:	df000204 	addi	fp,sp,8
     320:	e13fff15 	stw	r4,-4(fp)
     324:	e1400215 	stw	r5,8(fp)
     328:	e1800315 	stw	r6,12(fp)
     32c:	e1c00415 	stw	r7,16(fp)
    va_list args;
    va_start(args, fmt);
     330:	e0800204 	addi	r2,fp,8
     334:	e0bffe15 	stw	r2,-8(fp)
    vfprintf(stderr, fmt, args);
     338:	d0a00117 	ldw	r2,-32764(gp)
     33c:	10800317 	ldw	r2,12(r2)
     340:	e0fffe17 	ldw	r3,-8(fp)
     344:	180d883a 	mov	r6,r3
     348:	e17fff17 	ldw	r5,-4(fp)
     34c:	1009883a 	mov	r4,r2
     350:	00049480 	call	4948 <vfprintf>
    va_end(args);
}
     354:	0001883a 	nop
     358:	e037883a 	mov	sp,fp
     35c:	dfc00117 	ldw	ra,4(sp)
     360:	df000017 	ldw	fp,0(sp)
     364:	dec00504 	addi	sp,sp,20
     368:	f800283a 	ret

0000036c <gps_driver>:
#include <stdlib.h>
#include <string.h>
#include "gps.h"
#include "debug.h"

int gps_driver() {
     36c:	defffe04 	addi	sp,sp,-8
     370:	dfc00115 	stw	ra,4(sp)
     374:	df000015 	stw	fp,0(sp)
     378:	d839883a 	mov	fp,sp
     37c:	023ff874 	movhi	r8,65505
     380:	421cea04 	addi	r8,r8,29608
     384:	da37883a 	add	sp,sp,r8

	FILE *fp;
	fp = fopen("/dev/GPS_UART", "r+");
     388:	01500034 	movhi	r5,16384
     38c:	29400704 	addi	r5,r5,28
     390:	01100034 	movhi	r4,16384
     394:	21000804 	addi	r4,r4,32
     398:	0000cf80 	call	cf8 <fopen>
     39c:	00fff874 	movhi	r3,65505
     3a0:	18dcea04 	addi	r3,r3,29608
     3a4:	1f07883a 	add	r3,r3,fp
     3a8:	18800015 	stw	r2,0(r3)

	if (!fp) {
     3ac:	013ff874 	movhi	r4,65505
     3b0:	211cea04 	addi	r4,r4,29608
     3b4:	2709883a 	add	r4,r4,fp
     3b8:	20800017 	ldw	r2,0(r4)
     3bc:	1000051e 	bne	r2,zero,3d4 <gps_driver+0x68>
		printf("Error\n");
     3c0:	01100034 	movhi	r4,16384
     3c4:	21000c04 	addi	r4,r4,48
     3c8:	00020e80 	call	20e8 <puts>
		return -1;
     3cc:	00bfffc4 	movi	r2,-1
     3d0:	0000a006 	br	654 <gps_driver+0x2e8>
	}

	char gprmc_buffer_raw[BUFFER_SIZE] = "";
     3d4:	00bff874 	movhi	r2,65505
     3d8:	109cec04 	addi	r2,r2,29616
     3dc:	1705883a 	add	r2,r2,fp
     3e0:	10000015 	stw	zero,0(r2)
     3e4:	00fff874 	movhi	r3,65505
     3e8:	18dced04 	addi	r3,r3,29620
     3ec:	e0c5883a 	add	r2,fp,r3
     3f0:	00c0f904 	movi	r3,996
     3f4:	180d883a 	mov	r6,r3
     3f8:	000b883a 	mov	r5,zero
     3fc:	1009883a 	mov	r4,r2
     400:	0001cac0 	call	1cac <memset>
	char gprmc_buffer_parsed[BUFFER_SIZE][BUFFER_SIZE];

	char gpgga_buffer_raw[BUFFER_SIZE] = "";
     404:	008003f4 	movhi	r2,15
     408:	10918c04 	addi	r2,r2,17968
     40c:	013ff874 	movhi	r4,65505
     410:	211cea04 	addi	r4,r4,29608
     414:	2709883a 	add	r4,r4,fp
     418:	2085883a 	add	r2,r4,r2
     41c:	10000015 	stw	zero,0(r2)
     420:	10800104 	addi	r2,r2,4
     424:	00c0f904 	movi	r3,996
     428:	180d883a 	mov	r6,r3
     42c:	000b883a 	mov	r5,zero
     430:	1009883a 	mov	r4,r2
     434:	0001cac0 	call	1cac <memset>
	char gpgga_buffer_parsed[BUFFER_SIZE][BUFFER_SIZE];

	int bytes = 0;
     438:	00bff874 	movhi	r2,65505
     43c:	109ceb04 	addi	r2,r2,29612
     440:	1705883a 	add	r2,r2,fp
     444:	10000015 	stw	zero,0(r2)
	while (1) {
		bytes = read_serial (fp, "GPRMC", gprmc_buffer_raw, BUFFER_SIZE);
     448:	00fff874 	movhi	r3,65505
     44c:	18dcec04 	addi	r3,r3,29616
     450:	e0c5883a 	add	r2,fp,r3
     454:	01c0fa04 	movi	r7,1000
     458:	100d883a 	mov	r6,r2
     45c:	01500034 	movhi	r5,16384
     460:	29400e04 	addi	r5,r5,56
     464:	00bff874 	movhi	r2,65505
     468:	109cea04 	addi	r2,r2,29608
     46c:	1705883a 	add	r2,r2,fp
     470:	11000017 	ldw	r4,0(r2)
     474:	00007c00 	call	7c0 <read_serial>
     478:	00fff874 	movhi	r3,65505
     47c:	18dceb04 	addi	r3,r3,29612
     480:	1f07883a 	add	r3,r3,fp
     484:	18800015 	stw	r2,0(r3)
		if (!bytes) {
     488:	013ff874 	movhi	r4,65505
     48c:	211ceb04 	addi	r4,r4,29612
     490:	2709883a 	add	r4,r4,fp
     494:	20800017 	ldw	r2,0(r4)
     498:	1000081e 	bne	r2,zero,4bc <gps_driver+0x150>
			printf("err %d \n", bytes);
     49c:	00bff874 	movhi	r2,65505
     4a0:	109ceb04 	addi	r2,r2,29612
     4a4:	1705883a 	add	r2,r2,fp
     4a8:	11400017 	ldw	r5,0(r2)
     4ac:	01100034 	movhi	r4,16384
     4b0:	21001004 	addi	r4,r4,64
     4b4:	0001e640 	call	1e64 <printf>
			continue;
     4b8:	00006506 	br	650 <gps_driver+0x2e4>
		}
		//printf("Buffer: %s\n", gprmc_buffer_raw);


		// Parse the raw buffer using the ',' delimiter
		parse_raw_buffer(gprmc_buffer_raw, gprmc_buffer_parsed);
     4bc:	013ff874 	movhi	r4,65505
     4c0:	211de604 	addi	r4,r4,30616
     4c4:	e107883a 	add	r3,fp,r4
     4c8:	013ff874 	movhi	r4,65505
     4cc:	211cec04 	addi	r4,r4,29616
     4d0:	e105883a 	add	r2,fp,r4
     4d4:	180b883a 	mov	r5,r3
     4d8:	1009883a 	mov	r4,r2
     4dc:	00006680 	call	668 <parse_raw_buffer>


		printf("IsValid: %s\n", strcmp(gprmc_buffer_parsed[STAT], "A") == 0 ? "YES" : "NO");
     4e0:	00fff874 	movhi	r3,65505
     4e4:	18dde604 	addi	r3,r3,30616
     4e8:	e0c5883a 	add	r2,fp,r3
     4ec:	1081f404 	addi	r2,r2,2000
     4f0:	01500034 	movhi	r5,16384
     4f4:	29401304 	addi	r5,r5,76
     4f8:	1009883a 	mov	r4,r2
     4fc:	00025040 	call	2504 <strcmp>
     500:	1000031e 	bne	r2,zero,510 <gps_driver+0x1a4>
     504:	00900034 	movhi	r2,16384
     508:	10801404 	addi	r2,r2,80
     50c:	00000206 	br	518 <gps_driver+0x1ac>
     510:	00900034 	movhi	r2,16384
     514:	10801504 	addi	r2,r2,84
     518:	100b883a 	mov	r5,r2
     51c:	01100034 	movhi	r4,16384
     520:	21001604 	addi	r4,r4,88
     524:	0001e640 	call	1e64 <printf>
		printf("Latitude: %s\n", gprmc_buffer_parsed[LAT]);
     528:	013ff874 	movhi	r4,65505
     52c:	211de604 	addi	r4,r4,30616
     530:	e105883a 	add	r2,fp,r4
     534:	1082ee04 	addi	r2,r2,3000
     538:	100b883a 	mov	r5,r2
     53c:	01100034 	movhi	r4,16384
     540:	21001a04 	addi	r4,r4,104
     544:	0001e640 	call	1e64 <printf>
		printf("Longitude: %s\n", gprmc_buffer_parsed[LON]);
     548:	00fff874 	movhi	r3,65505
     54c:	18dde604 	addi	r3,r3,30616
     550:	e0c5883a 	add	r2,fp,r3
     554:	1084e204 	addi	r2,r2,5000
     558:	100b883a 	mov	r5,r2
     55c:	01100034 	movhi	r4,16384
     560:	21001e04 	addi	r4,r4,120
     564:	0001e640 	call	1e64 <printf>


		bytes = read_serial (fp, "GPGGA", gpgga_buffer_raw, BUFFER_SIZE);
     568:	008003f4 	movhi	r2,15
     56c:	10918c04 	addi	r2,r2,17968
     570:	013ff874 	movhi	r4,65505
     574:	211cea04 	addi	r4,r4,29608
     578:	2709883a 	add	r4,r4,fp
     57c:	2085883a 	add	r2,r4,r2
     580:	01c0fa04 	movi	r7,1000
     584:	100d883a 	mov	r6,r2
     588:	01500034 	movhi	r5,16384
     58c:	29402204 	addi	r5,r5,136
     590:	00bff874 	movhi	r2,65505
     594:	109cea04 	addi	r2,r2,29608
     598:	1705883a 	add	r2,r2,fp
     59c:	11000017 	ldw	r4,0(r2)
     5a0:	00007c00 	call	7c0 <read_serial>
     5a4:	00fff874 	movhi	r3,65505
     5a8:	18dceb04 	addi	r3,r3,29612
     5ac:	1f07883a 	add	r3,r3,fp
     5b0:	18800015 	stw	r2,0(r3)
		if (!bytes) {
     5b4:	013ff874 	movhi	r4,65505
     5b8:	211ceb04 	addi	r4,r4,29612
     5bc:	2709883a 	add	r4,r4,fp
     5c0:	20800017 	ldw	r2,0(r4)
     5c4:	1000081e 	bne	r2,zero,5e8 <gps_driver+0x27c>
			printf("err %d \n", bytes);
     5c8:	00bff874 	movhi	r2,65505
     5cc:	109ceb04 	addi	r2,r2,29612
     5d0:	1705883a 	add	r2,r2,fp
     5d4:	11400017 	ldw	r5,0(r2)
     5d8:	01100034 	movhi	r4,16384
     5dc:	21001004 	addi	r4,r4,64
     5e0:	0001e640 	call	1e64 <printf>
			continue;
     5e4:	00001a06 	br	650 <gps_driver+0x2e4>
		}
		//printf("Buffer: %s\n", gpgga_buffer_raw);


		// Parse the raw buffer using the ',' delimiter
		parse_raw_buffer(gpgga_buffer_raw, gpgga_buffer_parsed);
     5e8:	008003f4 	movhi	r2,15
     5ec:	10928604 	addi	r2,r2,18968
     5f0:	013ff874 	movhi	r4,65505
     5f4:	211cea04 	addi	r4,r4,29608
     5f8:	2709883a 	add	r4,r4,fp
     5fc:	2087883a 	add	r3,r4,r2
     600:	008003f4 	movhi	r2,15
     604:	10918c04 	addi	r2,r2,17968
     608:	013ff874 	movhi	r4,65505
     60c:	211cea04 	addi	r4,r4,29608
     610:	2709883a 	add	r4,r4,fp
     614:	2085883a 	add	r2,r4,r2
     618:	180b883a 	mov	r5,r3
     61c:	1009883a 	mov	r4,r2
     620:	00006680 	call	668 <parse_raw_buffer>


		printf("Satellites Used: %s \n", gpgga_buffer_parsed[7]);
     624:	008003f4 	movhi	r2,15
     628:	10928604 	addi	r2,r2,18968
     62c:	00fff874 	movhi	r3,65505
     630:	18dcea04 	addi	r3,r3,29608
     634:	1f07883a 	add	r3,r3,fp
     638:	1885883a 	add	r2,r3,r2
     63c:	1086d604 	addi	r2,r2,7000
     640:	100b883a 	mov	r5,r2
     644:	01100034 	movhi	r4,16384
     648:	21002404 	addi	r4,r4,144
     64c:	0001e640 	call	1e64 <printf>

	}
     650:	003f7d06 	br	448 <__alt_data_end+0x80000448>

	fclose(fp);
	return 0;
}
     654:	e037883a 	mov	sp,fp
     658:	dfc00117 	ldw	ra,4(sp)
     65c:	df000017 	ldw	fp,0(sp)
     660:	dec00204 	addi	sp,sp,8
     664:	f800283a 	ret

00000668 <parse_raw_buffer>:

void parse_raw_buffer(char* input_buffer, char output_buffer[][BUFFER_SIZE]) {
     668:	defff904 	addi	sp,sp,-28
     66c:	df000615 	stw	fp,24(sp)
     670:	df000604 	addi	fp,sp,24
     674:	e13ffe15 	stw	r4,-8(fp)
     678:	e17fff15 	stw	r5,-4(fp)

	int index = 0;
     67c:	e03ffa15 	stw	zero,-24(fp)
	int section = 0;
     680:	e03ffb15 	stw	zero,-20(fp)
	int inner_index = 0;
     684:	e03ffc15 	stw	zero,-16(fp)
	char c = 0;
     688:	e03ffd05 	stb	zero,-12(fp)

	while ((c = input_buffer[index]) != NULL) {
     68c:	00002806 	br	730 <parse_raw_buffer+0xc8>
		if (c == ',') {
     690:	e0bffd07 	ldb	r2,-12(fp)
     694:	10800b18 	cmpnei	r2,r2,44
     698:	1000171e 	bne	r2,zero,6f8 <parse_raw_buffer+0x90>
			if (inner_index == 0) output_buffer[section][inner_index] = '0';
     69c:	e0bffc17 	ldw	r2,-16(fp)
     6a0:	1000081e 	bne	r2,zero,6c4 <parse_raw_buffer+0x5c>
     6a4:	e0bffb17 	ldw	r2,-20(fp)
     6a8:	1080fa24 	muli	r2,r2,1000
     6ac:	e0ffff17 	ldw	r3,-4(fp)
     6b0:	1887883a 	add	r3,r3,r2
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	1885883a 	add	r2,r3,r2
     6bc:	00c00c04 	movi	r3,48
     6c0:	10c00005 	stb	r3,0(r2)

			output_buffer[section][inner_index + 1] = NULL;
     6c4:	e0bffb17 	ldw	r2,-20(fp)
     6c8:	1080fa24 	muli	r2,r2,1000
     6cc:	e0ffff17 	ldw	r3,-4(fp)
     6d0:	1887883a 	add	r3,r3,r2
     6d4:	e0bffc17 	ldw	r2,-16(fp)
     6d8:	10800044 	addi	r2,r2,1
     6dc:	1885883a 	add	r2,r3,r2
     6e0:	10000005 	stb	zero,0(r2)

			section++;
     6e4:	e0bffb17 	ldw	r2,-20(fp)
     6e8:	10800044 	addi	r2,r2,1
     6ec:	e0bffb15 	stw	r2,-20(fp)
			inner_index = 0;
     6f0:	e03ffc15 	stw	zero,-16(fp)
     6f4:	00000b06 	br	724 <parse_raw_buffer+0xbc>
		} else {
			output_buffer[section][inner_index] = c;
     6f8:	e0bffb17 	ldw	r2,-20(fp)
     6fc:	1080fa24 	muli	r2,r2,1000
     700:	e0ffff17 	ldw	r3,-4(fp)
     704:	1887883a 	add	r3,r3,r2
     708:	e0bffc17 	ldw	r2,-16(fp)
     70c:	1885883a 	add	r2,r3,r2
     710:	e0fffd03 	ldbu	r3,-12(fp)
     714:	10c00005 	stb	r3,0(r2)
			inner_index++;
     718:	e0bffc17 	ldw	r2,-16(fp)
     71c:	10800044 	addi	r2,r2,1
     720:	e0bffc15 	stw	r2,-16(fp)
		}
		index++;
     724:	e0bffa17 	ldw	r2,-24(fp)
     728:	10800044 	addi	r2,r2,1
     72c:	e0bffa15 	stw	r2,-24(fp)
	int index = 0;
	int section = 0;
	int inner_index = 0;
	char c = 0;

	while ((c = input_buffer[index]) != NULL) {
     730:	e0bffa17 	ldw	r2,-24(fp)
     734:	e0fffe17 	ldw	r3,-8(fp)
     738:	1885883a 	add	r2,r3,r2
     73c:	10800003 	ldbu	r2,0(r2)
     740:	e0bffd05 	stb	r2,-12(fp)
     744:	e0bffd07 	ldb	r2,-12(fp)
     748:	103fd11e 	bne	r2,zero,690 <__alt_data_end+0x80000690>
			output_buffer[section][inner_index] = c;
			inner_index++;
		}
		index++;
	}
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	df000017 	ldw	fp,0(sp)
     758:	dec00104 	addi	sp,sp,4
     75c:	f800283a 	ret

00000760 <printRX>:

void printRX(FILE* fp) {
     760:	defffc04 	addi	sp,sp,-16
     764:	dfc00315 	stw	ra,12(sp)
     768:	df000215 	stw	fp,8(sp)
     76c:	df000204 	addi	fp,sp,8
     770:	e13fff15 	stw	r4,-4(fp)
	char prompt = 0;
     774:	e03ffe05 	stb	zero,-8(fp)
	while (1) {
		while (getc(fp) != '$');
     778:	0001883a 	nop
     77c:	e13fff17 	ldw	r4,-4(fp)
     780:	000125c0 	call	125c <getc>
     784:	10800918 	cmpnei	r2,r2,36
     788:	103ffc1e 	bne	r2,zero,77c <__alt_data_end+0x8000077c>

		while ((prompt = getc(fp)) != '*') {
     78c:	00000306 	br	79c <printRX+0x3c>
			printf("%c",prompt);
     790:	e0bffe07 	ldb	r2,-8(fp)
     794:	1009883a 	mov	r4,r2
     798:	00020100 	call	2010 <putchar>
void printRX(FILE* fp) {
	char prompt = 0;
	while (1) {
		while (getc(fp) != '$');

		while ((prompt = getc(fp)) != '*') {
     79c:	e13fff17 	ldw	r4,-4(fp)
     7a0:	000125c0 	call	125c <getc>
     7a4:	e0bffe05 	stb	r2,-8(fp)
     7a8:	e0bffe07 	ldb	r2,-8(fp)
     7ac:	10800a98 	cmpnei	r2,r2,42
     7b0:	103ff71e 	bne	r2,zero,790 <__alt_data_end+0x80000790>
			printf("%c",prompt);
		}
		printf("\n");
     7b4:	01000284 	movi	r4,10
     7b8:	00020100 	call	2010 <putchar>
	}
     7bc:	003fee06 	br	778 <__alt_data_end+0x80000778>

000007c0 <read_serial>:
 * buffer as a string.
 *
 * returns bytes read
 */

int read_serial(FILE *fp, char* type, char* buffer, int size) {
     7c0:	defff504 	addi	sp,sp,-44
     7c4:	dfc00a15 	stw	ra,40(sp)
     7c8:	df000915 	stw	fp,36(sp)
     7cc:	df000904 	addi	fp,sp,36
     7d0:	e13ffc15 	stw	r4,-16(fp)
     7d4:	e17ffd15 	stw	r5,-12(fp)
     7d8:	e1bffe15 	stw	r6,-8(fp)
     7dc:	e1ffff15 	stw	r7,-4(fp)
  char outputSentence[5];
  char prompt = 0;
     7e0:	e03ffa45 	stb	zero,-23(fp)
  int bytes_read = 0;
     7e4:	e03ff715 	stw	zero,-36(fp)

 jump:

  // Wait until we get the $
  while (getc(fp) != '$');
     7e8:	0001883a 	nop
     7ec:	e13ffc17 	ldw	r4,-16(fp)
     7f0:	000125c0 	call	125c <getc>
     7f4:	10800918 	cmpnei	r2,r2,36
     7f8:	103ffc1e 	bne	r2,zero,7ec <__alt_data_end+0x800007ec>

  // Read the first 5 bytes - GPRMC
  for (int i = 0; i < 5; i++) {
     7fc:	e03ff815 	stw	zero,-32(fp)
     800:	00000a06 	br	82c <read_serial+0x6c>
	outputSentence[i] = getc(fp);
     804:	e13ffc17 	ldw	r4,-16(fp)
     808:	000125c0 	call	125c <getc>
     80c:	1009883a 	mov	r4,r2
     810:	e0fffa84 	addi	r3,fp,-22
     814:	e0bff817 	ldw	r2,-32(fp)
     818:	1885883a 	add	r2,r3,r2
     81c:	11000005 	stb	r4,0(r2)

  // Wait until we get the $
  while (getc(fp) != '$');

  // Read the first 5 bytes - GPRMC
  for (int i = 0; i < 5; i++) {
     820:	e0bff817 	ldw	r2,-32(fp)
     824:	10800044 	addi	r2,r2,1
     828:	e0bff815 	stw	r2,-32(fp)
     82c:	e0bff817 	ldw	r2,-32(fp)
     830:	10800150 	cmplti	r2,r2,5
     834:	103ff31e 	bne	r2,zero,804 <__alt_data_end+0x80000804>
	outputSentence[i] = getc(fp);
  }
  // Strings need to be null terminated.
  outputSentence[5] = NULL;
     838:	e03ffbc5 	stb	zero,-17(fp)

  if (strcmp(outputSentence, type) != 0) goto jump;
     83c:	e0bffa84 	addi	r2,fp,-22
     840:	e17ffd17 	ldw	r5,-12(fp)
     844:	1009883a 	mov	r4,r2
     848:	00025040 	call	2504 <strcmp>
     84c:	10000126 	beq	r2,zero,854 <read_serial+0x94>
     850:	003fe506 	br	7e8 <__alt_data_end+0x800007e8>

  getc(fp); //ignore the first ','
     854:	e13ffc17 	ldw	r4,-16(fp)
     858:	000125c0 	call	125c <getc>

  int i = 0;
     85c:	e03ff915 	stw	zero,-28(fp)
  char xor_sum = 0;
     860:	e03ffa05 	stb	zero,-24(fp)
  while ((prompt = getc(fp)) != '*') {
     864:	00001406 	br	8b8 <read_serial+0xf8>
	  buffer[i] = prompt;
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	e0fffe17 	ldw	r3,-8(fp)
     870:	1885883a 	add	r2,r3,r2
     874:	e0fffa43 	ldbu	r3,-23(fp)
     878:	10c00005 	stb	r3,0(r2)
	  bytes_read++;
     87c:	e0bff717 	ldw	r2,-36(fp)
     880:	10800044 	addi	r2,r2,1
     884:	e0bff715 	stw	r2,-36(fp)
	  xor_sum ^= prompt;
     888:	e0fffa03 	ldbu	r3,-24(fp)
     88c:	e0bffa43 	ldbu	r2,-23(fp)
     890:	1884f03a 	xor	r2,r3,r2
     894:	e0bffa05 	stb	r2,-24(fp)
	  if (++i >= size) return 0;
     898:	e0bff917 	ldw	r2,-28(fp)
     89c:	10800044 	addi	r2,r2,1
     8a0:	e0bff915 	stw	r2,-28(fp)
     8a4:	e0fff917 	ldw	r3,-28(fp)
     8a8:	e0bfff17 	ldw	r2,-4(fp)
     8ac:	18800216 	blt	r3,r2,8b8 <read_serial+0xf8>
     8b0:	0005883a 	mov	r2,zero
     8b4:	00001206 	br	900 <read_serial+0x140>

  getc(fp); //ignore the first ','

  int i = 0;
  char xor_sum = 0;
  while ((prompt = getc(fp)) != '*') {
     8b8:	e13ffc17 	ldw	r4,-16(fp)
     8bc:	000125c0 	call	125c <getc>
     8c0:	e0bffa45 	stb	r2,-23(fp)
     8c4:	e0bffa47 	ldb	r2,-23(fp)
     8c8:	10800a98 	cmpnei	r2,r2,42
     8cc:	103fe61e 	bne	r2,zero,868 <__alt_data_end+0x80000868>
	  buffer[i] = prompt;
	  bytes_read++;
	  xor_sum ^= prompt;
	  if (++i >= size) return 0;
  }
  while(++bytes_read < size) buffer[bytes_read] = NULL;
     8d0:	00000406 	br	8e4 <read_serial+0x124>
     8d4:	e0bff717 	ldw	r2,-36(fp)
     8d8:	e0fffe17 	ldw	r3,-8(fp)
     8dc:	1885883a 	add	r2,r3,r2
     8e0:	10000005 	stb	zero,0(r2)
     8e4:	e0bff717 	ldw	r2,-36(fp)
     8e8:	10800044 	addi	r2,r2,1
     8ec:	e0bff715 	stw	r2,-36(fp)
     8f0:	e0fff717 	ldw	r3,-36(fp)
     8f4:	e0bfff17 	ldw	r2,-4(fp)
     8f8:	18bff616 	blt	r3,r2,8d4 <__alt_data_end+0x800008d4>

  char expected_xor = (char) strtoul(extracted_crc, NULL, 16);

  printf("Extracted: %c and Computed: %c\n", expected_xor, xor_sum);*/

  return bytes_read;
     8fc:	e0bff717 	ldw	r2,-36(fp)
}
     900:	e037883a 	mov	sp,fp
     904:	dfc00117 	ldw	ra,4(sp)
     908:	df000017 	ldw	fp,0(sp)
     90c:	dec00204 	addi	sp,sp,8
     910:	f800283a 	ret

00000914 <NMEA_parse>:

int NMEA_parse(FILE *fp, char* lat, char* lon, char* type)
{
     914:	defff504 	addi	sp,sp,-44
     918:	dfc00a15 	stw	ra,40(sp)
     91c:	df000915 	stw	fp,36(sp)
     920:	df000904 	addi	fp,sp,36
     924:	e13ffc15 	stw	r4,-16(fp)
     928:	e17ffd15 	stw	r5,-12(fp)
     92c:	e1bffe15 	stw	r6,-8(fp)
     930:	e1ffff15 	stw	r7,-4(fp)

  int section_no = 0;
     934:	e03ff715 	stw	zero,-36(fp)
  int index = 0;
     938:	e03ff815 	stw	zero,-32(fp)
  char outputSentence[5];
  char prompt = 0;
     93c:	e03ffa05 	stb	zero,-24(fp)
 jump:

  // Wait until we get the $
  while (getc(fp) != '$');
     940:	0001883a 	nop
     944:	e13ffc17 	ldw	r4,-16(fp)
     948:	000125c0 	call	125c <getc>
     94c:	10800918 	cmpnei	r2,r2,36
     950:	103ffc1e 	bne	r2,zero,944 <__alt_data_end+0x80000944>

  // Read the first 5 bytes - GPRMC
  for (int i = 0; i < 5; i++) {
     954:	e03ff915 	stw	zero,-28(fp)
     958:	00000a06 	br	984 <NMEA_parse+0x70>
    outputSentence[i] = getc(fp);
     95c:	e13ffc17 	ldw	r4,-16(fp)
     960:	000125c0 	call	125c <getc>
     964:	1009883a 	mov	r4,r2
     968:	e0fffa44 	addi	r3,fp,-23
     96c:	e0bff917 	ldw	r2,-28(fp)
     970:	1885883a 	add	r2,r3,r2
     974:	11000005 	stb	r4,0(r2)

  // Wait until we get the $
  while (getc(fp) != '$');

  // Read the first 5 bytes - GPRMC
  for (int i = 0; i < 5; i++) {
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	10800044 	addi	r2,r2,1
     980:	e0bff915 	stw	r2,-28(fp)
     984:	e0bff917 	ldw	r2,-28(fp)
     988:	10800150 	cmplti	r2,r2,5
     98c:	103ff31e 	bne	r2,zero,95c <__alt_data_end+0x8000095c>
    outputSentence[i] = getc(fp);
  }
  // Strings need to be null terminated.
  outputSentence[5] = NULL;
     990:	e03ffb85 	stb	zero,-18(fp)

  if (strcmp(outputSentence, type) != 0) goto jump;
     994:	e0bffa44 	addi	r2,fp,-23
     998:	e17fff17 	ldw	r5,-4(fp)
     99c:	1009883a 	mov	r4,r2
     9a0:	00025040 	call	2504 <strcmp>
     9a4:	10002d26 	beq	r2,zero,a5c <NMEA_parse+0x148>
     9a8:	003fe506 	br	940 <__alt_data_end+0x80000940>

  // Read character until we reach '*' which is the character before the checksum
  while ((prompt = getc(fp)) != '*') {

    if (prompt == ',') {
     9ac:	e0bffa07 	ldb	r2,-24(fp)
     9b0:	10800b18 	cmpnei	r2,r2,44
     9b4:	1000141e 	bne	r2,zero,a08 <NMEA_parse+0xf4>
    	if (section_no == 3)
     9b8:	e0bff717 	ldw	r2,-36(fp)
     9bc:	108000d8 	cmpnei	r2,r2,3
     9c0:	1000051e 	bne	r2,zero,9d8 <NMEA_parse+0xc4>
    		lat[index] = NULL;
     9c4:	e0bff817 	ldw	r2,-32(fp)
     9c8:	e0fffd17 	ldw	r3,-12(fp)
     9cc:	1885883a 	add	r2,r3,r2
     9d0:	10000005 	stb	zero,0(r2)
     9d4:	00000706 	br	9f4 <NMEA_parse+0xe0>
    	else if (section_no == 5)
     9d8:	e0bff717 	ldw	r2,-36(fp)
     9dc:	10800158 	cmpnei	r2,r2,5
     9e0:	1000041e 	bne	r2,zero,9f4 <NMEA_parse+0xe0>
    		lon[index] = NULL;
     9e4:	e0bff817 	ldw	r2,-32(fp)
     9e8:	e0fffe17 	ldw	r3,-8(fp)
     9ec:	1885883a 	add	r2,r3,r2
     9f0:	10000005 	stb	zero,0(r2)
      section_no++;
     9f4:	e0bff717 	ldw	r2,-36(fp)
     9f8:	10800044 	addi	r2,r2,1
     9fc:	e0bff715 	stw	r2,-36(fp)
      index = 0;
     a00:	e03ff815 	stw	zero,-32(fp)
     a04:	00001506 	br	a5c <NMEA_parse+0x148>
    } else {

      switch(section_no) {
     a08:	e0bff717 	ldw	r2,-36(fp)
     a0c:	10c000e0 	cmpeqi	r3,r2,3
     a10:	1800031e 	bne	r3,zero,a20 <NMEA_parse+0x10c>
     a14:	10800160 	cmpeqi	r2,r2,5
     a18:	1000071e 	bne	r2,zero,a38 <NMEA_parse+0x124>
     a1c:	00000c06 	br	a50 <NMEA_parse+0x13c>
      	case 3:
      		lat[index] = prompt;
     a20:	e0bff817 	ldw	r2,-32(fp)
     a24:	e0fffd17 	ldw	r3,-12(fp)
     a28:	1885883a 	add	r2,r3,r2
     a2c:	e0fffa03 	ldbu	r3,-24(fp)
     a30:	10c00005 	stb	r3,0(r2)
      		break;
     a34:	00000606 	br	a50 <NMEA_parse+0x13c>

      	case 5:
					lon[index] = prompt;
     a38:	e0bff817 	ldw	r2,-32(fp)
     a3c:	e0fffe17 	ldw	r3,-8(fp)
     a40:	1885883a 	add	r2,r3,r2
     a44:	e0fffa03 	ldbu	r3,-24(fp)
     a48:	10c00005 	stb	r3,0(r2)
					break;
     a4c:	0001883a 	nop
      }

      index++;
     a50:	e0bff817 	ldw	r2,-32(fp)
     a54:	10800044 	addi	r2,r2,1
     a58:	e0bff815 	stw	r2,-32(fp)
  outputSentence[5] = NULL;

  if (strcmp(outputSentence, type) != 0) goto jump;

  // Read character until we reach '*' which is the character before the checksum
  while ((prompt = getc(fp)) != '*') {
     a5c:	e13ffc17 	ldw	r4,-16(fp)
     a60:	000125c0 	call	125c <getc>
     a64:	e0bffa05 	stb	r2,-24(fp)
     a68:	e0bffa07 	ldb	r2,-24(fp)
     a6c:	10800a98 	cmpnei	r2,r2,42
     a70:	103fce1e 	bne	r2,zero,9ac <__alt_data_end+0x800009ac>
    }
  }

  // TODO: Perform checksum

  return 0;
     a74:	0005883a 	mov	r2,zero
}
     a78:	e037883a 	mov	sp,fp
     a7c:	dfc00117 	ldw	ra,4(sp)
     a80:	df000017 	ldw	fp,0(sp)
     a84:	dec00204 	addi	sp,sp,8
     a88:	f800283a 	ret

00000a8c <NMEA_parse2>:

int NMEA_parse2(FILE *fp, char* number, char* type)
{
     a8c:	defff604 	addi	sp,sp,-40
     a90:	dfc00915 	stw	ra,36(sp)
     a94:	df000815 	stw	fp,32(sp)
     a98:	df000804 	addi	fp,sp,32
     a9c:	e13ffd15 	stw	r4,-12(fp)
     aa0:	e17ffe15 	stw	r5,-8(fp)
     aa4:	e1bfff15 	stw	r6,-4(fp)
  int section_no = 0;
     aa8:	e03ff815 	stw	zero,-32(fp)
  int index = 0;
     aac:	e03ff915 	stw	zero,-28(fp)
  char outputSentence[5];
  char prompt = 0;
     ab0:	e03ffb05 	stb	zero,-20(fp)

jump:

  // Wait until we get the $
  while (getc(fp) != '$');
     ab4:	0001883a 	nop
     ab8:	e13ffd17 	ldw	r4,-12(fp)
     abc:	000125c0 	call	125c <getc>
     ac0:	10800918 	cmpnei	r2,r2,36
     ac4:	103ffc1e 	bne	r2,zero,ab8 <__alt_data_end+0x80000ab8>

  // Read the first 5 bytes - GPRMC
  for (int i = 0; i < 5; i++) {
     ac8:	e03ffa15 	stw	zero,-24(fp)
     acc:	00000a06 	br	af8 <NMEA_parse2+0x6c>
    outputSentence[i] = getc(fp);
     ad0:	e13ffd17 	ldw	r4,-12(fp)
     ad4:	000125c0 	call	125c <getc>
     ad8:	1009883a 	mov	r4,r2
     adc:	e0fffb44 	addi	r3,fp,-19
     ae0:	e0bffa17 	ldw	r2,-24(fp)
     ae4:	1885883a 	add	r2,r3,r2
     ae8:	11000005 	stb	r4,0(r2)

  // Wait until we get the $
  while (getc(fp) != '$');

  // Read the first 5 bytes - GPRMC
  for (int i = 0; i < 5; i++) {
     aec:	e0bffa17 	ldw	r2,-24(fp)
     af0:	10800044 	addi	r2,r2,1
     af4:	e0bffa15 	stw	r2,-24(fp)
     af8:	e0bffa17 	ldw	r2,-24(fp)
     afc:	10800150 	cmplti	r2,r2,5
     b00:	103ff31e 	bne	r2,zero,ad0 <__alt_data_end+0x80000ad0>
    outputSentence[i] = getc(fp);
  }
  // Strings need to be null terminated.
  outputSentence[5] = NULL;
     b04:	e03ffc85 	stb	zero,-14(fp)

  if (strcmp(outputSentence, type) != 0) goto jump;
     b08:	e0bffb44 	addi	r2,fp,-19
     b0c:	e17fff17 	ldw	r5,-4(fp)
     b10:	1009883a 	mov	r4,r2
     b14:	00025040 	call	2504 <strcmp>
     b18:	10001c26 	beq	r2,zero,b8c <NMEA_parse2+0x100>
     b1c:	003fe506 	br	ab4 <__alt_data_end+0x80000ab4>



  // Read character until we reach '*' which is the character before the checksum
  while ((prompt = getc(fp)) != '*') {
    if (prompt == ',') {
     b20:	e0bffb07 	ldb	r2,-20(fp)
     b24:	10800b18 	cmpnei	r2,r2,44
     b28:	10000c1e 	bne	r2,zero,b5c <NMEA_parse2+0xd0>
    	if (section_no == 3)
     b2c:	e0bff817 	ldw	r2,-32(fp)
     b30:	108000d8 	cmpnei	r2,r2,3
     b34:	1000041e 	bne	r2,zero,b48 <NMEA_parse2+0xbc>
    		number[index] = NULL;
     b38:	e0bff917 	ldw	r2,-28(fp)
     b3c:	e0fffe17 	ldw	r3,-8(fp)
     b40:	1885883a 	add	r2,r3,r2
     b44:	10000005 	stb	zero,0(r2)

      section_no++;
     b48:	e0bff817 	ldw	r2,-32(fp)
     b4c:	10800044 	addi	r2,r2,1
     b50:	e0bff815 	stw	r2,-32(fp)
      index = 0;
     b54:	e03ff915 	stw	zero,-28(fp)
     b58:	00000c06 	br	b8c <NMEA_parse2+0x100>
    } else {

      switch(section_no) {
     b5c:	e0bff817 	ldw	r2,-32(fp)
     b60:	108000e0 	cmpeqi	r2,r2,3
     b64:	10000626 	beq	r2,zero,b80 <NMEA_parse2+0xf4>
      	case 3:
      		number[index] = prompt;
     b68:	e0bff917 	ldw	r2,-28(fp)
     b6c:	e0fffe17 	ldw	r3,-8(fp)
     b70:	1885883a 	add	r2,r3,r2
     b74:	e0fffb03 	ldbu	r3,-20(fp)
     b78:	10c00005 	stb	r3,0(r2)
      		break;
     b7c:	0001883a 	nop
      }

      index++;
     b80:	e0bff917 	ldw	r2,-28(fp)
     b84:	10800044 	addi	r2,r2,1
     b88:	e0bff915 	stw	r2,-28(fp)
  if (strcmp(outputSentence, type) != 0) goto jump;



  // Read character until we reach '*' which is the character before the checksum
  while ((prompt = getc(fp)) != '*') {
     b8c:	e13ffd17 	ldw	r4,-12(fp)
     b90:	000125c0 	call	125c <getc>
     b94:	e0bffb05 	stb	r2,-20(fp)
     b98:	e0bffb07 	ldb	r2,-20(fp)
     b9c:	10800a98 	cmpnei	r2,r2,42
     ba0:	103fdf1e 	bne	r2,zero,b20 <__alt_data_end+0x80000b20>
    }
  }

  // TODO: Perform checksum

  return 0;
     ba4:	0005883a 	mov	r2,zero
}
     ba8:	e037883a 	mov	sp,fp
     bac:	dfc00117 	ldw	ra,4(sp)
     bb0:	df000017 	ldw	fp,0(sp)
     bb4:	dec00204 	addi	sp,sp,8
     bb8:	f800283a 	ret

00000bbc <main>:
#include "debug.h"

#define GPS 1

int main(void)
{
     bbc:	defffe04 	addi	sp,sp,-8
     bc0:	dfc00115 	stw	ra,4(sp)
     bc4:	df000015 	stw	fp,0(sp)
     bc8:	d839883a 	mov	fp,sp

    if (GPS) {
    	if (gps_driver() < 0) printf("GPS driver unsuccessful\n");
     bcc:	000036c0 	call	36c <gps_driver>
     bd0:	1000030e 	bge	r2,zero,be0 <main+0x24>
     bd4:	01100034 	movhi	r4,16384
     bd8:	21002a04 	addi	r4,r4,168
     bdc:	00020e80 	call	20e8 <puts>
    } else {
    	if (bluetooth_driver() < 0) printf("Bluetooth driver unsuccessful\n");
    }

	printf("Done\n");
     be0:	01100034 	movhi	r4,16384
     be4:	21003004 	addi	r4,r4,192
     be8:	00020e80 	call	20e8 <puts>
	return 0;
     bec:	0005883a 	mov	r2,zero
}
     bf0:	e037883a 	mov	sp,fp
     bf4:	dfc00117 	ldw	ra,4(sp)
     bf8:	df000017 	ldw	fp,0(sp)
     bfc:	dec00204 	addi	sp,sp,8
     c00:	f800283a 	ret

00000c04 <_fopen_r>:
     c04:	defffa04 	addi	sp,sp,-24
     c08:	3005883a 	mov	r2,r6
     c0c:	dcc00415 	stw	r19,16(sp)
     c10:	d80d883a 	mov	r6,sp
     c14:	2827883a 	mov	r19,r5
     c18:	100b883a 	mov	r5,r2
     c1c:	dc800315 	stw	r18,12(sp)
     c20:	dfc00515 	stw	ra,20(sp)
     c24:	dc400215 	stw	r17,8(sp)
     c28:	dc000115 	stw	r16,4(sp)
     c2c:	2025883a 	mov	r18,r4
     c30:	0006b7c0 	call	6b7c <__sflags>
     c34:	10002726 	beq	r2,zero,cd4 <_fopen_r+0xd0>
     c38:	9009883a 	mov	r4,r18
     c3c:	1023883a 	mov	r17,r2
     c40:	00069fc0 	call	69fc <__sfp>
     c44:	1021883a 	mov	r16,r2
     c48:	10002226 	beq	r2,zero,cd4 <_fopen_r+0xd0>
     c4c:	d9800017 	ldw	r6,0(sp)
     c50:	01c06d84 	movi	r7,438
     c54:	980b883a 	mov	r5,r19
     c58:	9009883a 	mov	r4,r18
     c5c:	0001dd40 	call	1dd4 <_open_r>
     c60:	10001916 	blt	r2,zero,cc8 <_fopen_r+0xc4>
     c64:	8080038d 	sth	r2,14(r16)
     c68:	00800034 	movhi	r2,0
     c6c:	1088f204 	addi	r2,r2,9160
     c70:	80800815 	stw	r2,32(r16)
     c74:	00800034 	movhi	r2,0
     c78:	10890904 	addi	r2,r2,9252
     c7c:	80800915 	stw	r2,36(r16)
     c80:	00800034 	movhi	r2,0
     c84:	10892804 	addi	r2,r2,9376
     c88:	80800a15 	stw	r2,40(r16)
     c8c:	00800034 	movhi	r2,0
     c90:	10893f04 	addi	r2,r2,9468
     c94:	8440030d 	sth	r17,12(r16)
     c98:	84000715 	stw	r16,28(r16)
     c9c:	80800b15 	stw	r2,44(r16)
     ca0:	8c40400c 	andi	r17,r17,256
     ca4:	88000d1e 	bne	r17,zero,cdc <_fopen_r+0xd8>
     ca8:	8005883a 	mov	r2,r16
     cac:	dfc00517 	ldw	ra,20(sp)
     cb0:	dcc00417 	ldw	r19,16(sp)
     cb4:	dc800317 	ldw	r18,12(sp)
     cb8:	dc400217 	ldw	r17,8(sp)
     cbc:	dc000117 	ldw	r16,4(sp)
     cc0:	dec00604 	addi	sp,sp,24
     cc4:	f800283a 	ret
     cc8:	0006b3c0 	call	6b3c <__sfp_lock_acquire>
     ccc:	8000030d 	sth	zero,12(r16)
     cd0:	0006b400 	call	6b40 <__sfp_lock_release>
     cd4:	0005883a 	mov	r2,zero
     cd8:	003ff406 	br	cac <__alt_data_end+0x80000cac>
     cdc:	01c00084 	movi	r7,2
     ce0:	000d883a 	mov	r6,zero
     ce4:	800b883a 	mov	r5,r16
     ce8:	9009883a 	mov	r4,r18
     cec:	0000d100 	call	d10 <_fseek_r>
     cf0:	8005883a 	mov	r2,r16
     cf4:	003fed06 	br	cac <__alt_data_end+0x80000cac>

00000cf8 <fopen>:
     cf8:	00900034 	movhi	r2,16384
     cfc:	10885204 	addi	r2,r2,8520
     d00:	280d883a 	mov	r6,r5
     d04:	200b883a 	mov	r5,r4
     d08:	11000017 	ldw	r4,0(r2)
     d0c:	0000c041 	jmpi	c04 <_fopen_r>

00000d10 <_fseek_r>:
     d10:	0000d301 	jmpi	d30 <_fseeko_r>

00000d14 <fseek>:
     d14:	00900034 	movhi	r2,16384
     d18:	10885204 	addi	r2,r2,8520
     d1c:	300f883a 	mov	r7,r6
     d20:	280d883a 	mov	r6,r5
     d24:	200b883a 	mov	r5,r4
     d28:	11000017 	ldw	r4,0(r2)
     d2c:	0000d301 	jmpi	d30 <_fseeko_r>

00000d30 <_fseeko_r>:
     d30:	deffe804 	addi	sp,sp,-96
     d34:	dd401415 	stw	r21,80(sp)
     d38:	dc801115 	stw	r18,68(sp)
     d3c:	dc401015 	stw	r17,64(sp)
     d40:	dc000f15 	stw	r16,60(sp)
     d44:	dfc01715 	stw	ra,92(sp)
     d48:	ddc01615 	stw	r23,88(sp)
     d4c:	dd801515 	stw	r22,84(sp)
     d50:	dd001315 	stw	r20,76(sp)
     d54:	dcc01215 	stw	r19,72(sp)
     d58:	2023883a 	mov	r17,r4
     d5c:	2821883a 	mov	r16,r5
     d60:	302b883a 	mov	r21,r6
     d64:	3825883a 	mov	r18,r7
     d68:	20000226 	beq	r4,zero,d74 <_fseeko_r+0x44>
     d6c:	20800e17 	ldw	r2,56(r4)
     d70:	10005a26 	beq	r2,zero,edc <_fseeko_r+0x1ac>
     d74:	8080030b 	ldhu	r2,12(r16)
     d78:	00c04204 	movi	r3,264
     d7c:	1080420c 	andi	r2,r2,264
     d80:	10c05b26 	beq	r2,r3,ef0 <_fseeko_r+0x1c0>
     d84:	85000a17 	ldw	r20,40(r16)
     d88:	a000f626 	beq	r20,zero,1164 <_fseeko_r+0x434>
     d8c:	00800044 	movi	r2,1
     d90:	90803e26 	beq	r18,r2,e8c <_fseeko_r+0x15c>
     d94:	00800084 	movi	r2,2
     d98:	90801026 	beq	r18,r2,ddc <_fseeko_r+0xac>
     d9c:	90000f26 	beq	r18,zero,ddc <_fseeko_r+0xac>
     da0:	00800584 	movi	r2,22
     da4:	88800015 	stw	r2,0(r17)
     da8:	04ffffc4 	movi	r19,-1
     dac:	9805883a 	mov	r2,r19
     db0:	dfc01717 	ldw	ra,92(sp)
     db4:	ddc01617 	ldw	r23,88(sp)
     db8:	dd801517 	ldw	r22,84(sp)
     dbc:	dd401417 	ldw	r21,80(sp)
     dc0:	dd001317 	ldw	r20,76(sp)
     dc4:	dcc01217 	ldw	r19,72(sp)
     dc8:	dc801117 	ldw	r18,68(sp)
     dcc:	dc401017 	ldw	r17,64(sp)
     dd0:	dc000f17 	ldw	r16,60(sp)
     dd4:	dec01804 	addi	sp,sp,96
     dd8:	f800283a 	ret
     ddc:	80800417 	ldw	r2,16(r16)
     de0:	002f883a 	mov	r23,zero
     de4:	0027883a 	mov	r19,zero
     de8:	1000cb26 	beq	r2,zero,1118 <_fseeko_r+0x3e8>
     dec:	8080030b 	ldhu	r2,12(r16)
     df0:	10c2068c 	andi	r3,r2,2074
     df4:	1800071e 	bne	r3,zero,e14 <_fseeko_r+0xe4>
     df8:	10c1000c 	andi	r3,r2,1024
     dfc:	1800451e 	bne	r3,zero,f14 <_fseeko_r+0x1e4>
     e00:	00c00034 	movhi	r3,0
     e04:	18c92804 	addi	r3,r3,9376
     e08:	a0c0b726 	beq	r20,r3,10e8 <_fseeko_r+0x3b8>
     e0c:	10820014 	ori	r2,r2,2048
     e10:	8080030d 	sth	r2,12(r16)
     e14:	800b883a 	mov	r5,r16
     e18:	8809883a 	mov	r4,r17
     e1c:	00067500 	call	6750 <_fflush_r>
     e20:	1027883a 	mov	r19,r2
     e24:	103fe01e 	bne	r2,zero,da8 <__alt_data_end+0x80000da8>
     e28:	81400717 	ldw	r5,28(r16)
     e2c:	900f883a 	mov	r7,r18
     e30:	a80d883a 	mov	r6,r21
     e34:	8809883a 	mov	r4,r17
     e38:	a03ee83a 	callr	r20
     e3c:	00ffffc4 	movi	r3,-1
     e40:	10ffd926 	beq	r2,r3,da8 <__alt_data_end+0x80000da8>
     e44:	81400c17 	ldw	r5,48(r16)
     e48:	28000526 	beq	r5,zero,e60 <_fseeko_r+0x130>
     e4c:	80801004 	addi	r2,r16,64
     e50:	28800226 	beq	r5,r2,e5c <_fseeko_r+0x12c>
     e54:	8809883a 	mov	r4,r17
     e58:	0006d4c0 	call	6d4c <_free_r>
     e5c:	80000c15 	stw	zero,48(r16)
     e60:	8080030b 	ldhu	r2,12(r16)
     e64:	80c00417 	ldw	r3,16(r16)
     e68:	80000115 	stw	zero,4(r16)
     e6c:	10bdf7cc 	andi	r2,r2,63455
     e70:	80c00015 	stw	r3,0(r16)
     e74:	8080030d 	sth	r2,12(r16)
     e78:	01800204 	movi	r6,8
     e7c:	000b883a 	mov	r5,zero
     e80:	81001704 	addi	r4,r16,92
     e84:	0001cac0 	call	1cac <memset>
     e88:	003fc806 	br	dac <__alt_data_end+0x80000dac>
     e8c:	800b883a 	mov	r5,r16
     e90:	8809883a 	mov	r4,r17
     e94:	00067500 	call	6750 <_fflush_r>
     e98:	8080030b 	ldhu	r2,12(r16)
     e9c:	10c4000c 	andi	r3,r2,4096
     ea0:	18008726 	beq	r3,zero,10c0 <_fseeko_r+0x390>
     ea4:	84c01417 	ldw	r19,80(r16)
     ea8:	10c0010c 	andi	r3,r2,4
     eac:	1800431e 	bne	r3,zero,fbc <_fseeko_r+0x28c>
     eb0:	1080020c 	andi	r2,r2,8
     eb4:	10008026 	beq	r2,zero,10b8 <_fseeko_r+0x388>
     eb8:	80c00017 	ldw	r3,0(r16)
     ebc:	80800417 	ldw	r2,16(r16)
     ec0:	18000226 	beq	r3,zero,ecc <_fseeko_r+0x19c>
     ec4:	1887c83a 	sub	r3,r3,r2
     ec8:	98e7883a 	add	r19,r19,r3
     ecc:	aceb883a 	add	r21,r21,r19
     ed0:	05c00044 	movi	r23,1
     ed4:	0025883a 	mov	r18,zero
     ed8:	003fc306 	br	de8 <__alt_data_end+0x80000de8>
     edc:	0006b2c0 	call	6b2c <__sinit>
     ee0:	8080030b 	ldhu	r2,12(r16)
     ee4:	00c04204 	movi	r3,264
     ee8:	1080420c 	andi	r2,r2,264
     eec:	10ffa51e 	bne	r2,r3,d84 <__alt_data_end+0x80000d84>
     ef0:	800b883a 	mov	r5,r16
     ef4:	8809883a 	mov	r4,r17
     ef8:	00067500 	call	6750 <_fflush_r>
     efc:	003fa106 	br	d84 <__alt_data_end+0x80000d84>
     f00:	8080030b 	ldhu	r2,12(r16)
     f04:	00c10004 	movi	r3,1024
     f08:	80c01315 	stw	r3,76(r16)
     f0c:	10c4b03a 	or	r2,r2,r3
     f10:	8080030d 	sth	r2,12(r16)
     f14:	9000311e 	bne	r18,zero,fdc <_fseeko_r+0x2ac>
     f18:	a82d883a 	mov	r22,r21
     f1c:	b800371e 	bne	r23,zero,ffc <_fseeko_r+0x2cc>
     f20:	8080030b 	ldhu	r2,12(r16)
     f24:	1084000c 	andi	r2,r2,4096
     f28:	10007f26 	beq	r2,zero,1128 <_fseeko_r+0x3f8>
     f2c:	80801417 	ldw	r2,80(r16)
     f30:	81800117 	ldw	r6,4(r16)
     f34:	81400c17 	ldw	r5,48(r16)
     f38:	11a7c83a 	sub	r19,r2,r6
     f3c:	28008226 	beq	r5,zero,1148 <_fseeko_r+0x418>
     f40:	81c00f17 	ldw	r7,60(r16)
     f44:	99e7c83a 	sub	r19,r19,r7
     f48:	81000e17 	ldw	r4,56(r16)
     f4c:	80800417 	ldw	r2,16(r16)
     f50:	99a7883a 	add	r19,r19,r6
     f54:	2087c83a 	sub	r3,r4,r2
     f58:	98e7c83a 	sub	r19,r19,r3
     f5c:	38c7883a 	add	r3,r7,r3
     f60:	b4c02b16 	blt	r22,r19,1010 <_fseeko_r+0x2e0>
     f64:	98c9883a 	add	r4,r19,r3
     f68:	b100292e 	bgeu	r22,r4,1010 <_fseeko_r+0x2e0>
     f6c:	b4e7c83a 	sub	r19,r22,r19
     f70:	14c5883a 	add	r2,r2,r19
     f74:	1ce7c83a 	sub	r19,r3,r19
     f78:	80800015 	stw	r2,0(r16)
     f7c:	84c00115 	stw	r19,4(r16)
     f80:	28000526 	beq	r5,zero,f98 <_fseeko_r+0x268>
     f84:	80801004 	addi	r2,r16,64
     f88:	28800226 	beq	r5,r2,f94 <_fseeko_r+0x264>
     f8c:	8809883a 	mov	r4,r17
     f90:	0006d4c0 	call	6d4c <_free_r>
     f94:	80000c15 	stw	zero,48(r16)
     f98:	8080030b 	ldhu	r2,12(r16)
     f9c:	01800204 	movi	r6,8
     fa0:	000b883a 	mov	r5,zero
     fa4:	10bff7cc 	andi	r2,r2,65503
     fa8:	8080030d 	sth	r2,12(r16)
     fac:	81001704 	addi	r4,r16,92
     fb0:	0001cac0 	call	1cac <memset>
     fb4:	0027883a 	mov	r19,zero
     fb8:	003f7c06 	br	dac <__alt_data_end+0x80000dac>
     fbc:	80c00117 	ldw	r3,4(r16)
     fc0:	80800c17 	ldw	r2,48(r16)
     fc4:	98e7c83a 	sub	r19,r19,r3
     fc8:	10003b26 	beq	r2,zero,10b8 <_fseeko_r+0x388>
     fcc:	80c00f17 	ldw	r3,60(r16)
     fd0:	80800417 	ldw	r2,16(r16)
     fd4:	98e7c83a 	sub	r19,r19,r3
     fd8:	003fbc06 	br	ecc <__alt_data_end+0x80000ecc>
     fdc:	8140038f 	ldh	r5,14(r16)
     fe0:	d80d883a 	mov	r6,sp
     fe4:	8809883a 	mov	r4,r17
     fe8:	00011900 	call	1190 <_fstat_r>
     fec:	103f891e 	bne	r2,zero,e14 <__alt_data_end+0x80000e14>
     ff0:	dd800417 	ldw	r22,16(sp)
     ff4:	adad883a 	add	r22,r21,r22
     ff8:	b83fc926 	beq	r23,zero,f20 <__alt_data_end+0x80000f20>
     ffc:	81400c17 	ldw	r5,48(r16)
    1000:	81800117 	ldw	r6,4(r16)
    1004:	28005026 	beq	r5,zero,1148 <_fseeko_r+0x418>
    1008:	81c00f17 	ldw	r7,60(r16)
    100c:	003fce06 	br	f48 <__alt_data_end+0x80000f48>
    1010:	84c01317 	ldw	r19,76(r16)
    1014:	81400717 	ldw	r5,28(r16)
    1018:	000f883a 	mov	r7,zero
    101c:	04e7c83a 	sub	r19,zero,r19
    1020:	9da6703a 	and	r19,r19,r22
    1024:	980d883a 	mov	r6,r19
    1028:	8809883a 	mov	r4,r17
    102c:	a03ee83a 	callr	r20
    1030:	00ffffc4 	movi	r3,-1
    1034:	10ff7726 	beq	r2,r3,e14 <__alt_data_end+0x80000e14>
    1038:	80800417 	ldw	r2,16(r16)
    103c:	81400c17 	ldw	r5,48(r16)
    1040:	80000115 	stw	zero,4(r16)
    1044:	80800015 	stw	r2,0(r16)
    1048:	28000526 	beq	r5,zero,1060 <_fseeko_r+0x330>
    104c:	80801004 	addi	r2,r16,64
    1050:	28800226 	beq	r5,r2,105c <_fseeko_r+0x32c>
    1054:	8809883a 	mov	r4,r17
    1058:	0006d4c0 	call	6d4c <_free_r>
    105c:	80000c15 	stw	zero,48(r16)
    1060:	8080030b 	ldhu	r2,12(r16)
    1064:	b4e7c83a 	sub	r19,r22,r19
    1068:	10bff7cc 	andi	r2,r2,65503
    106c:	8080030d 	sth	r2,12(r16)
    1070:	98000b26 	beq	r19,zero,10a0 <_fseeko_r+0x370>
    1074:	800b883a 	mov	r5,r16
    1078:	8809883a 	mov	r4,r17
    107c:	00021180 	call	2118 <__srefill_r>
    1080:	103f641e 	bne	r2,zero,e14 <__alt_data_end+0x80000e14>
    1084:	80800117 	ldw	r2,4(r16)
    1088:	14ff6236 	bltu	r2,r19,e14 <__alt_data_end+0x80000e14>
    108c:	80c00017 	ldw	r3,0(r16)
    1090:	14c5c83a 	sub	r2,r2,r19
    1094:	80800115 	stw	r2,4(r16)
    1098:	1ce7883a 	add	r19,r3,r19
    109c:	84c00015 	stw	r19,0(r16)
    10a0:	01800204 	movi	r6,8
    10a4:	000b883a 	mov	r5,zero
    10a8:	81001704 	addi	r4,r16,92
    10ac:	0001cac0 	call	1cac <memset>
    10b0:	0027883a 	mov	r19,zero
    10b4:	003f3d06 	br	dac <__alt_data_end+0x80000dac>
    10b8:	80800417 	ldw	r2,16(r16)
    10bc:	003f8306 	br	ecc <__alt_data_end+0x80000ecc>
    10c0:	81400717 	ldw	r5,28(r16)
    10c4:	900f883a 	mov	r7,r18
    10c8:	000d883a 	mov	r6,zero
    10cc:	8809883a 	mov	r4,r17
    10d0:	a03ee83a 	callr	r20
    10d4:	1027883a 	mov	r19,r2
    10d8:	00bfffc4 	movi	r2,-1
    10dc:	98bf3226 	beq	r19,r2,da8 <__alt_data_end+0x80000da8>
    10e0:	8080030b 	ldhu	r2,12(r16)
    10e4:	003f7006 	br	ea8 <__alt_data_end+0x80000ea8>
    10e8:	8140038f 	ldh	r5,14(r16)
    10ec:	283f4716 	blt	r5,zero,e0c <__alt_data_end+0x80000e0c>
    10f0:	d80d883a 	mov	r6,sp
    10f4:	8809883a 	mov	r4,r17
    10f8:	00011900 	call	1190 <_fstat_r>
    10fc:	1000041e 	bne	r2,zero,1110 <_fseeko_r+0x3e0>
    1100:	d8800117 	ldw	r2,4(sp)
    1104:	00e00014 	movui	r3,32768
    1108:	10bc000c 	andi	r2,r2,61440
    110c:	10ff7c26 	beq	r2,r3,f00 <__alt_data_end+0x80000f00>
    1110:	8080030b 	ldhu	r2,12(r16)
    1114:	003f3d06 	br	e0c <__alt_data_end+0x80000e0c>
    1118:	800b883a 	mov	r5,r16
    111c:	8809883a 	mov	r4,r17
    1120:	00012e40 	call	12e4 <__smakebuf_r>
    1124:	003f3106 	br	dec <__alt_data_end+0x80000dec>
    1128:	81400717 	ldw	r5,28(r16)
    112c:	01c00044 	movi	r7,1
    1130:	000d883a 	mov	r6,zero
    1134:	8809883a 	mov	r4,r17
    1138:	a03ee83a 	callr	r20
    113c:	00ffffc4 	movi	r3,-1
    1140:	10ff7b1e 	bne	r2,r3,f30 <__alt_data_end+0x80000f30>
    1144:	003f3306 	br	e14 <__alt_data_end+0x80000e14>
    1148:	80c00017 	ldw	r3,0(r16)
    114c:	80800417 	ldw	r2,16(r16)
    1150:	000b883a 	mov	r5,zero
    1154:	1887c83a 	sub	r3,r3,r2
    1158:	98e7c83a 	sub	r19,r19,r3
    115c:	30c7883a 	add	r3,r6,r3
    1160:	003f7f06 	br	f60 <__alt_data_end+0x80000f60>
    1164:	00800744 	movi	r2,29
    1168:	88800015 	stw	r2,0(r17)
    116c:	04ffffc4 	movi	r19,-1
    1170:	003f0e06 	br	dac <__alt_data_end+0x80000dac>

00001174 <fseeko>:
    1174:	00900034 	movhi	r2,16384
    1178:	10885204 	addi	r2,r2,8520
    117c:	300f883a 	mov	r7,r6
    1180:	280d883a 	mov	r6,r5
    1184:	200b883a 	mov	r5,r4
    1188:	11000017 	ldw	r4,0(r2)
    118c:	0000d301 	jmpi	d30 <_fseeko_r>

00001190 <_fstat_r>:
    1190:	defffd04 	addi	sp,sp,-12
    1194:	2805883a 	mov	r2,r5
    1198:	dc000015 	stw	r16,0(sp)
    119c:	04100034 	movhi	r16,16384
    11a0:	dc400115 	stw	r17,4(sp)
    11a4:	84086104 	addi	r16,r16,8580
    11a8:	2023883a 	mov	r17,r4
    11ac:	300b883a 	mov	r5,r6
    11b0:	1009883a 	mov	r4,r2
    11b4:	dfc00215 	stw	ra,8(sp)
    11b8:	80000015 	stw	zero,0(r16)
    11bc:	000e22c0 	call	e22c <fstat>
    11c0:	00ffffc4 	movi	r3,-1
    11c4:	10c00526 	beq	r2,r3,11dc <_fstat_r+0x4c>
    11c8:	dfc00217 	ldw	ra,8(sp)
    11cc:	dc400117 	ldw	r17,4(sp)
    11d0:	dc000017 	ldw	r16,0(sp)
    11d4:	dec00304 	addi	sp,sp,12
    11d8:	f800283a 	ret
    11dc:	80c00017 	ldw	r3,0(r16)
    11e0:	183ff926 	beq	r3,zero,11c8 <__alt_data_end+0x800011c8>
    11e4:	88c00015 	stw	r3,0(r17)
    11e8:	003ff706 	br	11c8 <__alt_data_end+0x800011c8>

000011ec <_getc_r>:
    11ec:	defffd04 	addi	sp,sp,-12
    11f0:	dc000115 	stw	r16,4(sp)
    11f4:	dfc00215 	stw	ra,8(sp)
    11f8:	2021883a 	mov	r16,r4
    11fc:	20000226 	beq	r4,zero,1208 <_getc_r+0x1c>
    1200:	20800e17 	ldw	r2,56(r4)
    1204:	10000c26 	beq	r2,zero,1238 <_getc_r+0x4c>
    1208:	28800117 	ldw	r2,4(r5)
    120c:	10bfffc4 	addi	r2,r2,-1
    1210:	28800115 	stw	r2,4(r5)
    1214:	10000c16 	blt	r2,zero,1248 <_getc_r+0x5c>
    1218:	28800017 	ldw	r2,0(r5)
    121c:	10c00044 	addi	r3,r2,1
    1220:	28c00015 	stw	r3,0(r5)
    1224:	10800003 	ldbu	r2,0(r2)
    1228:	dfc00217 	ldw	ra,8(sp)
    122c:	dc000117 	ldw	r16,4(sp)
    1230:	dec00304 	addi	sp,sp,12
    1234:	f800283a 	ret
    1238:	d9400015 	stw	r5,0(sp)
    123c:	0006b2c0 	call	6b2c <__sinit>
    1240:	d9400017 	ldw	r5,0(sp)
    1244:	003ff006 	br	1208 <__alt_data_end+0x80001208>
    1248:	8009883a 	mov	r4,r16
    124c:	dfc00217 	ldw	ra,8(sp)
    1250:	dc000117 	ldw	r16,4(sp)
    1254:	dec00304 	addi	sp,sp,12
    1258:	00022ec1 	jmpi	22ec <__srget_r>

0000125c <getc>:
    125c:	00900034 	movhi	r2,16384
    1260:	defffd04 	addi	sp,sp,-12
    1264:	10885204 	addi	r2,r2,8520
    1268:	dc400115 	stw	r17,4(sp)
    126c:	14400017 	ldw	r17,0(r2)
    1270:	dc000015 	stw	r16,0(sp)
    1274:	dfc00215 	stw	ra,8(sp)
    1278:	2021883a 	mov	r16,r4
    127c:	88000226 	beq	r17,zero,1288 <getc+0x2c>
    1280:	88800e17 	ldw	r2,56(r17)
    1284:	10000d26 	beq	r2,zero,12bc <getc+0x60>
    1288:	80800117 	ldw	r2,4(r16)
    128c:	10bfffc4 	addi	r2,r2,-1
    1290:	80800115 	stw	r2,4(r16)
    1294:	10000c16 	blt	r2,zero,12c8 <getc+0x6c>
    1298:	80800017 	ldw	r2,0(r16)
    129c:	10c00044 	addi	r3,r2,1
    12a0:	80c00015 	stw	r3,0(r16)
    12a4:	10800003 	ldbu	r2,0(r2)
    12a8:	dfc00217 	ldw	ra,8(sp)
    12ac:	dc400117 	ldw	r17,4(sp)
    12b0:	dc000017 	ldw	r16,0(sp)
    12b4:	dec00304 	addi	sp,sp,12
    12b8:	f800283a 	ret
    12bc:	8809883a 	mov	r4,r17
    12c0:	0006b2c0 	call	6b2c <__sinit>
    12c4:	003ff006 	br	1288 <__alt_data_end+0x80001288>
    12c8:	800b883a 	mov	r5,r16
    12cc:	8809883a 	mov	r4,r17
    12d0:	dfc00217 	ldw	ra,8(sp)
    12d4:	dc400117 	ldw	r17,4(sp)
    12d8:	dc000017 	ldw	r16,0(sp)
    12dc:	dec00304 	addi	sp,sp,12
    12e0:	00022ec1 	jmpi	22ec <__srget_r>

000012e4 <__smakebuf_r>:
    12e4:	2880030b 	ldhu	r2,12(r5)
    12e8:	10c0008c 	andi	r3,r2,2
    12ec:	1800411e 	bne	r3,zero,13f4 <__smakebuf_r+0x110>
    12f0:	deffec04 	addi	sp,sp,-80
    12f4:	dc000f15 	stw	r16,60(sp)
    12f8:	2821883a 	mov	r16,r5
    12fc:	2940038f 	ldh	r5,14(r5)
    1300:	dc401015 	stw	r17,64(sp)
    1304:	dfc01315 	stw	ra,76(sp)
    1308:	dcc01215 	stw	r19,72(sp)
    130c:	dc801115 	stw	r18,68(sp)
    1310:	2023883a 	mov	r17,r4
    1314:	28001c16 	blt	r5,zero,1388 <__smakebuf_r+0xa4>
    1318:	d80d883a 	mov	r6,sp
    131c:	00011900 	call	1190 <_fstat_r>
    1320:	10001816 	blt	r2,zero,1384 <__smakebuf_r+0xa0>
    1324:	d8800117 	ldw	r2,4(sp)
    1328:	00e00014 	movui	r3,32768
    132c:	10bc000c 	andi	r2,r2,61440
    1330:	14c80020 	cmpeqi	r19,r2,8192
    1334:	10c03726 	beq	r2,r3,1414 <__smakebuf_r+0x130>
    1338:	80c0030b 	ldhu	r3,12(r16)
    133c:	18c20014 	ori	r3,r3,2048
    1340:	80c0030d 	sth	r3,12(r16)
    1344:	00c80004 	movi	r3,8192
    1348:	10c0521e 	bne	r2,r3,1494 <__smakebuf_r+0x1b0>
    134c:	8140038f 	ldh	r5,14(r16)
    1350:	8809883a 	mov	r4,r17
    1354:	00076a00 	call	76a0 <_isatty_r>
    1358:	10004c26 	beq	r2,zero,148c <__smakebuf_r+0x1a8>
    135c:	8080030b 	ldhu	r2,12(r16)
    1360:	80c010c4 	addi	r3,r16,67
    1364:	80c00015 	stw	r3,0(r16)
    1368:	10800054 	ori	r2,r2,1
    136c:	8080030d 	sth	r2,12(r16)
    1370:	00800044 	movi	r2,1
    1374:	80c00415 	stw	r3,16(r16)
    1378:	80800515 	stw	r2,20(r16)
    137c:	04810004 	movi	r18,1024
    1380:	00000706 	br	13a0 <__smakebuf_r+0xbc>
    1384:	8080030b 	ldhu	r2,12(r16)
    1388:	10c0200c 	andi	r3,r2,128
    138c:	18001f1e 	bne	r3,zero,140c <__smakebuf_r+0x128>
    1390:	04810004 	movi	r18,1024
    1394:	10820014 	ori	r2,r2,2048
    1398:	8080030d 	sth	r2,12(r16)
    139c:	0027883a 	mov	r19,zero
    13a0:	900b883a 	mov	r5,r18
    13a4:	8809883a 	mov	r4,r17
    13a8:	00014a00 	call	14a0 <_malloc_r>
    13ac:	10002c26 	beq	r2,zero,1460 <__smakebuf_r+0x17c>
    13b0:	80c0030b 	ldhu	r3,12(r16)
    13b4:	01000034 	movhi	r4,0
    13b8:	2119f904 	addi	r4,r4,26596
    13bc:	89000f15 	stw	r4,60(r17)
    13c0:	18c02014 	ori	r3,r3,128
    13c4:	80c0030d 	sth	r3,12(r16)
    13c8:	80800015 	stw	r2,0(r16)
    13cc:	80800415 	stw	r2,16(r16)
    13d0:	84800515 	stw	r18,20(r16)
    13d4:	98001a1e 	bne	r19,zero,1440 <__smakebuf_r+0x15c>
    13d8:	dfc01317 	ldw	ra,76(sp)
    13dc:	dcc01217 	ldw	r19,72(sp)
    13e0:	dc801117 	ldw	r18,68(sp)
    13e4:	dc401017 	ldw	r17,64(sp)
    13e8:	dc000f17 	ldw	r16,60(sp)
    13ec:	dec01404 	addi	sp,sp,80
    13f0:	f800283a 	ret
    13f4:	288010c4 	addi	r2,r5,67
    13f8:	28800015 	stw	r2,0(r5)
    13fc:	28800415 	stw	r2,16(r5)
    1400:	00800044 	movi	r2,1
    1404:	28800515 	stw	r2,20(r5)
    1408:	f800283a 	ret
    140c:	04801004 	movi	r18,64
    1410:	003fe006 	br	1394 <__alt_data_end+0x80001394>
    1414:	81000a17 	ldw	r4,40(r16)
    1418:	00c00034 	movhi	r3,0
    141c:	18c92804 	addi	r3,r3,9376
    1420:	20ffc51e 	bne	r4,r3,1338 <__alt_data_end+0x80001338>
    1424:	8080030b 	ldhu	r2,12(r16)
    1428:	04810004 	movi	r18,1024
    142c:	84801315 	stw	r18,76(r16)
    1430:	1484b03a 	or	r2,r2,r18
    1434:	8080030d 	sth	r2,12(r16)
    1438:	0027883a 	mov	r19,zero
    143c:	003fd806 	br	13a0 <__alt_data_end+0x800013a0>
    1440:	8140038f 	ldh	r5,14(r16)
    1444:	8809883a 	mov	r4,r17
    1448:	00076a00 	call	76a0 <_isatty_r>
    144c:	103fe226 	beq	r2,zero,13d8 <__alt_data_end+0x800013d8>
    1450:	8080030b 	ldhu	r2,12(r16)
    1454:	10800054 	ori	r2,r2,1
    1458:	8080030d 	sth	r2,12(r16)
    145c:	003fde06 	br	13d8 <__alt_data_end+0x800013d8>
    1460:	8080030b 	ldhu	r2,12(r16)
    1464:	10c0800c 	andi	r3,r2,512
    1468:	183fdb1e 	bne	r3,zero,13d8 <__alt_data_end+0x800013d8>
    146c:	10800094 	ori	r2,r2,2
    1470:	80c010c4 	addi	r3,r16,67
    1474:	8080030d 	sth	r2,12(r16)
    1478:	00800044 	movi	r2,1
    147c:	80c00015 	stw	r3,0(r16)
    1480:	80c00415 	stw	r3,16(r16)
    1484:	80800515 	stw	r2,20(r16)
    1488:	003fd306 	br	13d8 <__alt_data_end+0x800013d8>
    148c:	04810004 	movi	r18,1024
    1490:	003fc306 	br	13a0 <__alt_data_end+0x800013a0>
    1494:	0027883a 	mov	r19,zero
    1498:	04810004 	movi	r18,1024
    149c:	003fc006 	br	13a0 <__alt_data_end+0x800013a0>

000014a0 <_malloc_r>:
    14a0:	defff504 	addi	sp,sp,-44
    14a4:	dc800315 	stw	r18,12(sp)
    14a8:	dfc00a15 	stw	ra,40(sp)
    14ac:	df000915 	stw	fp,36(sp)
    14b0:	ddc00815 	stw	r23,32(sp)
    14b4:	dd800715 	stw	r22,28(sp)
    14b8:	dd400615 	stw	r21,24(sp)
    14bc:	dd000515 	stw	r20,20(sp)
    14c0:	dcc00415 	stw	r19,16(sp)
    14c4:	dc400215 	stw	r17,8(sp)
    14c8:	dc000115 	stw	r16,4(sp)
    14cc:	288002c4 	addi	r2,r5,11
    14d0:	00c00584 	movi	r3,22
    14d4:	2025883a 	mov	r18,r4
    14d8:	18807f2e 	bgeu	r3,r2,16d8 <_malloc_r+0x238>
    14dc:	047ffe04 	movi	r17,-8
    14e0:	1462703a 	and	r17,r2,r17
    14e4:	8800a316 	blt	r17,zero,1774 <_malloc_r+0x2d4>
    14e8:	8940a236 	bltu	r17,r5,1774 <_malloc_r+0x2d4>
    14ec:	000e6340 	call	e634 <__malloc_lock>
    14f0:	00807dc4 	movi	r2,503
    14f4:	1441e92e 	bgeu	r2,r17,1c9c <_malloc_r+0x7fc>
    14f8:	8804d27a 	srli	r2,r17,9
    14fc:	1000a126 	beq	r2,zero,1784 <_malloc_r+0x2e4>
    1500:	00c00104 	movi	r3,4
    1504:	18811e36 	bltu	r3,r2,1980 <_malloc_r+0x4e0>
    1508:	8804d1ba 	srli	r2,r17,6
    150c:	12000e44 	addi	r8,r2,57
    1510:	11c00e04 	addi	r7,r2,56
    1514:	4209883a 	add	r4,r8,r8
    1518:	04d00034 	movhi	r19,16384
    151c:	2109883a 	add	r4,r4,r4
    1520:	9cc22804 	addi	r19,r19,2208
    1524:	2109883a 	add	r4,r4,r4
    1528:	9909883a 	add	r4,r19,r4
    152c:	24000117 	ldw	r16,4(r4)
    1530:	213ffe04 	addi	r4,r4,-8
    1534:	24009726 	beq	r4,r16,1794 <_malloc_r+0x2f4>
    1538:	80800117 	ldw	r2,4(r16)
    153c:	01bfff04 	movi	r6,-4
    1540:	014003c4 	movi	r5,15
    1544:	1184703a 	and	r2,r2,r6
    1548:	1447c83a 	sub	r3,r2,r17
    154c:	28c00716 	blt	r5,r3,156c <_malloc_r+0xcc>
    1550:	1800920e 	bge	r3,zero,179c <_malloc_r+0x2fc>
    1554:	84000317 	ldw	r16,12(r16)
    1558:	24008e26 	beq	r4,r16,1794 <_malloc_r+0x2f4>
    155c:	80800117 	ldw	r2,4(r16)
    1560:	1184703a 	and	r2,r2,r6
    1564:	1447c83a 	sub	r3,r2,r17
    1568:	28fff90e 	bge	r5,r3,1550 <__alt_data_end+0x80001550>
    156c:	3809883a 	mov	r4,r7
    1570:	01900034 	movhi	r6,16384
    1574:	9c000417 	ldw	r16,16(r19)
    1578:	31822804 	addi	r6,r6,2208
    157c:	32000204 	addi	r8,r6,8
    1580:	82013426 	beq	r16,r8,1a54 <_malloc_r+0x5b4>
    1584:	80c00117 	ldw	r3,4(r16)
    1588:	00bfff04 	movi	r2,-4
    158c:	188e703a 	and	r7,r3,r2
    1590:	3c45c83a 	sub	r2,r7,r17
    1594:	00c003c4 	movi	r3,15
    1598:	18811f16 	blt	r3,r2,1a18 <_malloc_r+0x578>
    159c:	32000515 	stw	r8,20(r6)
    15a0:	32000415 	stw	r8,16(r6)
    15a4:	10007f0e 	bge	r2,zero,17a4 <_malloc_r+0x304>
    15a8:	00807fc4 	movi	r2,511
    15ac:	11c0fd36 	bltu	r2,r7,19a4 <_malloc_r+0x504>
    15b0:	3806d0fa 	srli	r3,r7,3
    15b4:	01c00044 	movi	r7,1
    15b8:	30800117 	ldw	r2,4(r6)
    15bc:	19400044 	addi	r5,r3,1
    15c0:	294b883a 	add	r5,r5,r5
    15c4:	1807d0ba 	srai	r3,r3,2
    15c8:	294b883a 	add	r5,r5,r5
    15cc:	294b883a 	add	r5,r5,r5
    15d0:	298b883a 	add	r5,r5,r6
    15d4:	38c6983a 	sll	r3,r7,r3
    15d8:	29c00017 	ldw	r7,0(r5)
    15dc:	2a7ffe04 	addi	r9,r5,-8
    15e0:	1886b03a 	or	r3,r3,r2
    15e4:	82400315 	stw	r9,12(r16)
    15e8:	81c00215 	stw	r7,8(r16)
    15ec:	30c00115 	stw	r3,4(r6)
    15f0:	2c000015 	stw	r16,0(r5)
    15f4:	3c000315 	stw	r16,12(r7)
    15f8:	2005d0ba 	srai	r2,r4,2
    15fc:	01400044 	movi	r5,1
    1600:	288a983a 	sll	r5,r5,r2
    1604:	19406f36 	bltu	r3,r5,17c4 <_malloc_r+0x324>
    1608:	28c4703a 	and	r2,r5,r3
    160c:	10000a1e 	bne	r2,zero,1638 <_malloc_r+0x198>
    1610:	00bfff04 	movi	r2,-4
    1614:	294b883a 	add	r5,r5,r5
    1618:	2088703a 	and	r4,r4,r2
    161c:	28c4703a 	and	r2,r5,r3
    1620:	21000104 	addi	r4,r4,4
    1624:	1000041e 	bne	r2,zero,1638 <_malloc_r+0x198>
    1628:	294b883a 	add	r5,r5,r5
    162c:	28c4703a 	and	r2,r5,r3
    1630:	21000104 	addi	r4,r4,4
    1634:	103ffc26 	beq	r2,zero,1628 <__alt_data_end+0x80001628>
    1638:	02bfff04 	movi	r10,-4
    163c:	024003c4 	movi	r9,15
    1640:	21800044 	addi	r6,r4,1
    1644:	318d883a 	add	r6,r6,r6
    1648:	318d883a 	add	r6,r6,r6
    164c:	318d883a 	add	r6,r6,r6
    1650:	998d883a 	add	r6,r19,r6
    1654:	333ffe04 	addi	r12,r6,-8
    1658:	2017883a 	mov	r11,r4
    165c:	31800104 	addi	r6,r6,4
    1660:	34000017 	ldw	r16,0(r6)
    1664:	31fffd04 	addi	r7,r6,-12
    1668:	81c0041e 	bne	r16,r7,167c <_malloc_r+0x1dc>
    166c:	0000fb06 	br	1a5c <_malloc_r+0x5bc>
    1670:	1801030e 	bge	r3,zero,1a80 <_malloc_r+0x5e0>
    1674:	84000317 	ldw	r16,12(r16)
    1678:	81c0f826 	beq	r16,r7,1a5c <_malloc_r+0x5bc>
    167c:	80800117 	ldw	r2,4(r16)
    1680:	1284703a 	and	r2,r2,r10
    1684:	1447c83a 	sub	r3,r2,r17
    1688:	48fff90e 	bge	r9,r3,1670 <__alt_data_end+0x80001670>
    168c:	80800317 	ldw	r2,12(r16)
    1690:	81000217 	ldw	r4,8(r16)
    1694:	89400054 	ori	r5,r17,1
    1698:	81400115 	stw	r5,4(r16)
    169c:	20800315 	stw	r2,12(r4)
    16a0:	11000215 	stw	r4,8(r2)
    16a4:	8463883a 	add	r17,r16,r17
    16a8:	9c400515 	stw	r17,20(r19)
    16ac:	9c400415 	stw	r17,16(r19)
    16b0:	18800054 	ori	r2,r3,1
    16b4:	88800115 	stw	r2,4(r17)
    16b8:	8a000315 	stw	r8,12(r17)
    16bc:	8a000215 	stw	r8,8(r17)
    16c0:	88e3883a 	add	r17,r17,r3
    16c4:	88c00015 	stw	r3,0(r17)
    16c8:	9009883a 	mov	r4,r18
    16cc:	000e6580 	call	e658 <__malloc_unlock>
    16d0:	80800204 	addi	r2,r16,8
    16d4:	00001b06 	br	1744 <_malloc_r+0x2a4>
    16d8:	04400404 	movi	r17,16
    16dc:	89402536 	bltu	r17,r5,1774 <_malloc_r+0x2d4>
    16e0:	000e6340 	call	e634 <__malloc_lock>
    16e4:	00800184 	movi	r2,6
    16e8:	01000084 	movi	r4,2
    16ec:	04d00034 	movhi	r19,16384
    16f0:	1085883a 	add	r2,r2,r2
    16f4:	9cc22804 	addi	r19,r19,2208
    16f8:	1085883a 	add	r2,r2,r2
    16fc:	9885883a 	add	r2,r19,r2
    1700:	14000117 	ldw	r16,4(r2)
    1704:	10fffe04 	addi	r3,r2,-8
    1708:	80c0d926 	beq	r16,r3,1a70 <_malloc_r+0x5d0>
    170c:	80c00117 	ldw	r3,4(r16)
    1710:	81000317 	ldw	r4,12(r16)
    1714:	00bfff04 	movi	r2,-4
    1718:	1884703a 	and	r2,r3,r2
    171c:	81400217 	ldw	r5,8(r16)
    1720:	8085883a 	add	r2,r16,r2
    1724:	10c00117 	ldw	r3,4(r2)
    1728:	29000315 	stw	r4,12(r5)
    172c:	21400215 	stw	r5,8(r4)
    1730:	18c00054 	ori	r3,r3,1
    1734:	10c00115 	stw	r3,4(r2)
    1738:	9009883a 	mov	r4,r18
    173c:	000e6580 	call	e658 <__malloc_unlock>
    1740:	80800204 	addi	r2,r16,8
    1744:	dfc00a17 	ldw	ra,40(sp)
    1748:	df000917 	ldw	fp,36(sp)
    174c:	ddc00817 	ldw	r23,32(sp)
    1750:	dd800717 	ldw	r22,28(sp)
    1754:	dd400617 	ldw	r21,24(sp)
    1758:	dd000517 	ldw	r20,20(sp)
    175c:	dcc00417 	ldw	r19,16(sp)
    1760:	dc800317 	ldw	r18,12(sp)
    1764:	dc400217 	ldw	r17,8(sp)
    1768:	dc000117 	ldw	r16,4(sp)
    176c:	dec00b04 	addi	sp,sp,44
    1770:	f800283a 	ret
    1774:	00800304 	movi	r2,12
    1778:	90800015 	stw	r2,0(r18)
    177c:	0005883a 	mov	r2,zero
    1780:	003ff006 	br	1744 <__alt_data_end+0x80001744>
    1784:	01002004 	movi	r4,128
    1788:	02001004 	movi	r8,64
    178c:	01c00fc4 	movi	r7,63
    1790:	003f6106 	br	1518 <__alt_data_end+0x80001518>
    1794:	4009883a 	mov	r4,r8
    1798:	003f7506 	br	1570 <__alt_data_end+0x80001570>
    179c:	81000317 	ldw	r4,12(r16)
    17a0:	003fde06 	br	171c <__alt_data_end+0x8000171c>
    17a4:	81c5883a 	add	r2,r16,r7
    17a8:	11400117 	ldw	r5,4(r2)
    17ac:	9009883a 	mov	r4,r18
    17b0:	29400054 	ori	r5,r5,1
    17b4:	11400115 	stw	r5,4(r2)
    17b8:	000e6580 	call	e658 <__malloc_unlock>
    17bc:	80800204 	addi	r2,r16,8
    17c0:	003fe006 	br	1744 <__alt_data_end+0x80001744>
    17c4:	9c000217 	ldw	r16,8(r19)
    17c8:	00bfff04 	movi	r2,-4
    17cc:	85800117 	ldw	r22,4(r16)
    17d0:	b0ac703a 	and	r22,r22,r2
    17d4:	b4400336 	bltu	r22,r17,17e4 <_malloc_r+0x344>
    17d8:	b445c83a 	sub	r2,r22,r17
    17dc:	00c003c4 	movi	r3,15
    17e0:	18805d16 	blt	r3,r2,1958 <_malloc_r+0x4b8>
    17e4:	05d00034 	movhi	r23,16384
    17e8:	00900034 	movhi	r2,16384
    17ec:	10886404 	addi	r2,r2,8592
    17f0:	bdc85304 	addi	r23,r23,8524
    17f4:	15400017 	ldw	r21,0(r2)
    17f8:	b8c00017 	ldw	r3,0(r23)
    17fc:	00bfffc4 	movi	r2,-1
    1800:	858d883a 	add	r6,r16,r22
    1804:	8d6b883a 	add	r21,r17,r21
    1808:	1880ea26 	beq	r3,r2,1bb4 <_malloc_r+0x714>
    180c:	ad4403c4 	addi	r21,r21,4111
    1810:	00bc0004 	movi	r2,-4096
    1814:	a8aa703a 	and	r21,r21,r2
    1818:	a80b883a 	mov	r5,r21
    181c:	9009883a 	mov	r4,r18
    1820:	d9800015 	stw	r6,0(sp)
    1824:	00023740 	call	2374 <_sbrk_r>
    1828:	1029883a 	mov	r20,r2
    182c:	00bfffc4 	movi	r2,-1
    1830:	d9800017 	ldw	r6,0(sp)
    1834:	a080e826 	beq	r20,r2,1bd8 <_malloc_r+0x738>
    1838:	a180a636 	bltu	r20,r6,1ad4 <_malloc_r+0x634>
    183c:	07100034 	movhi	fp,16384
    1840:	e7086f04 	addi	fp,fp,8636
    1844:	e0800017 	ldw	r2,0(fp)
    1848:	a887883a 	add	r3,r21,r2
    184c:	e0c00015 	stw	r3,0(fp)
    1850:	3500e626 	beq	r6,r20,1bec <_malloc_r+0x74c>
    1854:	b9000017 	ldw	r4,0(r23)
    1858:	00bfffc4 	movi	r2,-1
    185c:	2080ee26 	beq	r4,r2,1c18 <_malloc_r+0x778>
    1860:	a185c83a 	sub	r2,r20,r6
    1864:	10c5883a 	add	r2,r2,r3
    1868:	e0800015 	stw	r2,0(fp)
    186c:	a0c001cc 	andi	r3,r20,7
    1870:	1800bc26 	beq	r3,zero,1b64 <_malloc_r+0x6c4>
    1874:	a0e9c83a 	sub	r20,r20,r3
    1878:	00840204 	movi	r2,4104
    187c:	a5000204 	addi	r20,r20,8
    1880:	10c7c83a 	sub	r3,r2,r3
    1884:	a545883a 	add	r2,r20,r21
    1888:	1083ffcc 	andi	r2,r2,4095
    188c:	18abc83a 	sub	r21,r3,r2
    1890:	a80b883a 	mov	r5,r21
    1894:	9009883a 	mov	r4,r18
    1898:	00023740 	call	2374 <_sbrk_r>
    189c:	00ffffc4 	movi	r3,-1
    18a0:	10c0e126 	beq	r2,r3,1c28 <_malloc_r+0x788>
    18a4:	1505c83a 	sub	r2,r2,r20
    18a8:	1545883a 	add	r2,r2,r21
    18ac:	10800054 	ori	r2,r2,1
    18b0:	e0c00017 	ldw	r3,0(fp)
    18b4:	9d000215 	stw	r20,8(r19)
    18b8:	a0800115 	stw	r2,4(r20)
    18bc:	a8c7883a 	add	r3,r21,r3
    18c0:	e0c00015 	stw	r3,0(fp)
    18c4:	84c00e26 	beq	r16,r19,1900 <_malloc_r+0x460>
    18c8:	018003c4 	movi	r6,15
    18cc:	3580a72e 	bgeu	r6,r22,1b6c <_malloc_r+0x6cc>
    18d0:	81400117 	ldw	r5,4(r16)
    18d4:	013ffe04 	movi	r4,-8
    18d8:	b0bffd04 	addi	r2,r22,-12
    18dc:	1104703a 	and	r2,r2,r4
    18e0:	2900004c 	andi	r4,r5,1
    18e4:	2088b03a 	or	r4,r4,r2
    18e8:	81000115 	stw	r4,4(r16)
    18ec:	01400144 	movi	r5,5
    18f0:	8089883a 	add	r4,r16,r2
    18f4:	21400115 	stw	r5,4(r4)
    18f8:	21400215 	stw	r5,8(r4)
    18fc:	3080cd36 	bltu	r6,r2,1c34 <_malloc_r+0x794>
    1900:	00900034 	movhi	r2,16384
    1904:	10886304 	addi	r2,r2,8588
    1908:	11000017 	ldw	r4,0(r2)
    190c:	20c0012e 	bgeu	r4,r3,1914 <_malloc_r+0x474>
    1910:	10c00015 	stw	r3,0(r2)
    1914:	00900034 	movhi	r2,16384
    1918:	10886204 	addi	r2,r2,8584
    191c:	11000017 	ldw	r4,0(r2)
    1920:	9c000217 	ldw	r16,8(r19)
    1924:	20c0012e 	bgeu	r4,r3,192c <_malloc_r+0x48c>
    1928:	10c00015 	stw	r3,0(r2)
    192c:	80c00117 	ldw	r3,4(r16)
    1930:	00bfff04 	movi	r2,-4
    1934:	1886703a 	and	r3,r3,r2
    1938:	1c45c83a 	sub	r2,r3,r17
    193c:	1c400236 	bltu	r3,r17,1948 <_malloc_r+0x4a8>
    1940:	00c003c4 	movi	r3,15
    1944:	18800416 	blt	r3,r2,1958 <_malloc_r+0x4b8>
    1948:	9009883a 	mov	r4,r18
    194c:	000e6580 	call	e658 <__malloc_unlock>
    1950:	0005883a 	mov	r2,zero
    1954:	003f7b06 	br	1744 <__alt_data_end+0x80001744>
    1958:	88c00054 	ori	r3,r17,1
    195c:	80c00115 	stw	r3,4(r16)
    1960:	8463883a 	add	r17,r16,r17
    1964:	10800054 	ori	r2,r2,1
    1968:	9c400215 	stw	r17,8(r19)
    196c:	88800115 	stw	r2,4(r17)
    1970:	9009883a 	mov	r4,r18
    1974:	000e6580 	call	e658 <__malloc_unlock>
    1978:	80800204 	addi	r2,r16,8
    197c:	003f7106 	br	1744 <__alt_data_end+0x80001744>
    1980:	00c00504 	movi	r3,20
    1984:	18804a2e 	bgeu	r3,r2,1ab0 <_malloc_r+0x610>
    1988:	00c01504 	movi	r3,84
    198c:	18806e36 	bltu	r3,r2,1b48 <_malloc_r+0x6a8>
    1990:	8804d33a 	srli	r2,r17,12
    1994:	12001bc4 	addi	r8,r2,111
    1998:	11c01b84 	addi	r7,r2,110
    199c:	4209883a 	add	r4,r8,r8
    19a0:	003edd06 	br	1518 <__alt_data_end+0x80001518>
    19a4:	3804d27a 	srli	r2,r7,9
    19a8:	00c00104 	movi	r3,4
    19ac:	1880442e 	bgeu	r3,r2,1ac0 <_malloc_r+0x620>
    19b0:	00c00504 	movi	r3,20
    19b4:	18808136 	bltu	r3,r2,1bbc <_malloc_r+0x71c>
    19b8:	11401704 	addi	r5,r2,92
    19bc:	10c016c4 	addi	r3,r2,91
    19c0:	294b883a 	add	r5,r5,r5
    19c4:	294b883a 	add	r5,r5,r5
    19c8:	294b883a 	add	r5,r5,r5
    19cc:	994b883a 	add	r5,r19,r5
    19d0:	28800017 	ldw	r2,0(r5)
    19d4:	01900034 	movhi	r6,16384
    19d8:	297ffe04 	addi	r5,r5,-8
    19dc:	31822804 	addi	r6,r6,2208
    19e0:	28806526 	beq	r5,r2,1b78 <_malloc_r+0x6d8>
    19e4:	01bfff04 	movi	r6,-4
    19e8:	10c00117 	ldw	r3,4(r2)
    19ec:	1986703a 	and	r3,r3,r6
    19f0:	38c0022e 	bgeu	r7,r3,19fc <_malloc_r+0x55c>
    19f4:	10800217 	ldw	r2,8(r2)
    19f8:	28bffb1e 	bne	r5,r2,19e8 <__alt_data_end+0x800019e8>
    19fc:	11400317 	ldw	r5,12(r2)
    1a00:	98c00117 	ldw	r3,4(r19)
    1a04:	81400315 	stw	r5,12(r16)
    1a08:	80800215 	stw	r2,8(r16)
    1a0c:	2c000215 	stw	r16,8(r5)
    1a10:	14000315 	stw	r16,12(r2)
    1a14:	003ef806 	br	15f8 <__alt_data_end+0x800015f8>
    1a18:	88c00054 	ori	r3,r17,1
    1a1c:	80c00115 	stw	r3,4(r16)
    1a20:	8463883a 	add	r17,r16,r17
    1a24:	34400515 	stw	r17,20(r6)
    1a28:	34400415 	stw	r17,16(r6)
    1a2c:	10c00054 	ori	r3,r2,1
    1a30:	8a000315 	stw	r8,12(r17)
    1a34:	8a000215 	stw	r8,8(r17)
    1a38:	88c00115 	stw	r3,4(r17)
    1a3c:	88a3883a 	add	r17,r17,r2
    1a40:	88800015 	stw	r2,0(r17)
    1a44:	9009883a 	mov	r4,r18
    1a48:	000e6580 	call	e658 <__malloc_unlock>
    1a4c:	80800204 	addi	r2,r16,8
    1a50:	003f3c06 	br	1744 <__alt_data_end+0x80001744>
    1a54:	30c00117 	ldw	r3,4(r6)
    1a58:	003ee706 	br	15f8 <__alt_data_end+0x800015f8>
    1a5c:	5ac00044 	addi	r11,r11,1
    1a60:	588000cc 	andi	r2,r11,3
    1a64:	31800204 	addi	r6,r6,8
    1a68:	103efd1e 	bne	r2,zero,1660 <__alt_data_end+0x80001660>
    1a6c:	00002406 	br	1b00 <_malloc_r+0x660>
    1a70:	14000317 	ldw	r16,12(r2)
    1a74:	143f251e 	bne	r2,r16,170c <__alt_data_end+0x8000170c>
    1a78:	21000084 	addi	r4,r4,2
    1a7c:	003ebc06 	br	1570 <__alt_data_end+0x80001570>
    1a80:	8085883a 	add	r2,r16,r2
    1a84:	10c00117 	ldw	r3,4(r2)
    1a88:	81000317 	ldw	r4,12(r16)
    1a8c:	81400217 	ldw	r5,8(r16)
    1a90:	18c00054 	ori	r3,r3,1
    1a94:	10c00115 	stw	r3,4(r2)
    1a98:	29000315 	stw	r4,12(r5)
    1a9c:	21400215 	stw	r5,8(r4)
    1aa0:	9009883a 	mov	r4,r18
    1aa4:	000e6580 	call	e658 <__malloc_unlock>
    1aa8:	80800204 	addi	r2,r16,8
    1aac:	003f2506 	br	1744 <__alt_data_end+0x80001744>
    1ab0:	12001704 	addi	r8,r2,92
    1ab4:	11c016c4 	addi	r7,r2,91
    1ab8:	4209883a 	add	r4,r8,r8
    1abc:	003e9606 	br	1518 <__alt_data_end+0x80001518>
    1ac0:	3804d1ba 	srli	r2,r7,6
    1ac4:	11400e44 	addi	r5,r2,57
    1ac8:	10c00e04 	addi	r3,r2,56
    1acc:	294b883a 	add	r5,r5,r5
    1ad0:	003fbc06 	br	19c4 <__alt_data_end+0x800019c4>
    1ad4:	84ff5926 	beq	r16,r19,183c <__alt_data_end+0x8000183c>
    1ad8:	00900034 	movhi	r2,16384
    1adc:	10822804 	addi	r2,r2,2208
    1ae0:	14000217 	ldw	r16,8(r2)
    1ae4:	00bfff04 	movi	r2,-4
    1ae8:	80c00117 	ldw	r3,4(r16)
    1aec:	1886703a 	and	r3,r3,r2
    1af0:	003f9106 	br	1938 <__alt_data_end+0x80001938>
    1af4:	60800217 	ldw	r2,8(r12)
    1af8:	213fffc4 	addi	r4,r4,-1
    1afc:	1300651e 	bne	r2,r12,1c94 <_malloc_r+0x7f4>
    1b00:	208000cc 	andi	r2,r4,3
    1b04:	633ffe04 	addi	r12,r12,-8
    1b08:	103ffa1e 	bne	r2,zero,1af4 <__alt_data_end+0x80001af4>
    1b0c:	98800117 	ldw	r2,4(r19)
    1b10:	0146303a 	nor	r3,zero,r5
    1b14:	1884703a 	and	r2,r3,r2
    1b18:	98800115 	stw	r2,4(r19)
    1b1c:	294b883a 	add	r5,r5,r5
    1b20:	117f2836 	bltu	r2,r5,17c4 <__alt_data_end+0x800017c4>
    1b24:	283f2726 	beq	r5,zero,17c4 <__alt_data_end+0x800017c4>
    1b28:	2886703a 	and	r3,r5,r2
    1b2c:	5809883a 	mov	r4,r11
    1b30:	183ec31e 	bne	r3,zero,1640 <__alt_data_end+0x80001640>
    1b34:	294b883a 	add	r5,r5,r5
    1b38:	2886703a 	and	r3,r5,r2
    1b3c:	21000104 	addi	r4,r4,4
    1b40:	183ffc26 	beq	r3,zero,1b34 <__alt_data_end+0x80001b34>
    1b44:	003ebe06 	br	1640 <__alt_data_end+0x80001640>
    1b48:	00c05504 	movi	r3,340
    1b4c:	18801236 	bltu	r3,r2,1b98 <_malloc_r+0x6f8>
    1b50:	8804d3fa 	srli	r2,r17,15
    1b54:	12001e04 	addi	r8,r2,120
    1b58:	11c01dc4 	addi	r7,r2,119
    1b5c:	4209883a 	add	r4,r8,r8
    1b60:	003e6d06 	br	1518 <__alt_data_end+0x80001518>
    1b64:	00c40004 	movi	r3,4096
    1b68:	003f4606 	br	1884 <__alt_data_end+0x80001884>
    1b6c:	00800044 	movi	r2,1
    1b70:	a0800115 	stw	r2,4(r20)
    1b74:	003f7406 	br	1948 <__alt_data_end+0x80001948>
    1b78:	1805d0ba 	srai	r2,r3,2
    1b7c:	01c00044 	movi	r7,1
    1b80:	30c00117 	ldw	r3,4(r6)
    1b84:	388e983a 	sll	r7,r7,r2
    1b88:	2805883a 	mov	r2,r5
    1b8c:	38c6b03a 	or	r3,r7,r3
    1b90:	30c00115 	stw	r3,4(r6)
    1b94:	003f9b06 	br	1a04 <__alt_data_end+0x80001a04>
    1b98:	00c15504 	movi	r3,1364
    1b9c:	18801a36 	bltu	r3,r2,1c08 <_malloc_r+0x768>
    1ba0:	8804d4ba 	srli	r2,r17,18
    1ba4:	12001f44 	addi	r8,r2,125
    1ba8:	11c01f04 	addi	r7,r2,124
    1bac:	4209883a 	add	r4,r8,r8
    1bb0:	003e5906 	br	1518 <__alt_data_end+0x80001518>
    1bb4:	ad400404 	addi	r21,r21,16
    1bb8:	003f1706 	br	1818 <__alt_data_end+0x80001818>
    1bbc:	00c01504 	movi	r3,84
    1bc0:	18802336 	bltu	r3,r2,1c50 <_malloc_r+0x7b0>
    1bc4:	3804d33a 	srli	r2,r7,12
    1bc8:	11401bc4 	addi	r5,r2,111
    1bcc:	10c01b84 	addi	r3,r2,110
    1bd0:	294b883a 	add	r5,r5,r5
    1bd4:	003f7b06 	br	19c4 <__alt_data_end+0x800019c4>
    1bd8:	9c000217 	ldw	r16,8(r19)
    1bdc:	00bfff04 	movi	r2,-4
    1be0:	80c00117 	ldw	r3,4(r16)
    1be4:	1886703a 	and	r3,r3,r2
    1be8:	003f5306 	br	1938 <__alt_data_end+0x80001938>
    1bec:	3083ffcc 	andi	r2,r6,4095
    1bf0:	103f181e 	bne	r2,zero,1854 <__alt_data_end+0x80001854>
    1bf4:	99000217 	ldw	r4,8(r19)
    1bf8:	b545883a 	add	r2,r22,r21
    1bfc:	10800054 	ori	r2,r2,1
    1c00:	20800115 	stw	r2,4(r4)
    1c04:	003f3e06 	br	1900 <__alt_data_end+0x80001900>
    1c08:	01003f84 	movi	r4,254
    1c0c:	02001fc4 	movi	r8,127
    1c10:	01c01f84 	movi	r7,126
    1c14:	003e4006 	br	1518 <__alt_data_end+0x80001518>
    1c18:	00900034 	movhi	r2,16384
    1c1c:	10885304 	addi	r2,r2,8524
    1c20:	15000015 	stw	r20,0(r2)
    1c24:	003f1106 	br	186c <__alt_data_end+0x8000186c>
    1c28:	00800044 	movi	r2,1
    1c2c:	002b883a 	mov	r21,zero
    1c30:	003f1f06 	br	18b0 <__alt_data_end+0x800018b0>
    1c34:	81400204 	addi	r5,r16,8
    1c38:	9009883a 	mov	r4,r18
    1c3c:	0006d4c0 	call	6d4c <_free_r>
    1c40:	00900034 	movhi	r2,16384
    1c44:	10886f04 	addi	r2,r2,8636
    1c48:	10c00017 	ldw	r3,0(r2)
    1c4c:	003f2c06 	br	1900 <__alt_data_end+0x80001900>
    1c50:	00c05504 	movi	r3,340
    1c54:	18800536 	bltu	r3,r2,1c6c <_malloc_r+0x7cc>
    1c58:	3804d3fa 	srli	r2,r7,15
    1c5c:	11401e04 	addi	r5,r2,120
    1c60:	10c01dc4 	addi	r3,r2,119
    1c64:	294b883a 	add	r5,r5,r5
    1c68:	003f5606 	br	19c4 <__alt_data_end+0x800019c4>
    1c6c:	00c15504 	movi	r3,1364
    1c70:	18800536 	bltu	r3,r2,1c88 <_malloc_r+0x7e8>
    1c74:	3804d4ba 	srli	r2,r7,18
    1c78:	11401f44 	addi	r5,r2,125
    1c7c:	10c01f04 	addi	r3,r2,124
    1c80:	294b883a 	add	r5,r5,r5
    1c84:	003f4f06 	br	19c4 <__alt_data_end+0x800019c4>
    1c88:	01403f84 	movi	r5,254
    1c8c:	00c01f84 	movi	r3,126
    1c90:	003f4c06 	br	19c4 <__alt_data_end+0x800019c4>
    1c94:	98800117 	ldw	r2,4(r19)
    1c98:	003fa006 	br	1b1c <__alt_data_end+0x80001b1c>
    1c9c:	8808d0fa 	srli	r4,r17,3
    1ca0:	20800044 	addi	r2,r4,1
    1ca4:	1085883a 	add	r2,r2,r2
    1ca8:	003e9006 	br	16ec <__alt_data_end+0x800016ec>

00001cac <memset>:
    1cac:	20c000cc 	andi	r3,r4,3
    1cb0:	2005883a 	mov	r2,r4
    1cb4:	18004426 	beq	r3,zero,1dc8 <memset+0x11c>
    1cb8:	31ffffc4 	addi	r7,r6,-1
    1cbc:	30004026 	beq	r6,zero,1dc0 <memset+0x114>
    1cc0:	2813883a 	mov	r9,r5
    1cc4:	200d883a 	mov	r6,r4
    1cc8:	2007883a 	mov	r3,r4
    1ccc:	00000406 	br	1ce0 <memset+0x34>
    1cd0:	3a3fffc4 	addi	r8,r7,-1
    1cd4:	31800044 	addi	r6,r6,1
    1cd8:	38003926 	beq	r7,zero,1dc0 <memset+0x114>
    1cdc:	400f883a 	mov	r7,r8
    1ce0:	18c00044 	addi	r3,r3,1
    1ce4:	32400005 	stb	r9,0(r6)
    1ce8:	1a0000cc 	andi	r8,r3,3
    1cec:	403ff81e 	bne	r8,zero,1cd0 <__alt_data_end+0x80001cd0>
    1cf0:	010000c4 	movi	r4,3
    1cf4:	21c02d2e 	bgeu	r4,r7,1dac <memset+0x100>
    1cf8:	29003fcc 	andi	r4,r5,255
    1cfc:	200c923a 	slli	r6,r4,8
    1d00:	3108b03a 	or	r4,r6,r4
    1d04:	200c943a 	slli	r6,r4,16
    1d08:	218cb03a 	or	r6,r4,r6
    1d0c:	010003c4 	movi	r4,15
    1d10:	21c0182e 	bgeu	r4,r7,1d74 <memset+0xc8>
    1d14:	3b3ffc04 	addi	r12,r7,-16
    1d18:	6018d13a 	srli	r12,r12,4
    1d1c:	1a000104 	addi	r8,r3,4
    1d20:	1ac00204 	addi	r11,r3,8
    1d24:	6008913a 	slli	r4,r12,4
    1d28:	1a800304 	addi	r10,r3,12
    1d2c:	1813883a 	mov	r9,r3
    1d30:	21000504 	addi	r4,r4,20
    1d34:	1909883a 	add	r4,r3,r4
    1d38:	49800015 	stw	r6,0(r9)
    1d3c:	41800015 	stw	r6,0(r8)
    1d40:	59800015 	stw	r6,0(r11)
    1d44:	51800015 	stw	r6,0(r10)
    1d48:	42000404 	addi	r8,r8,16
    1d4c:	4a400404 	addi	r9,r9,16
    1d50:	5ac00404 	addi	r11,r11,16
    1d54:	52800404 	addi	r10,r10,16
    1d58:	413ff71e 	bne	r8,r4,1d38 <__alt_data_end+0x80001d38>
    1d5c:	63000044 	addi	r12,r12,1
    1d60:	6018913a 	slli	r12,r12,4
    1d64:	39c003cc 	andi	r7,r7,15
    1d68:	010000c4 	movi	r4,3
    1d6c:	1b07883a 	add	r3,r3,r12
    1d70:	21c00e2e 	bgeu	r4,r7,1dac <memset+0x100>
    1d74:	1813883a 	mov	r9,r3
    1d78:	3811883a 	mov	r8,r7
    1d7c:	010000c4 	movi	r4,3
    1d80:	49800015 	stw	r6,0(r9)
    1d84:	423fff04 	addi	r8,r8,-4
    1d88:	4a400104 	addi	r9,r9,4
    1d8c:	223ffc36 	bltu	r4,r8,1d80 <__alt_data_end+0x80001d80>
    1d90:	393fff04 	addi	r4,r7,-4
    1d94:	2008d0ba 	srli	r4,r4,2
    1d98:	39c000cc 	andi	r7,r7,3
    1d9c:	21000044 	addi	r4,r4,1
    1da0:	2109883a 	add	r4,r4,r4
    1da4:	2109883a 	add	r4,r4,r4
    1da8:	1907883a 	add	r3,r3,r4
    1dac:	38000526 	beq	r7,zero,1dc4 <memset+0x118>
    1db0:	19cf883a 	add	r7,r3,r7
    1db4:	19400005 	stb	r5,0(r3)
    1db8:	18c00044 	addi	r3,r3,1
    1dbc:	38fffd1e 	bne	r7,r3,1db4 <__alt_data_end+0x80001db4>
    1dc0:	f800283a 	ret
    1dc4:	f800283a 	ret
    1dc8:	2007883a 	mov	r3,r4
    1dcc:	300f883a 	mov	r7,r6
    1dd0:	003fc706 	br	1cf0 <__alt_data_end+0x80001cf0>

00001dd4 <_open_r>:
    1dd4:	defffd04 	addi	sp,sp,-12
    1dd8:	2805883a 	mov	r2,r5
    1ddc:	dc000015 	stw	r16,0(sp)
    1de0:	04100034 	movhi	r16,16384
    1de4:	dc400115 	stw	r17,4(sp)
    1de8:	300b883a 	mov	r5,r6
    1dec:	84086104 	addi	r16,r16,8580
    1df0:	2023883a 	mov	r17,r4
    1df4:	380d883a 	mov	r6,r7
    1df8:	1009883a 	mov	r4,r2
    1dfc:	dfc00215 	stw	ra,8(sp)
    1e00:	80000015 	stw	zero,0(r16)
    1e04:	000e77c0 	call	e77c <open>
    1e08:	00ffffc4 	movi	r3,-1
    1e0c:	10c00526 	beq	r2,r3,1e24 <_open_r+0x50>
    1e10:	dfc00217 	ldw	ra,8(sp)
    1e14:	dc400117 	ldw	r17,4(sp)
    1e18:	dc000017 	ldw	r16,0(sp)
    1e1c:	dec00304 	addi	sp,sp,12
    1e20:	f800283a 	ret
    1e24:	80c00017 	ldw	r3,0(r16)
    1e28:	183ff926 	beq	r3,zero,1e10 <__alt_data_end+0x80001e10>
    1e2c:	88c00015 	stw	r3,0(r17)
    1e30:	003ff706 	br	1e10 <__alt_data_end+0x80001e10>

00001e34 <_printf_r>:
    1e34:	defffd04 	addi	sp,sp,-12
    1e38:	2805883a 	mov	r2,r5
    1e3c:	dfc00015 	stw	ra,0(sp)
    1e40:	d9800115 	stw	r6,4(sp)
    1e44:	d9c00215 	stw	r7,8(sp)
    1e48:	21400217 	ldw	r5,8(r4)
    1e4c:	d9c00104 	addi	r7,sp,4
    1e50:	100d883a 	mov	r6,r2
    1e54:	00026780 	call	2678 <___vfprintf_internal_r>
    1e58:	dfc00017 	ldw	ra,0(sp)
    1e5c:	dec00304 	addi	sp,sp,12
    1e60:	f800283a 	ret

00001e64 <printf>:
    1e64:	defffc04 	addi	sp,sp,-16
    1e68:	dfc00015 	stw	ra,0(sp)
    1e6c:	d9400115 	stw	r5,4(sp)
    1e70:	d9800215 	stw	r6,8(sp)
    1e74:	d9c00315 	stw	r7,12(sp)
    1e78:	00900034 	movhi	r2,16384
    1e7c:	10885204 	addi	r2,r2,8520
    1e80:	10800017 	ldw	r2,0(r2)
    1e84:	200b883a 	mov	r5,r4
    1e88:	d9800104 	addi	r6,sp,4
    1e8c:	11000217 	ldw	r4,8(r2)
    1e90:	00048700 	call	4870 <__vfprintf_internal>
    1e94:	dfc00017 	ldw	ra,0(sp)
    1e98:	dec00404 	addi	sp,sp,16
    1e9c:	f800283a 	ret

00001ea0 <_putc_r>:
    1ea0:	defffc04 	addi	sp,sp,-16
    1ea4:	dc000215 	stw	r16,8(sp)
    1ea8:	dfc00315 	stw	ra,12(sp)
    1eac:	2021883a 	mov	r16,r4
    1eb0:	20000226 	beq	r4,zero,1ebc <_putc_r+0x1c>
    1eb4:	20800e17 	ldw	r2,56(r4)
    1eb8:	10001b26 	beq	r2,zero,1f28 <_putc_r+0x88>
    1ebc:	30800217 	ldw	r2,8(r6)
    1ec0:	10bfffc4 	addi	r2,r2,-1
    1ec4:	30800215 	stw	r2,8(r6)
    1ec8:	10000a16 	blt	r2,zero,1ef4 <_putc_r+0x54>
    1ecc:	30800017 	ldw	r2,0(r6)
    1ed0:	11400005 	stb	r5,0(r2)
    1ed4:	30800017 	ldw	r2,0(r6)
    1ed8:	10c00044 	addi	r3,r2,1
    1edc:	30c00015 	stw	r3,0(r6)
    1ee0:	10800003 	ldbu	r2,0(r2)
    1ee4:	dfc00317 	ldw	ra,12(sp)
    1ee8:	dc000217 	ldw	r16,8(sp)
    1eec:	dec00404 	addi	sp,sp,16
    1ef0:	f800283a 	ret
    1ef4:	30c00617 	ldw	r3,24(r6)
    1ef8:	10c00616 	blt	r2,r3,1f14 <_putc_r+0x74>
    1efc:	30800017 	ldw	r2,0(r6)
    1f00:	00c00284 	movi	r3,10
    1f04:	11400005 	stb	r5,0(r2)
    1f08:	30800017 	ldw	r2,0(r6)
    1f0c:	11400003 	ldbu	r5,0(r2)
    1f10:	28fff11e 	bne	r5,r3,1ed8 <__alt_data_end+0x80001ed8>
    1f14:	8009883a 	mov	r4,r16
    1f18:	dfc00317 	ldw	ra,12(sp)
    1f1c:	dc000217 	ldw	r16,8(sp)
    1f20:	dec00404 	addi	sp,sp,16
    1f24:	000494c1 	jmpi	494c <__swbuf_r>
    1f28:	d9400015 	stw	r5,0(sp)
    1f2c:	d9800115 	stw	r6,4(sp)
    1f30:	0006b2c0 	call	6b2c <__sinit>
    1f34:	d9800117 	ldw	r6,4(sp)
    1f38:	d9400017 	ldw	r5,0(sp)
    1f3c:	003fdf06 	br	1ebc <__alt_data_end+0x80001ebc>

00001f40 <putc>:
    1f40:	00900034 	movhi	r2,16384
    1f44:	defffc04 	addi	sp,sp,-16
    1f48:	10885204 	addi	r2,r2,8520
    1f4c:	dc000115 	stw	r16,4(sp)
    1f50:	14000017 	ldw	r16,0(r2)
    1f54:	dc400215 	stw	r17,8(sp)
    1f58:	dfc00315 	stw	ra,12(sp)
    1f5c:	2023883a 	mov	r17,r4
    1f60:	80000226 	beq	r16,zero,1f6c <putc+0x2c>
    1f64:	80800e17 	ldw	r2,56(r16)
    1f68:	10001a26 	beq	r2,zero,1fd4 <putc+0x94>
    1f6c:	28800217 	ldw	r2,8(r5)
    1f70:	10bfffc4 	addi	r2,r2,-1
    1f74:	28800215 	stw	r2,8(r5)
    1f78:	10000b16 	blt	r2,zero,1fa8 <putc+0x68>
    1f7c:	28800017 	ldw	r2,0(r5)
    1f80:	14400005 	stb	r17,0(r2)
    1f84:	28800017 	ldw	r2,0(r5)
    1f88:	10c00044 	addi	r3,r2,1
    1f8c:	28c00015 	stw	r3,0(r5)
    1f90:	10800003 	ldbu	r2,0(r2)
    1f94:	dfc00317 	ldw	ra,12(sp)
    1f98:	dc400217 	ldw	r17,8(sp)
    1f9c:	dc000117 	ldw	r16,4(sp)
    1fa0:	dec00404 	addi	sp,sp,16
    1fa4:	f800283a 	ret
    1fa8:	28c00617 	ldw	r3,24(r5)
    1fac:	10c00e16 	blt	r2,r3,1fe8 <putc+0xa8>
    1fb0:	28800017 	ldw	r2,0(r5)
    1fb4:	01000284 	movi	r4,10
    1fb8:	14400005 	stb	r17,0(r2)
    1fbc:	28800017 	ldw	r2,0(r5)
    1fc0:	10c00003 	ldbu	r3,0(r2)
    1fc4:	193ff01e 	bne	r3,r4,1f88 <__alt_data_end+0x80001f88>
    1fc8:	280d883a 	mov	r6,r5
    1fcc:	180b883a 	mov	r5,r3
    1fd0:	00000706 	br	1ff0 <putc+0xb0>
    1fd4:	8009883a 	mov	r4,r16
    1fd8:	d9400015 	stw	r5,0(sp)
    1fdc:	0006b2c0 	call	6b2c <__sinit>
    1fe0:	d9400017 	ldw	r5,0(sp)
    1fe4:	003fe106 	br	1f6c <__alt_data_end+0x80001f6c>
    1fe8:	280d883a 	mov	r6,r5
    1fec:	880b883a 	mov	r5,r17
    1ff0:	8009883a 	mov	r4,r16
    1ff4:	dfc00317 	ldw	ra,12(sp)
    1ff8:	dc400217 	ldw	r17,8(sp)
    1ffc:	dc000117 	ldw	r16,4(sp)
    2000:	dec00404 	addi	sp,sp,16
    2004:	000494c1 	jmpi	494c <__swbuf_r>

00002008 <_putchar_r>:
    2008:	21800217 	ldw	r6,8(r4)
    200c:	0001ea01 	jmpi	1ea0 <_putc_r>

00002010 <putchar>:
    2010:	00900034 	movhi	r2,16384
    2014:	10885204 	addi	r2,r2,8520
    2018:	200b883a 	mov	r5,r4
    201c:	11000017 	ldw	r4,0(r2)
    2020:	21800217 	ldw	r6,8(r4)
    2024:	0001ea01 	jmpi	1ea0 <_putc_r>

00002028 <_puts_r>:
    2028:	defff604 	addi	sp,sp,-40
    202c:	dc000715 	stw	r16,28(sp)
    2030:	2021883a 	mov	r16,r4
    2034:	2809883a 	mov	r4,r5
    2038:	dc400815 	stw	r17,32(sp)
    203c:	dfc00915 	stw	ra,36(sp)
    2040:	2823883a 	mov	r17,r5
    2044:	00025e00 	call	25e0 <strlen>
    2048:	10c00044 	addi	r3,r2,1
    204c:	d8800115 	stw	r2,4(sp)
    2050:	00900034 	movhi	r2,16384
    2054:	10803304 	addi	r2,r2,204
    2058:	d8800215 	stw	r2,8(sp)
    205c:	00800044 	movi	r2,1
    2060:	d8800315 	stw	r2,12(sp)
    2064:	00800084 	movi	r2,2
    2068:	dc400015 	stw	r17,0(sp)
    206c:	d8c00615 	stw	r3,24(sp)
    2070:	dec00415 	stw	sp,16(sp)
    2074:	d8800515 	stw	r2,20(sp)
    2078:	80000226 	beq	r16,zero,2084 <_puts_r+0x5c>
    207c:	80800e17 	ldw	r2,56(r16)
    2080:	10001426 	beq	r2,zero,20d4 <_puts_r+0xac>
    2084:	81400217 	ldw	r5,8(r16)
    2088:	2880030b 	ldhu	r2,12(r5)
    208c:	10c8000c 	andi	r3,r2,8192
    2090:	1800061e 	bne	r3,zero,20ac <_puts_r+0x84>
    2094:	29001917 	ldw	r4,100(r5)
    2098:	00f7ffc4 	movi	r3,-8193
    209c:	10880014 	ori	r2,r2,8192
    20a0:	20c6703a 	and	r3,r4,r3
    20a4:	2880030d 	sth	r2,12(r5)
    20a8:	28c01915 	stw	r3,100(r5)
    20ac:	d9800404 	addi	r6,sp,16
    20b0:	8009883a 	mov	r4,r16
    20b4:	000705c0 	call	705c <__sfvwrite_r>
    20b8:	1000091e 	bne	r2,zero,20e0 <_puts_r+0xb8>
    20bc:	00800284 	movi	r2,10
    20c0:	dfc00917 	ldw	ra,36(sp)
    20c4:	dc400817 	ldw	r17,32(sp)
    20c8:	dc000717 	ldw	r16,28(sp)
    20cc:	dec00a04 	addi	sp,sp,40
    20d0:	f800283a 	ret
    20d4:	8009883a 	mov	r4,r16
    20d8:	0006b2c0 	call	6b2c <__sinit>
    20dc:	003fe906 	br	2084 <__alt_data_end+0x80002084>
    20e0:	00bfffc4 	movi	r2,-1
    20e4:	003ff606 	br	20c0 <__alt_data_end+0x800020c0>

000020e8 <puts>:
    20e8:	00900034 	movhi	r2,16384
    20ec:	10885204 	addi	r2,r2,8520
    20f0:	200b883a 	mov	r5,r4
    20f4:	11000017 	ldw	r4,0(r2)
    20f8:	00020281 	jmpi	2028 <_puts_r>

000020fc <lflush>:
    20fc:	2080030b 	ldhu	r2,12(r4)
    2100:	00c00244 	movi	r3,9
    2104:	1080024c 	andi	r2,r2,9
    2108:	10c00226 	beq	r2,r3,2114 <lflush+0x18>
    210c:	0005883a 	mov	r2,zero
    2110:	f800283a 	ret
    2114:	00067ac1 	jmpi	67ac <fflush>

00002118 <__srefill_r>:
    2118:	defffc04 	addi	sp,sp,-16
    211c:	dc400115 	stw	r17,4(sp)
    2120:	dc000015 	stw	r16,0(sp)
    2124:	dfc00315 	stw	ra,12(sp)
    2128:	dc800215 	stw	r18,8(sp)
    212c:	2023883a 	mov	r17,r4
    2130:	2821883a 	mov	r16,r5
    2134:	20000226 	beq	r4,zero,2140 <__srefill_r+0x28>
    2138:	20800e17 	ldw	r2,56(r4)
    213c:	10003c26 	beq	r2,zero,2230 <__srefill_r+0x118>
    2140:	80c0030b 	ldhu	r3,12(r16)
    2144:	1908000c 	andi	r4,r3,8192
    2148:	1805883a 	mov	r2,r3
    214c:	2000071e 	bne	r4,zero,216c <__srefill_r+0x54>
    2150:	81001917 	ldw	r4,100(r16)
    2154:	18880014 	ori	r2,r3,8192
    2158:	00f7ffc4 	movi	r3,-8193
    215c:	20c8703a 	and	r4,r4,r3
    2160:	8080030d 	sth	r2,12(r16)
    2164:	1007883a 	mov	r3,r2
    2168:	81001915 	stw	r4,100(r16)
    216c:	80000115 	stw	zero,4(r16)
    2170:	1100080c 	andi	r4,r2,32
    2174:	2000571e 	bne	r4,zero,22d4 <__srefill_r+0x1bc>
    2178:	1100010c 	andi	r4,r2,4
    217c:	20001f26 	beq	r4,zero,21fc <__srefill_r+0xe4>
    2180:	81400c17 	ldw	r5,48(r16)
    2184:	28000826 	beq	r5,zero,21a8 <__srefill_r+0x90>
    2188:	80801004 	addi	r2,r16,64
    218c:	28800226 	beq	r5,r2,2198 <__srefill_r+0x80>
    2190:	8809883a 	mov	r4,r17
    2194:	0006d4c0 	call	6d4c <_free_r>
    2198:	80800f17 	ldw	r2,60(r16)
    219c:	80000c15 	stw	zero,48(r16)
    21a0:	80800115 	stw	r2,4(r16)
    21a4:	1000391e 	bne	r2,zero,228c <__srefill_r+0x174>
    21a8:	80800417 	ldw	r2,16(r16)
    21ac:	10004b26 	beq	r2,zero,22dc <__srefill_r+0x1c4>
    21b0:	8480030b 	ldhu	r18,12(r16)
    21b4:	908000cc 	andi	r2,r18,3
    21b8:	10001f1e 	bne	r2,zero,2238 <__srefill_r+0x120>
    21bc:	81800417 	ldw	r6,16(r16)
    21c0:	80800817 	ldw	r2,32(r16)
    21c4:	81c00517 	ldw	r7,20(r16)
    21c8:	81400717 	ldw	r5,28(r16)
    21cc:	81800015 	stw	r6,0(r16)
    21d0:	8809883a 	mov	r4,r17
    21d4:	103ee83a 	callr	r2
    21d8:	80800115 	stw	r2,4(r16)
    21dc:	00800e0e 	bge	zero,r2,2218 <__srefill_r+0x100>
    21e0:	0005883a 	mov	r2,zero
    21e4:	dfc00317 	ldw	ra,12(sp)
    21e8:	dc800217 	ldw	r18,8(sp)
    21ec:	dc400117 	ldw	r17,4(sp)
    21f0:	dc000017 	ldw	r16,0(sp)
    21f4:	dec00404 	addi	sp,sp,16
    21f8:	f800283a 	ret
    21fc:	1100040c 	andi	r4,r2,16
    2200:	20003026 	beq	r4,zero,22c4 <__srefill_r+0x1ac>
    2204:	1080020c 	andi	r2,r2,8
    2208:	1000241e 	bne	r2,zero,229c <__srefill_r+0x184>
    220c:	18c00114 	ori	r3,r3,4
    2210:	80c0030d 	sth	r3,12(r16)
    2214:	003fe406 	br	21a8 <__alt_data_end+0x800021a8>
    2218:	80c0030b 	ldhu	r3,12(r16)
    221c:	1000161e 	bne	r2,zero,2278 <__srefill_r+0x160>
    2220:	18c00814 	ori	r3,r3,32
    2224:	00bfffc4 	movi	r2,-1
    2228:	80c0030d 	sth	r3,12(r16)
    222c:	003fed06 	br	21e4 <__alt_data_end+0x800021e4>
    2230:	0006b2c0 	call	6b2c <__sinit>
    2234:	003fc206 	br	2140 <__alt_data_end+0x80002140>
    2238:	00900034 	movhi	r2,16384
    223c:	10885104 	addi	r2,r2,8516
    2240:	11000017 	ldw	r4,0(r2)
    2244:	01400034 	movhi	r5,0
    2248:	00800044 	movi	r2,1
    224c:	29483f04 	addi	r5,r5,8444
    2250:	8080030d 	sth	r2,12(r16)
    2254:	00075180 	call	7518 <_fwalk>
    2258:	00800244 	movi	r2,9
    225c:	8480030d 	sth	r18,12(r16)
    2260:	9480024c 	andi	r18,r18,9
    2264:	90bfd51e 	bne	r18,r2,21bc <__alt_data_end+0x800021bc>
    2268:	800b883a 	mov	r5,r16
    226c:	8809883a 	mov	r4,r17
    2270:	00065340 	call	6534 <__sflush_r>
    2274:	003fd106 	br	21bc <__alt_data_end+0x800021bc>
    2278:	18c01014 	ori	r3,r3,64
    227c:	80000115 	stw	zero,4(r16)
    2280:	00bfffc4 	movi	r2,-1
    2284:	80c0030d 	sth	r3,12(r16)
    2288:	003fd606 	br	21e4 <__alt_data_end+0x800021e4>
    228c:	80c00e17 	ldw	r3,56(r16)
    2290:	0005883a 	mov	r2,zero
    2294:	80c00015 	stw	r3,0(r16)
    2298:	003fd206 	br	21e4 <__alt_data_end+0x800021e4>
    229c:	800b883a 	mov	r5,r16
    22a0:	8809883a 	mov	r4,r17
    22a4:	00067500 	call	6750 <_fflush_r>
    22a8:	10000a1e 	bne	r2,zero,22d4 <__srefill_r+0x1bc>
    22ac:	8080030b 	ldhu	r2,12(r16)
    22b0:	00fffdc4 	movi	r3,-9
    22b4:	80000215 	stw	zero,8(r16)
    22b8:	1886703a 	and	r3,r3,r2
    22bc:	80000615 	stw	zero,24(r16)
    22c0:	003fd206 	br	220c <__alt_data_end+0x8000220c>
    22c4:	00800244 	movi	r2,9
    22c8:	88800015 	stw	r2,0(r17)
    22cc:	18c01014 	ori	r3,r3,64
    22d0:	80c0030d 	sth	r3,12(r16)
    22d4:	00bfffc4 	movi	r2,-1
    22d8:	003fc206 	br	21e4 <__alt_data_end+0x800021e4>
    22dc:	800b883a 	mov	r5,r16
    22e0:	8809883a 	mov	r4,r17
    22e4:	00012e40 	call	12e4 <__smakebuf_r>
    22e8:	003fb106 	br	21b0 <__alt_data_end+0x800021b0>

000022ec <__srget_r>:
    22ec:	defffd04 	addi	sp,sp,-12
    22f0:	dc400115 	stw	r17,4(sp)
    22f4:	dc000015 	stw	r16,0(sp)
    22f8:	dfc00215 	stw	ra,8(sp)
    22fc:	2023883a 	mov	r17,r4
    2300:	2821883a 	mov	r16,r5
    2304:	20000226 	beq	r4,zero,2310 <__srget_r+0x24>
    2308:	20800e17 	ldw	r2,56(r4)
    230c:	10001026 	beq	r2,zero,2350 <__srget_r+0x64>
    2310:	800b883a 	mov	r5,r16
    2314:	8809883a 	mov	r4,r17
    2318:	00021180 	call	2118 <__srefill_r>
    231c:	10000e1e 	bne	r2,zero,2358 <__srget_r+0x6c>
    2320:	80c00017 	ldw	r3,0(r16)
    2324:	80800117 	ldw	r2,4(r16)
    2328:	19000044 	addi	r4,r3,1
    232c:	10bfffc4 	addi	r2,r2,-1
    2330:	80800115 	stw	r2,4(r16)
    2334:	81000015 	stw	r4,0(r16)
    2338:	18800003 	ldbu	r2,0(r3)
    233c:	dfc00217 	ldw	ra,8(sp)
    2340:	dc400117 	ldw	r17,4(sp)
    2344:	dc000017 	ldw	r16,0(sp)
    2348:	dec00304 	addi	sp,sp,12
    234c:	f800283a 	ret
    2350:	0006b2c0 	call	6b2c <__sinit>
    2354:	003fee06 	br	2310 <__alt_data_end+0x80002310>
    2358:	00bfffc4 	movi	r2,-1
    235c:	003ff706 	br	233c <__alt_data_end+0x8000233c>

00002360 <__srget>:
    2360:	00900034 	movhi	r2,16384
    2364:	10885204 	addi	r2,r2,8520
    2368:	200b883a 	mov	r5,r4
    236c:	11000017 	ldw	r4,0(r2)
    2370:	00022ec1 	jmpi	22ec <__srget_r>

00002374 <_sbrk_r>:
    2374:	defffd04 	addi	sp,sp,-12
    2378:	dc000015 	stw	r16,0(sp)
    237c:	04100034 	movhi	r16,16384
    2380:	dc400115 	stw	r17,4(sp)
    2384:	84086104 	addi	r16,r16,8580
    2388:	2023883a 	mov	r17,r4
    238c:	2809883a 	mov	r4,r5
    2390:	dfc00215 	stw	ra,8(sp)
    2394:	80000015 	stw	zero,0(r16)
    2398:	000ea6c0 	call	ea6c <sbrk>
    239c:	00ffffc4 	movi	r3,-1
    23a0:	10c00526 	beq	r2,r3,23b8 <_sbrk_r+0x44>
    23a4:	dfc00217 	ldw	ra,8(sp)
    23a8:	dc400117 	ldw	r17,4(sp)
    23ac:	dc000017 	ldw	r16,0(sp)
    23b0:	dec00304 	addi	sp,sp,12
    23b4:	f800283a 	ret
    23b8:	80c00017 	ldw	r3,0(r16)
    23bc:	183ff926 	beq	r3,zero,23a4 <__alt_data_end+0x800023a4>
    23c0:	88c00015 	stw	r3,0(r17)
    23c4:	003ff706 	br	23a4 <__alt_data_end+0x800023a4>

000023c8 <__sread>:
    23c8:	defffe04 	addi	sp,sp,-8
    23cc:	dc000015 	stw	r16,0(sp)
    23d0:	2821883a 	mov	r16,r5
    23d4:	2940038f 	ldh	r5,14(r5)
    23d8:	dfc00115 	stw	ra,4(sp)
    23dc:	0008bb40 	call	8bb4 <_read_r>
    23e0:	10000716 	blt	r2,zero,2400 <__sread+0x38>
    23e4:	80c01417 	ldw	r3,80(r16)
    23e8:	1887883a 	add	r3,r3,r2
    23ec:	80c01415 	stw	r3,80(r16)
    23f0:	dfc00117 	ldw	ra,4(sp)
    23f4:	dc000017 	ldw	r16,0(sp)
    23f8:	dec00204 	addi	sp,sp,8
    23fc:	f800283a 	ret
    2400:	80c0030b 	ldhu	r3,12(r16)
    2404:	18fbffcc 	andi	r3,r3,61439
    2408:	80c0030d 	sth	r3,12(r16)
    240c:	dfc00117 	ldw	ra,4(sp)
    2410:	dc000017 	ldw	r16,0(sp)
    2414:	dec00204 	addi	sp,sp,8
    2418:	f800283a 	ret

0000241c <__seofread>:
    241c:	0005883a 	mov	r2,zero
    2420:	f800283a 	ret

00002424 <__swrite>:
    2424:	2880030b 	ldhu	r2,12(r5)
    2428:	defffb04 	addi	sp,sp,-20
    242c:	dcc00315 	stw	r19,12(sp)
    2430:	dc800215 	stw	r18,8(sp)
    2434:	dc400115 	stw	r17,4(sp)
    2438:	dc000015 	stw	r16,0(sp)
    243c:	dfc00415 	stw	ra,16(sp)
    2440:	10c0400c 	andi	r3,r2,256
    2444:	2821883a 	mov	r16,r5
    2448:	2023883a 	mov	r17,r4
    244c:	3025883a 	mov	r18,r6
    2450:	3827883a 	mov	r19,r7
    2454:	18000526 	beq	r3,zero,246c <__swrite+0x48>
    2458:	2940038f 	ldh	r5,14(r5)
    245c:	01c00084 	movi	r7,2
    2460:	000d883a 	mov	r6,zero
    2464:	00077d00 	call	77d0 <_lseek_r>
    2468:	8080030b 	ldhu	r2,12(r16)
    246c:	8140038f 	ldh	r5,14(r16)
    2470:	10bbffcc 	andi	r2,r2,61439
    2474:	980f883a 	mov	r7,r19
    2478:	900d883a 	mov	r6,r18
    247c:	8809883a 	mov	r4,r17
    2480:	8080030d 	sth	r2,12(r16)
    2484:	dfc00417 	ldw	ra,16(sp)
    2488:	dcc00317 	ldw	r19,12(sp)
    248c:	dc800217 	ldw	r18,8(sp)
    2490:	dc400117 	ldw	r17,4(sp)
    2494:	dc000017 	ldw	r16,0(sp)
    2498:	dec00504 	addi	sp,sp,20
    249c:	0004aa41 	jmpi	4aa4 <_write_r>

000024a0 <__sseek>:
    24a0:	defffe04 	addi	sp,sp,-8
    24a4:	dc000015 	stw	r16,0(sp)
    24a8:	2821883a 	mov	r16,r5
    24ac:	2940038f 	ldh	r5,14(r5)
    24b0:	dfc00115 	stw	ra,4(sp)
    24b4:	00077d00 	call	77d0 <_lseek_r>
    24b8:	00ffffc4 	movi	r3,-1
    24bc:	10c00826 	beq	r2,r3,24e0 <__sseek+0x40>
    24c0:	80c0030b 	ldhu	r3,12(r16)
    24c4:	80801415 	stw	r2,80(r16)
    24c8:	18c40014 	ori	r3,r3,4096
    24cc:	80c0030d 	sth	r3,12(r16)
    24d0:	dfc00117 	ldw	ra,4(sp)
    24d4:	dc000017 	ldw	r16,0(sp)
    24d8:	dec00204 	addi	sp,sp,8
    24dc:	f800283a 	ret
    24e0:	80c0030b 	ldhu	r3,12(r16)
    24e4:	18fbffcc 	andi	r3,r3,61439
    24e8:	80c0030d 	sth	r3,12(r16)
    24ec:	dfc00117 	ldw	ra,4(sp)
    24f0:	dc000017 	ldw	r16,0(sp)
    24f4:	dec00204 	addi	sp,sp,8
    24f8:	f800283a 	ret

000024fc <__sclose>:
    24fc:	2940038f 	ldh	r5,14(r5)
    2500:	0004c581 	jmpi	4c58 <_close_r>

00002504 <strcmp>:
    2504:	2144b03a 	or	r2,r4,r5
    2508:	108000cc 	andi	r2,r2,3
    250c:	1000171e 	bne	r2,zero,256c <strcmp+0x68>
    2510:	20800017 	ldw	r2,0(r4)
    2514:	28c00017 	ldw	r3,0(r5)
    2518:	10c0141e 	bne	r2,r3,256c <strcmp+0x68>
    251c:	027fbff4 	movhi	r9,65279
    2520:	4a7fbfc4 	addi	r9,r9,-257
    2524:	0086303a 	nor	r3,zero,r2
    2528:	02202074 	movhi	r8,32897
    252c:	1245883a 	add	r2,r2,r9
    2530:	42202004 	addi	r8,r8,-32640
    2534:	10c4703a 	and	r2,r2,r3
    2538:	1204703a 	and	r2,r2,r8
    253c:	10000226 	beq	r2,zero,2548 <strcmp+0x44>
    2540:	00002306 	br	25d0 <strcmp+0xcc>
    2544:	1000221e 	bne	r2,zero,25d0 <strcmp+0xcc>
    2548:	21000104 	addi	r4,r4,4
    254c:	20c00017 	ldw	r3,0(r4)
    2550:	29400104 	addi	r5,r5,4
    2554:	29800017 	ldw	r6,0(r5)
    2558:	1a4f883a 	add	r7,r3,r9
    255c:	00c4303a 	nor	r2,zero,r3
    2560:	3884703a 	and	r2,r7,r2
    2564:	1204703a 	and	r2,r2,r8
    2568:	19bff626 	beq	r3,r6,2544 <__alt_data_end+0x80002544>
    256c:	20800003 	ldbu	r2,0(r4)
    2570:	10c03fcc 	andi	r3,r2,255
    2574:	18c0201c 	xori	r3,r3,128
    2578:	18ffe004 	addi	r3,r3,-128
    257c:	18000c26 	beq	r3,zero,25b0 <strcmp+0xac>
    2580:	29800007 	ldb	r6,0(r5)
    2584:	19800326 	beq	r3,r6,2594 <strcmp+0x90>
    2588:	00001306 	br	25d8 <strcmp+0xd4>
    258c:	29800007 	ldb	r6,0(r5)
    2590:	11800b1e 	bne	r2,r6,25c0 <strcmp+0xbc>
    2594:	21000044 	addi	r4,r4,1
    2598:	20c00003 	ldbu	r3,0(r4)
    259c:	29400044 	addi	r5,r5,1
    25a0:	18803fcc 	andi	r2,r3,255
    25a4:	1080201c 	xori	r2,r2,128
    25a8:	10bfe004 	addi	r2,r2,-128
    25ac:	103ff71e 	bne	r2,zero,258c <__alt_data_end+0x8000258c>
    25b0:	0007883a 	mov	r3,zero
    25b4:	28800003 	ldbu	r2,0(r5)
    25b8:	1885c83a 	sub	r2,r3,r2
    25bc:	f800283a 	ret
    25c0:	28800003 	ldbu	r2,0(r5)
    25c4:	18c03fcc 	andi	r3,r3,255
    25c8:	1885c83a 	sub	r2,r3,r2
    25cc:	f800283a 	ret
    25d0:	0005883a 	mov	r2,zero
    25d4:	f800283a 	ret
    25d8:	10c03fcc 	andi	r3,r2,255
    25dc:	003ff506 	br	25b4 <__alt_data_end+0x800025b4>

000025e0 <strlen>:
    25e0:	208000cc 	andi	r2,r4,3
    25e4:	10002026 	beq	r2,zero,2668 <strlen+0x88>
    25e8:	20800007 	ldb	r2,0(r4)
    25ec:	10002026 	beq	r2,zero,2670 <strlen+0x90>
    25f0:	2005883a 	mov	r2,r4
    25f4:	00000206 	br	2600 <strlen+0x20>
    25f8:	10c00007 	ldb	r3,0(r2)
    25fc:	18001826 	beq	r3,zero,2660 <strlen+0x80>
    2600:	10800044 	addi	r2,r2,1
    2604:	10c000cc 	andi	r3,r2,3
    2608:	183ffb1e 	bne	r3,zero,25f8 <__alt_data_end+0x800025f8>
    260c:	10c00017 	ldw	r3,0(r2)
    2610:	01ffbff4 	movhi	r7,65279
    2614:	39ffbfc4 	addi	r7,r7,-257
    2618:	00ca303a 	nor	r5,zero,r3
    261c:	01a02074 	movhi	r6,32897
    2620:	19c7883a 	add	r3,r3,r7
    2624:	31a02004 	addi	r6,r6,-32640
    2628:	1946703a 	and	r3,r3,r5
    262c:	1986703a 	and	r3,r3,r6
    2630:	1800091e 	bne	r3,zero,2658 <strlen+0x78>
    2634:	10800104 	addi	r2,r2,4
    2638:	10c00017 	ldw	r3,0(r2)
    263c:	19cb883a 	add	r5,r3,r7
    2640:	00c6303a 	nor	r3,zero,r3
    2644:	28c6703a 	and	r3,r5,r3
    2648:	1986703a 	and	r3,r3,r6
    264c:	183ff926 	beq	r3,zero,2634 <__alt_data_end+0x80002634>
    2650:	00000106 	br	2658 <strlen+0x78>
    2654:	10800044 	addi	r2,r2,1
    2658:	10c00007 	ldb	r3,0(r2)
    265c:	183ffd1e 	bne	r3,zero,2654 <__alt_data_end+0x80002654>
    2660:	1105c83a 	sub	r2,r2,r4
    2664:	f800283a 	ret
    2668:	2005883a 	mov	r2,r4
    266c:	003fe706 	br	260c <__alt_data_end+0x8000260c>
    2670:	0005883a 	mov	r2,zero
    2674:	f800283a 	ret

00002678 <___vfprintf_internal_r>:
    2678:	deffb804 	addi	sp,sp,-288
    267c:	dfc04715 	stw	ra,284(sp)
    2680:	ddc04515 	stw	r23,276(sp)
    2684:	dd404315 	stw	r21,268(sp)
    2688:	d9002c15 	stw	r4,176(sp)
    268c:	282f883a 	mov	r23,r5
    2690:	302b883a 	mov	r21,r6
    2694:	d9c02d15 	stw	r7,180(sp)
    2698:	df004615 	stw	fp,280(sp)
    269c:	dd804415 	stw	r22,272(sp)
    26a0:	dd004215 	stw	r20,264(sp)
    26a4:	dcc04115 	stw	r19,260(sp)
    26a8:	dc804015 	stw	r18,256(sp)
    26ac:	dc403f15 	stw	r17,252(sp)
    26b0:	dc003e15 	stw	r16,248(sp)
    26b4:	00077a00 	call	77a0 <_localeconv_r>
    26b8:	10800017 	ldw	r2,0(r2)
    26bc:	1009883a 	mov	r4,r2
    26c0:	d8803415 	stw	r2,208(sp)
    26c4:	00025e00 	call	25e0 <strlen>
    26c8:	d8803715 	stw	r2,220(sp)
    26cc:	d8802c17 	ldw	r2,176(sp)
    26d0:	10000226 	beq	r2,zero,26dc <___vfprintf_internal_r+0x64>
    26d4:	10800e17 	ldw	r2,56(r2)
    26d8:	1000f926 	beq	r2,zero,2ac0 <___vfprintf_internal_r+0x448>
    26dc:	b880030b 	ldhu	r2,12(r23)
    26e0:	10c8000c 	andi	r3,r2,8192
    26e4:	1800061e 	bne	r3,zero,2700 <___vfprintf_internal_r+0x88>
    26e8:	b9001917 	ldw	r4,100(r23)
    26ec:	00f7ffc4 	movi	r3,-8193
    26f0:	10880014 	ori	r2,r2,8192
    26f4:	20c6703a 	and	r3,r4,r3
    26f8:	b880030d 	sth	r2,12(r23)
    26fc:	b8c01915 	stw	r3,100(r23)
    2700:	10c0020c 	andi	r3,r2,8
    2704:	1800c126 	beq	r3,zero,2a0c <___vfprintf_internal_r+0x394>
    2708:	b8c00417 	ldw	r3,16(r23)
    270c:	1800bf26 	beq	r3,zero,2a0c <___vfprintf_internal_r+0x394>
    2710:	1080068c 	andi	r2,r2,26
    2714:	00c00284 	movi	r3,10
    2718:	10c0c426 	beq	r2,r3,2a2c <___vfprintf_internal_r+0x3b4>
    271c:	d8c00404 	addi	r3,sp,16
    2720:	05100034 	movhi	r20,16384
    2724:	d9001e04 	addi	r4,sp,120
    2728:	a5004484 	addi	r20,r20,274
    272c:	d8c01e15 	stw	r3,120(sp)
    2730:	d8002015 	stw	zero,128(sp)
    2734:	d8001f15 	stw	zero,124(sp)
    2738:	d8003315 	stw	zero,204(sp)
    273c:	d8003615 	stw	zero,216(sp)
    2740:	d8003815 	stw	zero,224(sp)
    2744:	1811883a 	mov	r8,r3
    2748:	d8003915 	stw	zero,228(sp)
    274c:	d8003a15 	stw	zero,232(sp)
    2750:	d8002f15 	stw	zero,188(sp)
    2754:	d9002815 	stw	r4,160(sp)
    2758:	a8800007 	ldb	r2,0(r21)
    275c:	10027b26 	beq	r2,zero,314c <___vfprintf_internal_r+0xad4>
    2760:	00c00944 	movi	r3,37
    2764:	a821883a 	mov	r16,r21
    2768:	10c0021e 	bne	r2,r3,2774 <___vfprintf_internal_r+0xfc>
    276c:	00001406 	br	27c0 <___vfprintf_internal_r+0x148>
    2770:	10c00326 	beq	r2,r3,2780 <___vfprintf_internal_r+0x108>
    2774:	84000044 	addi	r16,r16,1
    2778:	80800007 	ldb	r2,0(r16)
    277c:	103ffc1e 	bne	r2,zero,2770 <__alt_data_end+0x80002770>
    2780:	8563c83a 	sub	r17,r16,r21
    2784:	88000e26 	beq	r17,zero,27c0 <___vfprintf_internal_r+0x148>
    2788:	d8c02017 	ldw	r3,128(sp)
    278c:	d8801f17 	ldw	r2,124(sp)
    2790:	45400015 	stw	r21,0(r8)
    2794:	1c47883a 	add	r3,r3,r17
    2798:	10800044 	addi	r2,r2,1
    279c:	d8c02015 	stw	r3,128(sp)
    27a0:	44400115 	stw	r17,4(r8)
    27a4:	d8801f15 	stw	r2,124(sp)
    27a8:	00c001c4 	movi	r3,7
    27ac:	1880a716 	blt	r3,r2,2a4c <___vfprintf_internal_r+0x3d4>
    27b0:	42000204 	addi	r8,r8,8
    27b4:	d9402f17 	ldw	r5,188(sp)
    27b8:	2c4b883a 	add	r5,r5,r17
    27bc:	d9402f15 	stw	r5,188(sp)
    27c0:	80800007 	ldb	r2,0(r16)
    27c4:	1000a826 	beq	r2,zero,2a68 <___vfprintf_internal_r+0x3f0>
    27c8:	84400047 	ldb	r17,1(r16)
    27cc:	00bfffc4 	movi	r2,-1
    27d0:	85400044 	addi	r21,r16,1
    27d4:	d8002785 	stb	zero,158(sp)
    27d8:	0007883a 	mov	r3,zero
    27dc:	000f883a 	mov	r7,zero
    27e0:	d8802915 	stw	r2,164(sp)
    27e4:	d8003115 	stw	zero,196(sp)
    27e8:	0025883a 	mov	r18,zero
    27ec:	01401604 	movi	r5,88
    27f0:	01800244 	movi	r6,9
    27f4:	02800a84 	movi	r10,42
    27f8:	02401b04 	movi	r9,108
    27fc:	ad400044 	addi	r21,r21,1
    2800:	88bff804 	addi	r2,r17,-32
    2804:	28830436 	bltu	r5,r2,3418 <___vfprintf_internal_r+0xda0>
    2808:	100490ba 	slli	r2,r2,2
    280c:	01000034 	movhi	r4,0
    2810:	210a0804 	addi	r4,r4,10272
    2814:	1105883a 	add	r2,r2,r4
    2818:	10800017 	ldw	r2,0(r2)
    281c:	1000683a 	jmp	r2
    2820:	00003338 	rdprs	zero,zero,204
    2824:	00003418 	cmpnei	zero,zero,208
    2828:	00003418 	cmpnei	zero,zero,208
    282c:	00003358 	cmpnei	zero,zero,205
    2830:	00003418 	cmpnei	zero,zero,208
    2834:	00003418 	cmpnei	zero,zero,208
    2838:	00003418 	cmpnei	zero,zero,208
    283c:	00003418 	cmpnei	zero,zero,208
    2840:	00003418 	cmpnei	zero,zero,208
    2844:	00003418 	cmpnei	zero,zero,208
    2848:	00002acc 	andi	zero,zero,171
    284c:	00003274 	movhi	zero,201
    2850:	00003418 	cmpnei	zero,zero,208
    2854:	00002994 	movui	zero,166
    2858:	00002af4 	movhi	zero,171
    285c:	00003418 	cmpnei	zero,zero,208
    2860:	00002b34 	movhi	zero,172
    2864:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2868:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    286c:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2870:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2874:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2878:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    287c:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2880:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2884:	00002b40 	call	2b4 <bluetooth_driver+0x34>
    2888:	00003418 	cmpnei	zero,zero,208
    288c:	00003418 	cmpnei	zero,zero,208
    2890:	00003418 	cmpnei	zero,zero,208
    2894:	00003418 	cmpnei	zero,zero,208
    2898:	00003418 	cmpnei	zero,zero,208
    289c:	00003418 	cmpnei	zero,zero,208
    28a0:	00003418 	cmpnei	zero,zero,208
    28a4:	00003418 	cmpnei	zero,zero,208
    28a8:	00003418 	cmpnei	zero,zero,208
    28ac:	00003418 	cmpnei	zero,zero,208
    28b0:	00002b74 	movhi	zero,173
    28b4:	00002c30 	cmpltui	zero,zero,176
    28b8:	00003418 	cmpnei	zero,zero,208
    28bc:	00002c30 	cmpltui	zero,zero,176
    28c0:	00003418 	cmpnei	zero,zero,208
    28c4:	00003418 	cmpnei	zero,zero,208
    28c8:	00003418 	cmpnei	zero,zero,208
    28cc:	00003418 	cmpnei	zero,zero,208
    28d0:	00002cd0 	cmplti	zero,zero,179
    28d4:	00003418 	cmpnei	zero,zero,208
    28d8:	00003418 	cmpnei	zero,zero,208
    28dc:	00002cdc 	xori	zero,zero,179
    28e0:	00003418 	cmpnei	zero,zero,208
    28e4:	00003418 	cmpnei	zero,zero,208
    28e8:	00003418 	cmpnei	zero,zero,208
    28ec:	00003418 	cmpnei	zero,zero,208
    28f0:	00003418 	cmpnei	zero,zero,208
    28f4:	00003154 	movui	zero,197
    28f8:	00003418 	cmpnei	zero,zero,208
    28fc:	00003418 	cmpnei	zero,zero,208
    2900:	000031b4 	movhi	zero,198
    2904:	00003418 	cmpnei	zero,zero,208
    2908:	00003418 	cmpnei	zero,zero,208
    290c:	00003418 	cmpnei	zero,zero,208
    2910:	00003418 	cmpnei	zero,zero,208
    2914:	00003418 	cmpnei	zero,zero,208
    2918:	00003418 	cmpnei	zero,zero,208
    291c:	00003418 	cmpnei	zero,zero,208
    2920:	00003418 	cmpnei	zero,zero,208
    2924:	00003418 	cmpnei	zero,zero,208
    2928:	00003418 	cmpnei	zero,zero,208
    292c:	000033c4 	movi	zero,207
    2930:	00003364 	muli	zero,zero,205
    2934:	00002c30 	cmpltui	zero,zero,176
    2938:	00002c30 	cmpltui	zero,zero,176
    293c:	00002c30 	cmpltui	zero,zero,176
    2940:	00003374 	movhi	zero,205
    2944:	00003364 	muli	zero,zero,205
    2948:	00003418 	cmpnei	zero,zero,208
    294c:	00003418 	cmpnei	zero,zero,208
    2950:	00003380 	call	338 <dbg_printf+0x28>
    2954:	00003418 	cmpnei	zero,zero,208
    2958:	00003390 	cmplti	zero,zero,206
    295c:	00003264 	muli	zero,zero,201
    2960:	000029a0 	cmpeqi	zero,zero,166
    2964:	00003284 	movi	zero,202
    2968:	00003418 	cmpnei	zero,zero,208
    296c:	00003290 	cmplti	zero,zero,202
    2970:	00003418 	cmpnei	zero,zero,208
    2974:	000032ec 	andhi	zero,zero,203
    2978:	00003418 	cmpnei	zero,zero,208
    297c:	00003418 	cmpnei	zero,zero,208
    2980:	000032fc 	xorhi	zero,zero,203
    2984:	d9003117 	ldw	r4,196(sp)
    2988:	d8802d15 	stw	r2,180(sp)
    298c:	0109c83a 	sub	r4,zero,r4
    2990:	d9003115 	stw	r4,196(sp)
    2994:	94800114 	ori	r18,r18,4
    2998:	ac400007 	ldb	r17,0(r21)
    299c:	003f9706 	br	27fc <__alt_data_end+0x800027fc>
    29a0:	00800c04 	movi	r2,48
    29a4:	d9002d17 	ldw	r4,180(sp)
    29a8:	d9402917 	ldw	r5,164(sp)
    29ac:	d8802705 	stb	r2,156(sp)
    29b0:	00801e04 	movi	r2,120
    29b4:	d8802745 	stb	r2,157(sp)
    29b8:	d8002785 	stb	zero,158(sp)
    29bc:	20c00104 	addi	r3,r4,4
    29c0:	24c00017 	ldw	r19,0(r4)
    29c4:	002d883a 	mov	r22,zero
    29c8:	90800094 	ori	r2,r18,2
    29cc:	28029a16 	blt	r5,zero,3438 <___vfprintf_internal_r+0xdc0>
    29d0:	00bfdfc4 	movi	r2,-129
    29d4:	90a4703a 	and	r18,r18,r2
    29d8:	d8c02d15 	stw	r3,180(sp)
    29dc:	94800094 	ori	r18,r18,2
    29e0:	9802871e 	bne	r19,zero,3400 <___vfprintf_internal_r+0xd88>
    29e4:	00900034 	movhi	r2,16384
    29e8:	10803d04 	addi	r2,r2,244
    29ec:	d8803915 	stw	r2,228(sp)
    29f0:	04401e04 	movi	r17,120
    29f4:	d8802917 	ldw	r2,164(sp)
    29f8:	0039883a 	mov	fp,zero
    29fc:	1001e926 	beq	r2,zero,31a4 <___vfprintf_internal_r+0xb2c>
    2a00:	0027883a 	mov	r19,zero
    2a04:	002d883a 	mov	r22,zero
    2a08:	00020506 	br	3220 <___vfprintf_internal_r+0xba8>
    2a0c:	d9002c17 	ldw	r4,176(sp)
    2a10:	b80b883a 	mov	r5,r23
    2a14:	0004b040 	call	4b04 <__swsetup_r>
    2a18:	1005ac1e 	bne	r2,zero,40cc <___vfprintf_internal_r+0x1a54>
    2a1c:	b880030b 	ldhu	r2,12(r23)
    2a20:	00c00284 	movi	r3,10
    2a24:	1080068c 	andi	r2,r2,26
    2a28:	10ff3c1e 	bne	r2,r3,271c <__alt_data_end+0x8000271c>
    2a2c:	b880038f 	ldh	r2,14(r23)
    2a30:	103f3a16 	blt	r2,zero,271c <__alt_data_end+0x8000271c>
    2a34:	d9c02d17 	ldw	r7,180(sp)
    2a38:	d9002c17 	ldw	r4,176(sp)
    2a3c:	a80d883a 	mov	r6,r21
    2a40:	b80b883a 	mov	r5,r23
    2a44:	000488c0 	call	488c <__sbprintf>
    2a48:	00001106 	br	2a90 <___vfprintf_internal_r+0x418>
    2a4c:	d9002c17 	ldw	r4,176(sp)
    2a50:	d9801e04 	addi	r6,sp,120
    2a54:	b80b883a 	mov	r5,r23
    2a58:	00092e80 	call	92e8 <__sprint_r>
    2a5c:	1000081e 	bne	r2,zero,2a80 <___vfprintf_internal_r+0x408>
    2a60:	da000404 	addi	r8,sp,16
    2a64:	003f5306 	br	27b4 <__alt_data_end+0x800027b4>
    2a68:	d8802017 	ldw	r2,128(sp)
    2a6c:	10000426 	beq	r2,zero,2a80 <___vfprintf_internal_r+0x408>
    2a70:	d9002c17 	ldw	r4,176(sp)
    2a74:	d9801e04 	addi	r6,sp,120
    2a78:	b80b883a 	mov	r5,r23
    2a7c:	00092e80 	call	92e8 <__sprint_r>
    2a80:	b880030b 	ldhu	r2,12(r23)
    2a84:	1080100c 	andi	r2,r2,64
    2a88:	1005901e 	bne	r2,zero,40cc <___vfprintf_internal_r+0x1a54>
    2a8c:	d8802f17 	ldw	r2,188(sp)
    2a90:	dfc04717 	ldw	ra,284(sp)
    2a94:	df004617 	ldw	fp,280(sp)
    2a98:	ddc04517 	ldw	r23,276(sp)
    2a9c:	dd804417 	ldw	r22,272(sp)
    2aa0:	dd404317 	ldw	r21,268(sp)
    2aa4:	dd004217 	ldw	r20,264(sp)
    2aa8:	dcc04117 	ldw	r19,260(sp)
    2aac:	dc804017 	ldw	r18,256(sp)
    2ab0:	dc403f17 	ldw	r17,252(sp)
    2ab4:	dc003e17 	ldw	r16,248(sp)
    2ab8:	dec04804 	addi	sp,sp,288
    2abc:	f800283a 	ret
    2ac0:	d9002c17 	ldw	r4,176(sp)
    2ac4:	0006b2c0 	call	6b2c <__sinit>
    2ac8:	003f0406 	br	26dc <__alt_data_end+0x800026dc>
    2acc:	d8802d17 	ldw	r2,180(sp)
    2ad0:	d9002d17 	ldw	r4,180(sp)
    2ad4:	10800017 	ldw	r2,0(r2)
    2ad8:	d8803115 	stw	r2,196(sp)
    2adc:	20800104 	addi	r2,r4,4
    2ae0:	d9003117 	ldw	r4,196(sp)
    2ae4:	203fa716 	blt	r4,zero,2984 <__alt_data_end+0x80002984>
    2ae8:	d8802d15 	stw	r2,180(sp)
    2aec:	ac400007 	ldb	r17,0(r21)
    2af0:	003f4206 	br	27fc <__alt_data_end+0x800027fc>
    2af4:	ac400007 	ldb	r17,0(r21)
    2af8:	aac00044 	addi	r11,r21,1
    2afc:	8a872826 	beq	r17,r10,47a0 <___vfprintf_internal_r+0x2128>
    2b00:	88bff404 	addi	r2,r17,-48
    2b04:	0009883a 	mov	r4,zero
    2b08:	30867d36 	bltu	r6,r2,4500 <___vfprintf_internal_r+0x1e88>
    2b0c:	5c400007 	ldb	r17,0(r11)
    2b10:	210002a4 	muli	r4,r4,10
    2b14:	5d400044 	addi	r21,r11,1
    2b18:	a817883a 	mov	r11,r21
    2b1c:	2089883a 	add	r4,r4,r2
    2b20:	88bff404 	addi	r2,r17,-48
    2b24:	30bff92e 	bgeu	r6,r2,2b0c <__alt_data_end+0x80002b0c>
    2b28:	2005c916 	blt	r4,zero,4250 <___vfprintf_internal_r+0x1bd8>
    2b2c:	d9002915 	stw	r4,164(sp)
    2b30:	003f3306 	br	2800 <__alt_data_end+0x80002800>
    2b34:	94802014 	ori	r18,r18,128
    2b38:	ac400007 	ldb	r17,0(r21)
    2b3c:	003f2f06 	br	27fc <__alt_data_end+0x800027fc>
    2b40:	a809883a 	mov	r4,r21
    2b44:	d8003115 	stw	zero,196(sp)
    2b48:	88bff404 	addi	r2,r17,-48
    2b4c:	0017883a 	mov	r11,zero
    2b50:	24400007 	ldb	r17,0(r4)
    2b54:	5ac002a4 	muli	r11,r11,10
    2b58:	ad400044 	addi	r21,r21,1
    2b5c:	a809883a 	mov	r4,r21
    2b60:	12d7883a 	add	r11,r2,r11
    2b64:	88bff404 	addi	r2,r17,-48
    2b68:	30bff92e 	bgeu	r6,r2,2b50 <__alt_data_end+0x80002b50>
    2b6c:	dac03115 	stw	r11,196(sp)
    2b70:	003f2306 	br	2800 <__alt_data_end+0x80002800>
    2b74:	18c03fcc 	andi	r3,r3,255
    2b78:	18072b1e 	bne	r3,zero,4828 <___vfprintf_internal_r+0x21b0>
    2b7c:	94800414 	ori	r18,r18,16
    2b80:	9080080c 	andi	r2,r18,32
    2b84:	10037b26 	beq	r2,zero,3974 <___vfprintf_internal_r+0x12fc>
    2b88:	d9402d17 	ldw	r5,180(sp)
    2b8c:	28800117 	ldw	r2,4(r5)
    2b90:	2cc00017 	ldw	r19,0(r5)
    2b94:	29400204 	addi	r5,r5,8
    2b98:	d9402d15 	stw	r5,180(sp)
    2b9c:	102d883a 	mov	r22,r2
    2ba0:	10044b16 	blt	r2,zero,3cd0 <___vfprintf_internal_r+0x1658>
    2ba4:	d9402917 	ldw	r5,164(sp)
    2ba8:	df002783 	ldbu	fp,158(sp)
    2bac:	2803bc16 	blt	r5,zero,3aa0 <___vfprintf_internal_r+0x1428>
    2bb0:	00ffdfc4 	movi	r3,-129
    2bb4:	9d84b03a 	or	r2,r19,r22
    2bb8:	90e4703a 	and	r18,r18,r3
    2bbc:	10017726 	beq	r2,zero,319c <___vfprintf_internal_r+0xb24>
    2bc0:	b0038326 	beq	r22,zero,39d0 <___vfprintf_internal_r+0x1358>
    2bc4:	dc402a15 	stw	r17,168(sp)
    2bc8:	dc001e04 	addi	r16,sp,120
    2bcc:	b023883a 	mov	r17,r22
    2bd0:	402d883a 	mov	r22,r8
    2bd4:	9809883a 	mov	r4,r19
    2bd8:	880b883a 	mov	r5,r17
    2bdc:	01800284 	movi	r6,10
    2be0:	000f883a 	mov	r7,zero
    2be4:	000b3640 	call	b364 <__umoddi3>
    2be8:	10800c04 	addi	r2,r2,48
    2bec:	843fffc4 	addi	r16,r16,-1
    2bf0:	9809883a 	mov	r4,r19
    2bf4:	880b883a 	mov	r5,r17
    2bf8:	80800005 	stb	r2,0(r16)
    2bfc:	01800284 	movi	r6,10
    2c00:	000f883a 	mov	r7,zero
    2c04:	000adec0 	call	adec <__udivdi3>
    2c08:	1027883a 	mov	r19,r2
    2c0c:	10c4b03a 	or	r2,r2,r3
    2c10:	1823883a 	mov	r17,r3
    2c14:	103fef1e 	bne	r2,zero,2bd4 <__alt_data_end+0x80002bd4>
    2c18:	d8c02817 	ldw	r3,160(sp)
    2c1c:	dc402a17 	ldw	r17,168(sp)
    2c20:	b011883a 	mov	r8,r22
    2c24:	1c07c83a 	sub	r3,r3,r16
    2c28:	d8c02e15 	stw	r3,184(sp)
    2c2c:	00005906 	br	2d94 <___vfprintf_internal_r+0x71c>
    2c30:	18c03fcc 	andi	r3,r3,255
    2c34:	1806fa1e 	bne	r3,zero,4820 <___vfprintf_internal_r+0x21a8>
    2c38:	9080020c 	andi	r2,r18,8
    2c3c:	10048a26 	beq	r2,zero,3e68 <___vfprintf_internal_r+0x17f0>
    2c40:	d8c02d17 	ldw	r3,180(sp)
    2c44:	d9002d17 	ldw	r4,180(sp)
    2c48:	d9402d17 	ldw	r5,180(sp)
    2c4c:	18c00017 	ldw	r3,0(r3)
    2c50:	21000117 	ldw	r4,4(r4)
    2c54:	29400204 	addi	r5,r5,8
    2c58:	d8c03615 	stw	r3,216(sp)
    2c5c:	d9003815 	stw	r4,224(sp)
    2c60:	d9402d15 	stw	r5,180(sp)
    2c64:	d9003617 	ldw	r4,216(sp)
    2c68:	d9403817 	ldw	r5,224(sp)
    2c6c:	da003d15 	stw	r8,244(sp)
    2c70:	04000044 	movi	r16,1
    2c74:	00091780 	call	9178 <__fpclassifyd>
    2c78:	da003d17 	ldw	r8,244(sp)
    2c7c:	14041f1e 	bne	r2,r16,3cfc <___vfprintf_internal_r+0x1684>
    2c80:	d9003617 	ldw	r4,216(sp)
    2c84:	d9403817 	ldw	r5,224(sp)
    2c88:	000d883a 	mov	r6,zero
    2c8c:	000f883a 	mov	r7,zero
    2c90:	000cd480 	call	cd48 <__ledf2>
    2c94:	da003d17 	ldw	r8,244(sp)
    2c98:	1005be16 	blt	r2,zero,4394 <___vfprintf_internal_r+0x1d1c>
    2c9c:	df002783 	ldbu	fp,158(sp)
    2ca0:	008011c4 	movi	r2,71
    2ca4:	1445330e 	bge	r2,r17,4174 <___vfprintf_internal_r+0x1afc>
    2ca8:	04100034 	movhi	r16,16384
    2cac:	84003504 	addi	r16,r16,212
    2cb0:	00c000c4 	movi	r3,3
    2cb4:	00bfdfc4 	movi	r2,-129
    2cb8:	d8c02a15 	stw	r3,168(sp)
    2cbc:	90a4703a 	and	r18,r18,r2
    2cc0:	d8c02e15 	stw	r3,184(sp)
    2cc4:	d8002915 	stw	zero,164(sp)
    2cc8:	d8003215 	stw	zero,200(sp)
    2ccc:	00003706 	br	2dac <___vfprintf_internal_r+0x734>
    2cd0:	94800214 	ori	r18,r18,8
    2cd4:	ac400007 	ldb	r17,0(r21)
    2cd8:	003ec806 	br	27fc <__alt_data_end+0x800027fc>
    2cdc:	18c03fcc 	andi	r3,r3,255
    2ce0:	1806db1e 	bne	r3,zero,4850 <___vfprintf_internal_r+0x21d8>
    2ce4:	94800414 	ori	r18,r18,16
    2ce8:	9080080c 	andi	r2,r18,32
    2cec:	1002d826 	beq	r2,zero,3850 <___vfprintf_internal_r+0x11d8>
    2cf0:	d9402d17 	ldw	r5,180(sp)
    2cf4:	d8c02917 	ldw	r3,164(sp)
    2cf8:	d8002785 	stb	zero,158(sp)
    2cfc:	28800204 	addi	r2,r5,8
    2d00:	2cc00017 	ldw	r19,0(r5)
    2d04:	2d800117 	ldw	r22,4(r5)
    2d08:	18048f16 	blt	r3,zero,3f48 <___vfprintf_internal_r+0x18d0>
    2d0c:	013fdfc4 	movi	r4,-129
    2d10:	9d86b03a 	or	r3,r19,r22
    2d14:	d8802d15 	stw	r2,180(sp)
    2d18:	9124703a 	and	r18,r18,r4
    2d1c:	1802d91e 	bne	r3,zero,3884 <___vfprintf_internal_r+0x120c>
    2d20:	d8c02917 	ldw	r3,164(sp)
    2d24:	0039883a 	mov	fp,zero
    2d28:	1805c326 	beq	r3,zero,4438 <___vfprintf_internal_r+0x1dc0>
    2d2c:	0027883a 	mov	r19,zero
    2d30:	002d883a 	mov	r22,zero
    2d34:	dc001e04 	addi	r16,sp,120
    2d38:	9806d0fa 	srli	r3,r19,3
    2d3c:	b008977a 	slli	r4,r22,29
    2d40:	b02cd0fa 	srli	r22,r22,3
    2d44:	9cc001cc 	andi	r19,r19,7
    2d48:	98800c04 	addi	r2,r19,48
    2d4c:	843fffc4 	addi	r16,r16,-1
    2d50:	20e6b03a 	or	r19,r4,r3
    2d54:	80800005 	stb	r2,0(r16)
    2d58:	9d86b03a 	or	r3,r19,r22
    2d5c:	183ff61e 	bne	r3,zero,2d38 <__alt_data_end+0x80002d38>
    2d60:	90c0004c 	andi	r3,r18,1
    2d64:	18013b26 	beq	r3,zero,3254 <___vfprintf_internal_r+0xbdc>
    2d68:	10803fcc 	andi	r2,r2,255
    2d6c:	1080201c 	xori	r2,r2,128
    2d70:	10bfe004 	addi	r2,r2,-128
    2d74:	00c00c04 	movi	r3,48
    2d78:	10c13626 	beq	r2,r3,3254 <___vfprintf_internal_r+0xbdc>
    2d7c:	80ffffc5 	stb	r3,-1(r16)
    2d80:	d8c02817 	ldw	r3,160(sp)
    2d84:	80bfffc4 	addi	r2,r16,-1
    2d88:	1021883a 	mov	r16,r2
    2d8c:	1887c83a 	sub	r3,r3,r2
    2d90:	d8c02e15 	stw	r3,184(sp)
    2d94:	d8802e17 	ldw	r2,184(sp)
    2d98:	d9002917 	ldw	r4,164(sp)
    2d9c:	1100010e 	bge	r2,r4,2da4 <___vfprintf_internal_r+0x72c>
    2da0:	2005883a 	mov	r2,r4
    2da4:	d8802a15 	stw	r2,168(sp)
    2da8:	d8003215 	stw	zero,200(sp)
    2dac:	e7003fcc 	andi	fp,fp,255
    2db0:	e700201c 	xori	fp,fp,128
    2db4:	e73fe004 	addi	fp,fp,-128
    2db8:	e0000326 	beq	fp,zero,2dc8 <___vfprintf_internal_r+0x750>
    2dbc:	d8c02a17 	ldw	r3,168(sp)
    2dc0:	18c00044 	addi	r3,r3,1
    2dc4:	d8c02a15 	stw	r3,168(sp)
    2dc8:	90c0008c 	andi	r3,r18,2
    2dcc:	d8c02b15 	stw	r3,172(sp)
    2dd0:	18000326 	beq	r3,zero,2de0 <___vfprintf_internal_r+0x768>
    2dd4:	d8c02a17 	ldw	r3,168(sp)
    2dd8:	18c00084 	addi	r3,r3,2
    2ddc:	d8c02a15 	stw	r3,168(sp)
    2de0:	90c0210c 	andi	r3,r18,132
    2de4:	d8c03015 	stw	r3,192(sp)
    2de8:	1801a31e 	bne	r3,zero,3478 <___vfprintf_internal_r+0xe00>
    2dec:	d9003117 	ldw	r4,196(sp)
    2df0:	d8c02a17 	ldw	r3,168(sp)
    2df4:	20e7c83a 	sub	r19,r4,r3
    2df8:	04c19f0e 	bge	zero,r19,3478 <___vfprintf_internal_r+0xe00>
    2dfc:	02400404 	movi	r9,16
    2e00:	d8c02017 	ldw	r3,128(sp)
    2e04:	d8801f17 	ldw	r2,124(sp)
    2e08:	4cc50d0e 	bge	r9,r19,4240 <___vfprintf_internal_r+0x1bc8>
    2e0c:	01500034 	movhi	r5,16384
    2e10:	29404884 	addi	r5,r5,290
    2e14:	dc403b15 	stw	r17,236(sp)
    2e18:	d9403515 	stw	r5,212(sp)
    2e1c:	9823883a 	mov	r17,r19
    2e20:	482d883a 	mov	r22,r9
    2e24:	9027883a 	mov	r19,r18
    2e28:	070001c4 	movi	fp,7
    2e2c:	8025883a 	mov	r18,r16
    2e30:	dc002c17 	ldw	r16,176(sp)
    2e34:	00000306 	br	2e44 <___vfprintf_internal_r+0x7cc>
    2e38:	8c7ffc04 	addi	r17,r17,-16
    2e3c:	42000204 	addi	r8,r8,8
    2e40:	b440130e 	bge	r22,r17,2e90 <___vfprintf_internal_r+0x818>
    2e44:	01100034 	movhi	r4,16384
    2e48:	18c00404 	addi	r3,r3,16
    2e4c:	10800044 	addi	r2,r2,1
    2e50:	21004884 	addi	r4,r4,290
    2e54:	41000015 	stw	r4,0(r8)
    2e58:	45800115 	stw	r22,4(r8)
    2e5c:	d8c02015 	stw	r3,128(sp)
    2e60:	d8801f15 	stw	r2,124(sp)
    2e64:	e0bff40e 	bge	fp,r2,2e38 <__alt_data_end+0x80002e38>
    2e68:	d9801e04 	addi	r6,sp,120
    2e6c:	b80b883a 	mov	r5,r23
    2e70:	8009883a 	mov	r4,r16
    2e74:	00092e80 	call	92e8 <__sprint_r>
    2e78:	103f011e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    2e7c:	8c7ffc04 	addi	r17,r17,-16
    2e80:	d8c02017 	ldw	r3,128(sp)
    2e84:	d8801f17 	ldw	r2,124(sp)
    2e88:	da000404 	addi	r8,sp,16
    2e8c:	b47fed16 	blt	r22,r17,2e44 <__alt_data_end+0x80002e44>
    2e90:	9021883a 	mov	r16,r18
    2e94:	9825883a 	mov	r18,r19
    2e98:	8827883a 	mov	r19,r17
    2e9c:	dc403b17 	ldw	r17,236(sp)
    2ea0:	d9403517 	ldw	r5,212(sp)
    2ea4:	98c7883a 	add	r3,r19,r3
    2ea8:	10800044 	addi	r2,r2,1
    2eac:	41400015 	stw	r5,0(r8)
    2eb0:	44c00115 	stw	r19,4(r8)
    2eb4:	d8c02015 	stw	r3,128(sp)
    2eb8:	d8801f15 	stw	r2,124(sp)
    2ebc:	010001c4 	movi	r4,7
    2ec0:	2082a316 	blt	r4,r2,3950 <___vfprintf_internal_r+0x12d8>
    2ec4:	df002787 	ldb	fp,158(sp)
    2ec8:	42000204 	addi	r8,r8,8
    2ecc:	e0000c26 	beq	fp,zero,2f00 <___vfprintf_internal_r+0x888>
    2ed0:	d8801f17 	ldw	r2,124(sp)
    2ed4:	d9002784 	addi	r4,sp,158
    2ed8:	18c00044 	addi	r3,r3,1
    2edc:	10800044 	addi	r2,r2,1
    2ee0:	41000015 	stw	r4,0(r8)
    2ee4:	01000044 	movi	r4,1
    2ee8:	41000115 	stw	r4,4(r8)
    2eec:	d8c02015 	stw	r3,128(sp)
    2ef0:	d8801f15 	stw	r2,124(sp)
    2ef4:	010001c4 	movi	r4,7
    2ef8:	20823c16 	blt	r4,r2,37ec <___vfprintf_internal_r+0x1174>
    2efc:	42000204 	addi	r8,r8,8
    2f00:	d8802b17 	ldw	r2,172(sp)
    2f04:	10000c26 	beq	r2,zero,2f38 <___vfprintf_internal_r+0x8c0>
    2f08:	d8801f17 	ldw	r2,124(sp)
    2f0c:	d9002704 	addi	r4,sp,156
    2f10:	18c00084 	addi	r3,r3,2
    2f14:	10800044 	addi	r2,r2,1
    2f18:	41000015 	stw	r4,0(r8)
    2f1c:	01000084 	movi	r4,2
    2f20:	41000115 	stw	r4,4(r8)
    2f24:	d8c02015 	stw	r3,128(sp)
    2f28:	d8801f15 	stw	r2,124(sp)
    2f2c:	010001c4 	movi	r4,7
    2f30:	20823616 	blt	r4,r2,380c <___vfprintf_internal_r+0x1194>
    2f34:	42000204 	addi	r8,r8,8
    2f38:	d9003017 	ldw	r4,192(sp)
    2f3c:	00802004 	movi	r2,128
    2f40:	20819926 	beq	r4,r2,35a8 <___vfprintf_internal_r+0xf30>
    2f44:	d9402917 	ldw	r5,164(sp)
    2f48:	d8802e17 	ldw	r2,184(sp)
    2f4c:	28adc83a 	sub	r22,r5,r2
    2f50:	0580310e 	bge	zero,r22,3018 <___vfprintf_internal_r+0x9a0>
    2f54:	07000404 	movi	fp,16
    2f58:	d8801f17 	ldw	r2,124(sp)
    2f5c:	e584140e 	bge	fp,r22,3fb0 <___vfprintf_internal_r+0x1938>
    2f60:	01500034 	movhi	r5,16384
    2f64:	29404484 	addi	r5,r5,274
    2f68:	dc402915 	stw	r17,164(sp)
    2f6c:	d9402b15 	stw	r5,172(sp)
    2f70:	b023883a 	mov	r17,r22
    2f74:	04c001c4 	movi	r19,7
    2f78:	a82d883a 	mov	r22,r21
    2f7c:	902b883a 	mov	r21,r18
    2f80:	8025883a 	mov	r18,r16
    2f84:	dc002c17 	ldw	r16,176(sp)
    2f88:	00000306 	br	2f98 <___vfprintf_internal_r+0x920>
    2f8c:	8c7ffc04 	addi	r17,r17,-16
    2f90:	42000204 	addi	r8,r8,8
    2f94:	e440110e 	bge	fp,r17,2fdc <___vfprintf_internal_r+0x964>
    2f98:	18c00404 	addi	r3,r3,16
    2f9c:	10800044 	addi	r2,r2,1
    2fa0:	45000015 	stw	r20,0(r8)
    2fa4:	47000115 	stw	fp,4(r8)
    2fa8:	d8c02015 	stw	r3,128(sp)
    2fac:	d8801f15 	stw	r2,124(sp)
    2fb0:	98bff60e 	bge	r19,r2,2f8c <__alt_data_end+0x80002f8c>
    2fb4:	d9801e04 	addi	r6,sp,120
    2fb8:	b80b883a 	mov	r5,r23
    2fbc:	8009883a 	mov	r4,r16
    2fc0:	00092e80 	call	92e8 <__sprint_r>
    2fc4:	103eae1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    2fc8:	8c7ffc04 	addi	r17,r17,-16
    2fcc:	d8c02017 	ldw	r3,128(sp)
    2fd0:	d8801f17 	ldw	r2,124(sp)
    2fd4:	da000404 	addi	r8,sp,16
    2fd8:	e47fef16 	blt	fp,r17,2f98 <__alt_data_end+0x80002f98>
    2fdc:	9021883a 	mov	r16,r18
    2fe0:	a825883a 	mov	r18,r21
    2fe4:	b02b883a 	mov	r21,r22
    2fe8:	882d883a 	mov	r22,r17
    2fec:	dc402917 	ldw	r17,164(sp)
    2ff0:	d9002b17 	ldw	r4,172(sp)
    2ff4:	1d87883a 	add	r3,r3,r22
    2ff8:	10800044 	addi	r2,r2,1
    2ffc:	41000015 	stw	r4,0(r8)
    3000:	45800115 	stw	r22,4(r8)
    3004:	d8c02015 	stw	r3,128(sp)
    3008:	d8801f15 	stw	r2,124(sp)
    300c:	010001c4 	movi	r4,7
    3010:	2081ee16 	blt	r4,r2,37cc <___vfprintf_internal_r+0x1154>
    3014:	42000204 	addi	r8,r8,8
    3018:	9080400c 	andi	r2,r18,256
    301c:	1001181e 	bne	r2,zero,3480 <___vfprintf_internal_r+0xe08>
    3020:	d9402e17 	ldw	r5,184(sp)
    3024:	d8801f17 	ldw	r2,124(sp)
    3028:	44000015 	stw	r16,0(r8)
    302c:	1947883a 	add	r3,r3,r5
    3030:	10800044 	addi	r2,r2,1
    3034:	41400115 	stw	r5,4(r8)
    3038:	d8c02015 	stw	r3,128(sp)
    303c:	d8801f15 	stw	r2,124(sp)
    3040:	010001c4 	movi	r4,7
    3044:	2081d316 	blt	r4,r2,3794 <___vfprintf_internal_r+0x111c>
    3048:	42000204 	addi	r8,r8,8
    304c:	9480010c 	andi	r18,r18,4
    3050:	90003226 	beq	r18,zero,311c <___vfprintf_internal_r+0xaa4>
    3054:	d9403117 	ldw	r5,196(sp)
    3058:	d8802a17 	ldw	r2,168(sp)
    305c:	28a1c83a 	sub	r16,r5,r2
    3060:	04002e0e 	bge	zero,r16,311c <___vfprintf_internal_r+0xaa4>
    3064:	04400404 	movi	r17,16
    3068:	d8801f17 	ldw	r2,124(sp)
    306c:	8c04a20e 	bge	r17,r16,42f8 <___vfprintf_internal_r+0x1c80>
    3070:	01500034 	movhi	r5,16384
    3074:	29404884 	addi	r5,r5,290
    3078:	d9403515 	stw	r5,212(sp)
    307c:	048001c4 	movi	r18,7
    3080:	dcc02c17 	ldw	r19,176(sp)
    3084:	00000306 	br	3094 <___vfprintf_internal_r+0xa1c>
    3088:	843ffc04 	addi	r16,r16,-16
    308c:	42000204 	addi	r8,r8,8
    3090:	8c00130e 	bge	r17,r16,30e0 <___vfprintf_internal_r+0xa68>
    3094:	01100034 	movhi	r4,16384
    3098:	18c00404 	addi	r3,r3,16
    309c:	10800044 	addi	r2,r2,1
    30a0:	21004884 	addi	r4,r4,290
    30a4:	41000015 	stw	r4,0(r8)
    30a8:	44400115 	stw	r17,4(r8)
    30ac:	d8c02015 	stw	r3,128(sp)
    30b0:	d8801f15 	stw	r2,124(sp)
    30b4:	90bff40e 	bge	r18,r2,3088 <__alt_data_end+0x80003088>
    30b8:	d9801e04 	addi	r6,sp,120
    30bc:	b80b883a 	mov	r5,r23
    30c0:	9809883a 	mov	r4,r19
    30c4:	00092e80 	call	92e8 <__sprint_r>
    30c8:	103e6d1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    30cc:	843ffc04 	addi	r16,r16,-16
    30d0:	d8c02017 	ldw	r3,128(sp)
    30d4:	d8801f17 	ldw	r2,124(sp)
    30d8:	da000404 	addi	r8,sp,16
    30dc:	8c3fed16 	blt	r17,r16,3094 <__alt_data_end+0x80003094>
    30e0:	d9403517 	ldw	r5,212(sp)
    30e4:	1c07883a 	add	r3,r3,r16
    30e8:	10800044 	addi	r2,r2,1
    30ec:	41400015 	stw	r5,0(r8)
    30f0:	44000115 	stw	r16,4(r8)
    30f4:	d8c02015 	stw	r3,128(sp)
    30f8:	d8801f15 	stw	r2,124(sp)
    30fc:	010001c4 	movi	r4,7
    3100:	2080060e 	bge	r4,r2,311c <___vfprintf_internal_r+0xaa4>
    3104:	d9002c17 	ldw	r4,176(sp)
    3108:	d9801e04 	addi	r6,sp,120
    310c:	b80b883a 	mov	r5,r23
    3110:	00092e80 	call	92e8 <__sprint_r>
    3114:	103e5a1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3118:	d8c02017 	ldw	r3,128(sp)
    311c:	d8803117 	ldw	r2,196(sp)
    3120:	d9002a17 	ldw	r4,168(sp)
    3124:	1100010e 	bge	r2,r4,312c <___vfprintf_internal_r+0xab4>
    3128:	2005883a 	mov	r2,r4
    312c:	d9402f17 	ldw	r5,188(sp)
    3130:	288b883a 	add	r5,r5,r2
    3134:	d9402f15 	stw	r5,188(sp)
    3138:	18019e1e 	bne	r3,zero,37b4 <___vfprintf_internal_r+0x113c>
    313c:	a8800007 	ldb	r2,0(r21)
    3140:	d8001f15 	stw	zero,124(sp)
    3144:	da000404 	addi	r8,sp,16
    3148:	103d851e 	bne	r2,zero,2760 <__alt_data_end+0x80002760>
    314c:	a821883a 	mov	r16,r21
    3150:	003d9b06 	br	27c0 <__alt_data_end+0x800027c0>
    3154:	18c03fcc 	andi	r3,r3,255
    3158:	1805c11e 	bne	r3,zero,4860 <___vfprintf_internal_r+0x21e8>
    315c:	94800414 	ori	r18,r18,16
    3160:	9080080c 	andi	r2,r18,32
    3164:	10020c26 	beq	r2,zero,3998 <___vfprintf_internal_r+0x1320>
    3168:	d8802d17 	ldw	r2,180(sp)
    316c:	d9002917 	ldw	r4,164(sp)
    3170:	d8002785 	stb	zero,158(sp)
    3174:	10c00204 	addi	r3,r2,8
    3178:	14c00017 	ldw	r19,0(r2)
    317c:	15800117 	ldw	r22,4(r2)
    3180:	20040f16 	blt	r4,zero,41c0 <___vfprintf_internal_r+0x1b48>
    3184:	013fdfc4 	movi	r4,-129
    3188:	9d84b03a 	or	r2,r19,r22
    318c:	d8c02d15 	stw	r3,180(sp)
    3190:	9124703a 	and	r18,r18,r4
    3194:	0039883a 	mov	fp,zero
    3198:	103e891e 	bne	r2,zero,2bc0 <__alt_data_end+0x80002bc0>
    319c:	d9002917 	ldw	r4,164(sp)
    31a0:	2002c11e 	bne	r4,zero,3ca8 <___vfprintf_internal_r+0x1630>
    31a4:	d8002915 	stw	zero,164(sp)
    31a8:	d8002e15 	stw	zero,184(sp)
    31ac:	dc001e04 	addi	r16,sp,120
    31b0:	003ef806 	br	2d94 <__alt_data_end+0x80002d94>
    31b4:	18c03fcc 	andi	r3,r3,255
    31b8:	18059d1e 	bne	r3,zero,4830 <___vfprintf_internal_r+0x21b8>
    31bc:	01500034 	movhi	r5,16384
    31c0:	29403804 	addi	r5,r5,224
    31c4:	d9403915 	stw	r5,228(sp)
    31c8:	9080080c 	andi	r2,r18,32
    31cc:	10005226 	beq	r2,zero,3318 <___vfprintf_internal_r+0xca0>
    31d0:	d8802d17 	ldw	r2,180(sp)
    31d4:	14c00017 	ldw	r19,0(r2)
    31d8:	15800117 	ldw	r22,4(r2)
    31dc:	10800204 	addi	r2,r2,8
    31e0:	d8802d15 	stw	r2,180(sp)
    31e4:	9080004c 	andi	r2,r18,1
    31e8:	10019026 	beq	r2,zero,382c <___vfprintf_internal_r+0x11b4>
    31ec:	9d84b03a 	or	r2,r19,r22
    31f0:	10036926 	beq	r2,zero,3f98 <___vfprintf_internal_r+0x1920>
    31f4:	d8c02917 	ldw	r3,164(sp)
    31f8:	00800c04 	movi	r2,48
    31fc:	d8802705 	stb	r2,156(sp)
    3200:	dc402745 	stb	r17,157(sp)
    3204:	d8002785 	stb	zero,158(sp)
    3208:	90800094 	ori	r2,r18,2
    320c:	18045d16 	blt	r3,zero,4384 <___vfprintf_internal_r+0x1d0c>
    3210:	00bfdfc4 	movi	r2,-129
    3214:	90a4703a 	and	r18,r18,r2
    3218:	94800094 	ori	r18,r18,2
    321c:	0039883a 	mov	fp,zero
    3220:	d9003917 	ldw	r4,228(sp)
    3224:	dc001e04 	addi	r16,sp,120
    3228:	988003cc 	andi	r2,r19,15
    322c:	b006973a 	slli	r3,r22,28
    3230:	2085883a 	add	r2,r4,r2
    3234:	9826d13a 	srli	r19,r19,4
    3238:	10800003 	ldbu	r2,0(r2)
    323c:	b02cd13a 	srli	r22,r22,4
    3240:	843fffc4 	addi	r16,r16,-1
    3244:	1ce6b03a 	or	r19,r3,r19
    3248:	80800005 	stb	r2,0(r16)
    324c:	9d84b03a 	or	r2,r19,r22
    3250:	103ff51e 	bne	r2,zero,3228 <__alt_data_end+0x80003228>
    3254:	d8c02817 	ldw	r3,160(sp)
    3258:	1c07c83a 	sub	r3,r3,r16
    325c:	d8c02e15 	stw	r3,184(sp)
    3260:	003ecc06 	br	2d94 <__alt_data_end+0x80002d94>
    3264:	18c03fcc 	andi	r3,r3,255
    3268:	183e9f26 	beq	r3,zero,2ce8 <__alt_data_end+0x80002ce8>
    326c:	d9c02785 	stb	r7,158(sp)
    3270:	003e9d06 	br	2ce8 <__alt_data_end+0x80002ce8>
    3274:	00c00044 	movi	r3,1
    3278:	01c00ac4 	movi	r7,43
    327c:	ac400007 	ldb	r17,0(r21)
    3280:	003d5e06 	br	27fc <__alt_data_end+0x800027fc>
    3284:	94800814 	ori	r18,r18,32
    3288:	ac400007 	ldb	r17,0(r21)
    328c:	003d5b06 	br	27fc <__alt_data_end+0x800027fc>
    3290:	d8c02d17 	ldw	r3,180(sp)
    3294:	d8002785 	stb	zero,158(sp)
    3298:	1c000017 	ldw	r16,0(r3)
    329c:	1cc00104 	addi	r19,r3,4
    32a0:	80041926 	beq	r16,zero,4308 <___vfprintf_internal_r+0x1c90>
    32a4:	d9002917 	ldw	r4,164(sp)
    32a8:	2003d016 	blt	r4,zero,41ec <___vfprintf_internal_r+0x1b74>
    32ac:	200d883a 	mov	r6,r4
    32b0:	000b883a 	mov	r5,zero
    32b4:	8009883a 	mov	r4,r16
    32b8:	da003d15 	stw	r8,244(sp)
    32bc:	00078300 	call	7830 <memchr>
    32c0:	da003d17 	ldw	r8,244(sp)
    32c4:	10045426 	beq	r2,zero,4418 <___vfprintf_internal_r+0x1da0>
    32c8:	1405c83a 	sub	r2,r2,r16
    32cc:	d8802e15 	stw	r2,184(sp)
    32d0:	1003cc16 	blt	r2,zero,4204 <___vfprintf_internal_r+0x1b8c>
    32d4:	df002783 	ldbu	fp,158(sp)
    32d8:	d8802a15 	stw	r2,168(sp)
    32dc:	dcc02d15 	stw	r19,180(sp)
    32e0:	d8002915 	stw	zero,164(sp)
    32e4:	d8003215 	stw	zero,200(sp)
    32e8:	003eb006 	br	2dac <__alt_data_end+0x80002dac>
    32ec:	18c03fcc 	andi	r3,r3,255
    32f0:	183f9b26 	beq	r3,zero,3160 <__alt_data_end+0x80003160>
    32f4:	d9c02785 	stb	r7,158(sp)
    32f8:	003f9906 	br	3160 <__alt_data_end+0x80003160>
    32fc:	18c03fcc 	andi	r3,r3,255
    3300:	1805551e 	bne	r3,zero,4858 <___vfprintf_internal_r+0x21e0>
    3304:	01500034 	movhi	r5,16384
    3308:	29403d04 	addi	r5,r5,244
    330c:	d9403915 	stw	r5,228(sp)
    3310:	9080080c 	andi	r2,r18,32
    3314:	103fae1e 	bne	r2,zero,31d0 <__alt_data_end+0x800031d0>
    3318:	9080040c 	andi	r2,r18,16
    331c:	1002de26 	beq	r2,zero,3e98 <___vfprintf_internal_r+0x1820>
    3320:	d8c02d17 	ldw	r3,180(sp)
    3324:	002d883a 	mov	r22,zero
    3328:	1cc00017 	ldw	r19,0(r3)
    332c:	18c00104 	addi	r3,r3,4
    3330:	d8c02d15 	stw	r3,180(sp)
    3334:	003fab06 	br	31e4 <__alt_data_end+0x800031e4>
    3338:	38803fcc 	andi	r2,r7,255
    333c:	1080201c 	xori	r2,r2,128
    3340:	10bfe004 	addi	r2,r2,-128
    3344:	1002d21e 	bne	r2,zero,3e90 <___vfprintf_internal_r+0x1818>
    3348:	00c00044 	movi	r3,1
    334c:	01c00804 	movi	r7,32
    3350:	ac400007 	ldb	r17,0(r21)
    3354:	003d2906 	br	27fc <__alt_data_end+0x800027fc>
    3358:	94800054 	ori	r18,r18,1
    335c:	ac400007 	ldb	r17,0(r21)
    3360:	003d2606 	br	27fc <__alt_data_end+0x800027fc>
    3364:	18c03fcc 	andi	r3,r3,255
    3368:	183e0526 	beq	r3,zero,2b80 <__alt_data_end+0x80002b80>
    336c:	d9c02785 	stb	r7,158(sp)
    3370:	003e0306 	br	2b80 <__alt_data_end+0x80002b80>
    3374:	94801014 	ori	r18,r18,64
    3378:	ac400007 	ldb	r17,0(r21)
    337c:	003d1f06 	br	27fc <__alt_data_end+0x800027fc>
    3380:	ac400007 	ldb	r17,0(r21)
    3384:	8a438726 	beq	r17,r9,41a4 <___vfprintf_internal_r+0x1b2c>
    3388:	94800414 	ori	r18,r18,16
    338c:	003d1b06 	br	27fc <__alt_data_end+0x800027fc>
    3390:	18c03fcc 	andi	r3,r3,255
    3394:	1805341e 	bne	r3,zero,4868 <___vfprintf_internal_r+0x21f0>
    3398:	9080080c 	andi	r2,r18,32
    339c:	1002cd26 	beq	r2,zero,3ed4 <___vfprintf_internal_r+0x185c>
    33a0:	d9402d17 	ldw	r5,180(sp)
    33a4:	d9002f17 	ldw	r4,188(sp)
    33a8:	28800017 	ldw	r2,0(r5)
    33ac:	2007d7fa 	srai	r3,r4,31
    33b0:	29400104 	addi	r5,r5,4
    33b4:	d9402d15 	stw	r5,180(sp)
    33b8:	11000015 	stw	r4,0(r2)
    33bc:	10c00115 	stw	r3,4(r2)
    33c0:	003ce506 	br	2758 <__alt_data_end+0x80002758>
    33c4:	d8c02d17 	ldw	r3,180(sp)
    33c8:	d9002d17 	ldw	r4,180(sp)
    33cc:	d8002785 	stb	zero,158(sp)
    33d0:	18800017 	ldw	r2,0(r3)
    33d4:	21000104 	addi	r4,r4,4
    33d8:	00c00044 	movi	r3,1
    33dc:	d8c02a15 	stw	r3,168(sp)
    33e0:	d8801405 	stb	r2,80(sp)
    33e4:	d9002d15 	stw	r4,180(sp)
    33e8:	d8c02e15 	stw	r3,184(sp)
    33ec:	d8002915 	stw	zero,164(sp)
    33f0:	d8003215 	stw	zero,200(sp)
    33f4:	dc001404 	addi	r16,sp,80
    33f8:	0039883a 	mov	fp,zero
    33fc:	003e7206 	br	2dc8 <__alt_data_end+0x80002dc8>
    3400:	01100034 	movhi	r4,16384
    3404:	21003d04 	addi	r4,r4,244
    3408:	0039883a 	mov	fp,zero
    340c:	d9003915 	stw	r4,228(sp)
    3410:	04401e04 	movi	r17,120
    3414:	003f8206 	br	3220 <__alt_data_end+0x80003220>
    3418:	18c03fcc 	andi	r3,r3,255
    341c:	1805061e 	bne	r3,zero,4838 <___vfprintf_internal_r+0x21c0>
    3420:	883d9126 	beq	r17,zero,2a68 <__alt_data_end+0x80002a68>
    3424:	00c00044 	movi	r3,1
    3428:	d8c02a15 	stw	r3,168(sp)
    342c:	dc401405 	stb	r17,80(sp)
    3430:	d8002785 	stb	zero,158(sp)
    3434:	003fec06 	br	33e8 <__alt_data_end+0x800033e8>
    3438:	01500034 	movhi	r5,16384
    343c:	29403d04 	addi	r5,r5,244
    3440:	d9403915 	stw	r5,228(sp)
    3444:	d8c02d15 	stw	r3,180(sp)
    3448:	1025883a 	mov	r18,r2
    344c:	04401e04 	movi	r17,120
    3450:	9d84b03a 	or	r2,r19,r22
    3454:	1000fc1e 	bne	r2,zero,3848 <___vfprintf_internal_r+0x11d0>
    3458:	0039883a 	mov	fp,zero
    345c:	00800084 	movi	r2,2
    3460:	10803fcc 	andi	r2,r2,255
    3464:	00c00044 	movi	r3,1
    3468:	10c20f26 	beq	r2,r3,3ca8 <___vfprintf_internal_r+0x1630>
    346c:	00c00084 	movi	r3,2
    3470:	10fd6326 	beq	r2,r3,2a00 <__alt_data_end+0x80002a00>
    3474:	003e2d06 	br	2d2c <__alt_data_end+0x80002d2c>
    3478:	d8c02017 	ldw	r3,128(sp)
    347c:	003e9306 	br	2ecc <__alt_data_end+0x80002ecc>
    3480:	00801944 	movi	r2,101
    3484:	14407e0e 	bge	r2,r17,3680 <___vfprintf_internal_r+0x1008>
    3488:	d9003617 	ldw	r4,216(sp)
    348c:	d9403817 	ldw	r5,224(sp)
    3490:	000d883a 	mov	r6,zero
    3494:	000f883a 	mov	r7,zero
    3498:	d8c03c15 	stw	r3,240(sp)
    349c:	da003d15 	stw	r8,244(sp)
    34a0:	000cbe40 	call	cbe4 <__eqdf2>
    34a4:	d8c03c17 	ldw	r3,240(sp)
    34a8:	da003d17 	ldw	r8,244(sp)
    34ac:	1000f71e 	bne	r2,zero,388c <___vfprintf_internal_r+0x1214>
    34b0:	d8801f17 	ldw	r2,124(sp)
    34b4:	01100034 	movhi	r4,16384
    34b8:	21004404 	addi	r4,r4,272
    34bc:	18c00044 	addi	r3,r3,1
    34c0:	10800044 	addi	r2,r2,1
    34c4:	41000015 	stw	r4,0(r8)
    34c8:	01000044 	movi	r4,1
    34cc:	41000115 	stw	r4,4(r8)
    34d0:	d8c02015 	stw	r3,128(sp)
    34d4:	d8801f15 	stw	r2,124(sp)
    34d8:	010001c4 	movi	r4,7
    34dc:	2082b816 	blt	r4,r2,3fc0 <___vfprintf_internal_r+0x1948>
    34e0:	42000204 	addi	r8,r8,8
    34e4:	d8802617 	ldw	r2,152(sp)
    34e8:	d9403317 	ldw	r5,204(sp)
    34ec:	11400216 	blt	r2,r5,34f8 <___vfprintf_internal_r+0xe80>
    34f0:	9080004c 	andi	r2,r18,1
    34f4:	103ed526 	beq	r2,zero,304c <__alt_data_end+0x8000304c>
    34f8:	d8803717 	ldw	r2,220(sp)
    34fc:	d9003417 	ldw	r4,208(sp)
    3500:	d9403717 	ldw	r5,220(sp)
    3504:	1887883a 	add	r3,r3,r2
    3508:	d8801f17 	ldw	r2,124(sp)
    350c:	41000015 	stw	r4,0(r8)
    3510:	41400115 	stw	r5,4(r8)
    3514:	10800044 	addi	r2,r2,1
    3518:	d8c02015 	stw	r3,128(sp)
    351c:	d8801f15 	stw	r2,124(sp)
    3520:	010001c4 	movi	r4,7
    3524:	20832916 	blt	r4,r2,41cc <___vfprintf_internal_r+0x1b54>
    3528:	42000204 	addi	r8,r8,8
    352c:	d8803317 	ldw	r2,204(sp)
    3530:	143fffc4 	addi	r16,r2,-1
    3534:	043ec50e 	bge	zero,r16,304c <__alt_data_end+0x8000304c>
    3538:	04400404 	movi	r17,16
    353c:	d8801f17 	ldw	r2,124(sp)
    3540:	8c00880e 	bge	r17,r16,3764 <___vfprintf_internal_r+0x10ec>
    3544:	01500034 	movhi	r5,16384
    3548:	29404484 	addi	r5,r5,274
    354c:	d9402b15 	stw	r5,172(sp)
    3550:	058001c4 	movi	r22,7
    3554:	dcc02c17 	ldw	r19,176(sp)
    3558:	00000306 	br	3568 <___vfprintf_internal_r+0xef0>
    355c:	42000204 	addi	r8,r8,8
    3560:	843ffc04 	addi	r16,r16,-16
    3564:	8c00820e 	bge	r17,r16,3770 <___vfprintf_internal_r+0x10f8>
    3568:	18c00404 	addi	r3,r3,16
    356c:	10800044 	addi	r2,r2,1
    3570:	45000015 	stw	r20,0(r8)
    3574:	44400115 	stw	r17,4(r8)
    3578:	d8c02015 	stw	r3,128(sp)
    357c:	d8801f15 	stw	r2,124(sp)
    3580:	b0bff60e 	bge	r22,r2,355c <__alt_data_end+0x8000355c>
    3584:	d9801e04 	addi	r6,sp,120
    3588:	b80b883a 	mov	r5,r23
    358c:	9809883a 	mov	r4,r19
    3590:	00092e80 	call	92e8 <__sprint_r>
    3594:	103d3a1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3598:	d8c02017 	ldw	r3,128(sp)
    359c:	d8801f17 	ldw	r2,124(sp)
    35a0:	da000404 	addi	r8,sp,16
    35a4:	003fee06 	br	3560 <__alt_data_end+0x80003560>
    35a8:	d9403117 	ldw	r5,196(sp)
    35ac:	d8802a17 	ldw	r2,168(sp)
    35b0:	28adc83a 	sub	r22,r5,r2
    35b4:	05be630e 	bge	zero,r22,2f44 <__alt_data_end+0x80002f44>
    35b8:	07000404 	movi	fp,16
    35bc:	d8801f17 	ldw	r2,124(sp)
    35c0:	e5838f0e 	bge	fp,r22,4400 <___vfprintf_internal_r+0x1d88>
    35c4:	01500034 	movhi	r5,16384
    35c8:	29404484 	addi	r5,r5,274
    35cc:	dc403015 	stw	r17,192(sp)
    35d0:	d9402b15 	stw	r5,172(sp)
    35d4:	b023883a 	mov	r17,r22
    35d8:	04c001c4 	movi	r19,7
    35dc:	a82d883a 	mov	r22,r21
    35e0:	902b883a 	mov	r21,r18
    35e4:	8025883a 	mov	r18,r16
    35e8:	dc002c17 	ldw	r16,176(sp)
    35ec:	00000306 	br	35fc <___vfprintf_internal_r+0xf84>
    35f0:	8c7ffc04 	addi	r17,r17,-16
    35f4:	42000204 	addi	r8,r8,8
    35f8:	e440110e 	bge	fp,r17,3640 <___vfprintf_internal_r+0xfc8>
    35fc:	18c00404 	addi	r3,r3,16
    3600:	10800044 	addi	r2,r2,1
    3604:	45000015 	stw	r20,0(r8)
    3608:	47000115 	stw	fp,4(r8)
    360c:	d8c02015 	stw	r3,128(sp)
    3610:	d8801f15 	stw	r2,124(sp)
    3614:	98bff60e 	bge	r19,r2,35f0 <__alt_data_end+0x800035f0>
    3618:	d9801e04 	addi	r6,sp,120
    361c:	b80b883a 	mov	r5,r23
    3620:	8009883a 	mov	r4,r16
    3624:	00092e80 	call	92e8 <__sprint_r>
    3628:	103d151e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    362c:	8c7ffc04 	addi	r17,r17,-16
    3630:	d8c02017 	ldw	r3,128(sp)
    3634:	d8801f17 	ldw	r2,124(sp)
    3638:	da000404 	addi	r8,sp,16
    363c:	e47fef16 	blt	fp,r17,35fc <__alt_data_end+0x800035fc>
    3640:	9021883a 	mov	r16,r18
    3644:	a825883a 	mov	r18,r21
    3648:	b02b883a 	mov	r21,r22
    364c:	882d883a 	mov	r22,r17
    3650:	dc403017 	ldw	r17,192(sp)
    3654:	d9002b17 	ldw	r4,172(sp)
    3658:	1d87883a 	add	r3,r3,r22
    365c:	10800044 	addi	r2,r2,1
    3660:	41000015 	stw	r4,0(r8)
    3664:	45800115 	stw	r22,4(r8)
    3668:	d8c02015 	stw	r3,128(sp)
    366c:	d8801f15 	stw	r2,124(sp)
    3670:	010001c4 	movi	r4,7
    3674:	20818e16 	blt	r4,r2,3cb0 <___vfprintf_internal_r+0x1638>
    3678:	42000204 	addi	r8,r8,8
    367c:	003e3106 	br	2f44 <__alt_data_end+0x80002f44>
    3680:	d9403317 	ldw	r5,204(sp)
    3684:	00800044 	movi	r2,1
    3688:	18c00044 	addi	r3,r3,1
    368c:	1141530e 	bge	r2,r5,3bdc <___vfprintf_internal_r+0x1564>
    3690:	dc401f17 	ldw	r17,124(sp)
    3694:	00800044 	movi	r2,1
    3698:	40800115 	stw	r2,4(r8)
    369c:	8c400044 	addi	r17,r17,1
    36a0:	44000015 	stw	r16,0(r8)
    36a4:	d8c02015 	stw	r3,128(sp)
    36a8:	dc401f15 	stw	r17,124(sp)
    36ac:	008001c4 	movi	r2,7
    36b0:	14416b16 	blt	r2,r17,3c60 <___vfprintf_internal_r+0x15e8>
    36b4:	42000204 	addi	r8,r8,8
    36b8:	d8803717 	ldw	r2,220(sp)
    36bc:	d9003417 	ldw	r4,208(sp)
    36c0:	8c400044 	addi	r17,r17,1
    36c4:	10c7883a 	add	r3,r2,r3
    36c8:	40800115 	stw	r2,4(r8)
    36cc:	41000015 	stw	r4,0(r8)
    36d0:	d8c02015 	stw	r3,128(sp)
    36d4:	dc401f15 	stw	r17,124(sp)
    36d8:	008001c4 	movi	r2,7
    36dc:	14416916 	blt	r2,r17,3c84 <___vfprintf_internal_r+0x160c>
    36e0:	45800204 	addi	r22,r8,8
    36e4:	d9003617 	ldw	r4,216(sp)
    36e8:	d9403817 	ldw	r5,224(sp)
    36ec:	000d883a 	mov	r6,zero
    36f0:	000f883a 	mov	r7,zero
    36f4:	d8c03c15 	stw	r3,240(sp)
    36f8:	000cbe40 	call	cbe4 <__eqdf2>
    36fc:	d8c03c17 	ldw	r3,240(sp)
    3700:	1000bc26 	beq	r2,zero,39f4 <___vfprintf_internal_r+0x137c>
    3704:	d9403317 	ldw	r5,204(sp)
    3708:	84000044 	addi	r16,r16,1
    370c:	8c400044 	addi	r17,r17,1
    3710:	28bfffc4 	addi	r2,r5,-1
    3714:	1887883a 	add	r3,r3,r2
    3718:	b0800115 	stw	r2,4(r22)
    371c:	b4000015 	stw	r16,0(r22)
    3720:	d8c02015 	stw	r3,128(sp)
    3724:	dc401f15 	stw	r17,124(sp)
    3728:	008001c4 	movi	r2,7
    372c:	14414316 	blt	r2,r17,3c3c <___vfprintf_internal_r+0x15c4>
    3730:	b5800204 	addi	r22,r22,8
    3734:	d9003a17 	ldw	r4,232(sp)
    3738:	df0022c4 	addi	fp,sp,139
    373c:	8c400044 	addi	r17,r17,1
    3740:	20c7883a 	add	r3,r4,r3
    3744:	b7000015 	stw	fp,0(r22)
    3748:	b1000115 	stw	r4,4(r22)
    374c:	d8c02015 	stw	r3,128(sp)
    3750:	dc401f15 	stw	r17,124(sp)
    3754:	008001c4 	movi	r2,7
    3758:	14400e16 	blt	r2,r17,3794 <___vfprintf_internal_r+0x111c>
    375c:	b2000204 	addi	r8,r22,8
    3760:	003e3a06 	br	304c <__alt_data_end+0x8000304c>
    3764:	01100034 	movhi	r4,16384
    3768:	21004484 	addi	r4,r4,274
    376c:	d9002b15 	stw	r4,172(sp)
    3770:	d9002b17 	ldw	r4,172(sp)
    3774:	1c07883a 	add	r3,r3,r16
    3778:	44000115 	stw	r16,4(r8)
    377c:	41000015 	stw	r4,0(r8)
    3780:	10800044 	addi	r2,r2,1
    3784:	d8c02015 	stw	r3,128(sp)
    3788:	d8801f15 	stw	r2,124(sp)
    378c:	010001c4 	movi	r4,7
    3790:	20be2d0e 	bge	r4,r2,3048 <__alt_data_end+0x80003048>
    3794:	d9002c17 	ldw	r4,176(sp)
    3798:	d9801e04 	addi	r6,sp,120
    379c:	b80b883a 	mov	r5,r23
    37a0:	00092e80 	call	92e8 <__sprint_r>
    37a4:	103cb61e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    37a8:	d8c02017 	ldw	r3,128(sp)
    37ac:	da000404 	addi	r8,sp,16
    37b0:	003e2606 	br	304c <__alt_data_end+0x8000304c>
    37b4:	d9002c17 	ldw	r4,176(sp)
    37b8:	d9801e04 	addi	r6,sp,120
    37bc:	b80b883a 	mov	r5,r23
    37c0:	00092e80 	call	92e8 <__sprint_r>
    37c4:	103e5d26 	beq	r2,zero,313c <__alt_data_end+0x8000313c>
    37c8:	003cad06 	br	2a80 <__alt_data_end+0x80002a80>
    37cc:	d9002c17 	ldw	r4,176(sp)
    37d0:	d9801e04 	addi	r6,sp,120
    37d4:	b80b883a 	mov	r5,r23
    37d8:	00092e80 	call	92e8 <__sprint_r>
    37dc:	103ca81e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    37e0:	d8c02017 	ldw	r3,128(sp)
    37e4:	da000404 	addi	r8,sp,16
    37e8:	003e0b06 	br	3018 <__alt_data_end+0x80003018>
    37ec:	d9002c17 	ldw	r4,176(sp)
    37f0:	d9801e04 	addi	r6,sp,120
    37f4:	b80b883a 	mov	r5,r23
    37f8:	00092e80 	call	92e8 <__sprint_r>
    37fc:	103ca01e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3800:	d8c02017 	ldw	r3,128(sp)
    3804:	da000404 	addi	r8,sp,16
    3808:	003dbd06 	br	2f00 <__alt_data_end+0x80002f00>
    380c:	d9002c17 	ldw	r4,176(sp)
    3810:	d9801e04 	addi	r6,sp,120
    3814:	b80b883a 	mov	r5,r23
    3818:	00092e80 	call	92e8 <__sprint_r>
    381c:	103c981e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3820:	d8c02017 	ldw	r3,128(sp)
    3824:	da000404 	addi	r8,sp,16
    3828:	003dc306 	br	2f38 <__alt_data_end+0x80002f38>
    382c:	d8802917 	ldw	r2,164(sp)
    3830:	d8002785 	stb	zero,158(sp)
    3834:	103f0616 	blt	r2,zero,3450 <__alt_data_end+0x80003450>
    3838:	00ffdfc4 	movi	r3,-129
    383c:	9d84b03a 	or	r2,r19,r22
    3840:	90e4703a 	and	r18,r18,r3
    3844:	103c6b26 	beq	r2,zero,29f4 <__alt_data_end+0x800029f4>
    3848:	0039883a 	mov	fp,zero
    384c:	003e7406 	br	3220 <__alt_data_end+0x80003220>
    3850:	9080040c 	andi	r2,r18,16
    3854:	1001b326 	beq	r2,zero,3f24 <___vfprintf_internal_r+0x18ac>
    3858:	d9002d17 	ldw	r4,180(sp)
    385c:	d9402917 	ldw	r5,164(sp)
    3860:	d8002785 	stb	zero,158(sp)
    3864:	20800104 	addi	r2,r4,4
    3868:	24c00017 	ldw	r19,0(r4)
    386c:	002d883a 	mov	r22,zero
    3870:	2801b516 	blt	r5,zero,3f48 <___vfprintf_internal_r+0x18d0>
    3874:	00ffdfc4 	movi	r3,-129
    3878:	d8802d15 	stw	r2,180(sp)
    387c:	90e4703a 	and	r18,r18,r3
    3880:	983d2726 	beq	r19,zero,2d20 <__alt_data_end+0x80002d20>
    3884:	0039883a 	mov	fp,zero
    3888:	003d2a06 	br	2d34 <__alt_data_end+0x80002d34>
    388c:	dc402617 	ldw	r17,152(sp)
    3890:	0441d30e 	bge	zero,r17,3fe0 <___vfprintf_internal_r+0x1968>
    3894:	dc403217 	ldw	r17,200(sp)
    3898:	d8803317 	ldw	r2,204(sp)
    389c:	1440010e 	bge	r2,r17,38a4 <___vfprintf_internal_r+0x122c>
    38a0:	1023883a 	mov	r17,r2
    38a4:	04400a0e 	bge	zero,r17,38d0 <___vfprintf_internal_r+0x1258>
    38a8:	d8801f17 	ldw	r2,124(sp)
    38ac:	1c47883a 	add	r3,r3,r17
    38b0:	44000015 	stw	r16,0(r8)
    38b4:	10800044 	addi	r2,r2,1
    38b8:	44400115 	stw	r17,4(r8)
    38bc:	d8c02015 	stw	r3,128(sp)
    38c0:	d8801f15 	stw	r2,124(sp)
    38c4:	010001c4 	movi	r4,7
    38c8:	20826516 	blt	r4,r2,4260 <___vfprintf_internal_r+0x1be8>
    38cc:	42000204 	addi	r8,r8,8
    38d0:	88026116 	blt	r17,zero,4258 <___vfprintf_internal_r+0x1be0>
    38d4:	d9003217 	ldw	r4,200(sp)
    38d8:	2463c83a 	sub	r17,r4,r17
    38dc:	04407b0e 	bge	zero,r17,3acc <___vfprintf_internal_r+0x1454>
    38e0:	05800404 	movi	r22,16
    38e4:	d8801f17 	ldw	r2,124(sp)
    38e8:	b4419d0e 	bge	r22,r17,3f60 <___vfprintf_internal_r+0x18e8>
    38ec:	01100034 	movhi	r4,16384
    38f0:	21004484 	addi	r4,r4,274
    38f4:	d9002b15 	stw	r4,172(sp)
    38f8:	070001c4 	movi	fp,7
    38fc:	dcc02c17 	ldw	r19,176(sp)
    3900:	00000306 	br	3910 <___vfprintf_internal_r+0x1298>
    3904:	42000204 	addi	r8,r8,8
    3908:	8c7ffc04 	addi	r17,r17,-16
    390c:	b441970e 	bge	r22,r17,3f6c <___vfprintf_internal_r+0x18f4>
    3910:	18c00404 	addi	r3,r3,16
    3914:	10800044 	addi	r2,r2,1
    3918:	45000015 	stw	r20,0(r8)
    391c:	45800115 	stw	r22,4(r8)
    3920:	d8c02015 	stw	r3,128(sp)
    3924:	d8801f15 	stw	r2,124(sp)
    3928:	e0bff60e 	bge	fp,r2,3904 <__alt_data_end+0x80003904>
    392c:	d9801e04 	addi	r6,sp,120
    3930:	b80b883a 	mov	r5,r23
    3934:	9809883a 	mov	r4,r19
    3938:	00092e80 	call	92e8 <__sprint_r>
    393c:	103c501e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3940:	d8c02017 	ldw	r3,128(sp)
    3944:	d8801f17 	ldw	r2,124(sp)
    3948:	da000404 	addi	r8,sp,16
    394c:	003fee06 	br	3908 <__alt_data_end+0x80003908>
    3950:	d9002c17 	ldw	r4,176(sp)
    3954:	d9801e04 	addi	r6,sp,120
    3958:	b80b883a 	mov	r5,r23
    395c:	00092e80 	call	92e8 <__sprint_r>
    3960:	103c471e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3964:	d8c02017 	ldw	r3,128(sp)
    3968:	df002787 	ldb	fp,158(sp)
    396c:	da000404 	addi	r8,sp,16
    3970:	003d5606 	br	2ecc <__alt_data_end+0x80002ecc>
    3974:	9080040c 	andi	r2,r18,16
    3978:	10016126 	beq	r2,zero,3f00 <___vfprintf_internal_r+0x1888>
    397c:	d8802d17 	ldw	r2,180(sp)
    3980:	14c00017 	ldw	r19,0(r2)
    3984:	10800104 	addi	r2,r2,4
    3988:	d8802d15 	stw	r2,180(sp)
    398c:	982dd7fa 	srai	r22,r19,31
    3990:	b005883a 	mov	r2,r22
    3994:	003c8206 	br	2ba0 <__alt_data_end+0x80002ba0>
    3998:	9080040c 	andi	r2,r18,16
    399c:	10003526 	beq	r2,zero,3a74 <___vfprintf_internal_r+0x13fc>
    39a0:	d9402d17 	ldw	r5,180(sp)
    39a4:	d8c02917 	ldw	r3,164(sp)
    39a8:	d8002785 	stb	zero,158(sp)
    39ac:	28800104 	addi	r2,r5,4
    39b0:	2cc00017 	ldw	r19,0(r5)
    39b4:	002d883a 	mov	r22,zero
    39b8:	18003716 	blt	r3,zero,3a98 <___vfprintf_internal_r+0x1420>
    39bc:	00ffdfc4 	movi	r3,-129
    39c0:	d8802d15 	stw	r2,180(sp)
    39c4:	90e4703a 	and	r18,r18,r3
    39c8:	0039883a 	mov	fp,zero
    39cc:	983df326 	beq	r19,zero,319c <__alt_data_end+0x8000319c>
    39d0:	00800244 	movi	r2,9
    39d4:	14fc7b36 	bltu	r2,r19,2bc4 <__alt_data_end+0x80002bc4>
    39d8:	d8c02817 	ldw	r3,160(sp)
    39dc:	dc001dc4 	addi	r16,sp,119
    39e0:	9cc00c04 	addi	r19,r19,48
    39e4:	1c07c83a 	sub	r3,r3,r16
    39e8:	dcc01dc5 	stb	r19,119(sp)
    39ec:	d8c02e15 	stw	r3,184(sp)
    39f0:	003ce806 	br	2d94 <__alt_data_end+0x80002d94>
    39f4:	d8803317 	ldw	r2,204(sp)
    39f8:	143fffc4 	addi	r16,r2,-1
    39fc:	043f4d0e 	bge	zero,r16,3734 <__alt_data_end+0x80003734>
    3a00:	07000404 	movi	fp,16
    3a04:	e400810e 	bge	fp,r16,3c0c <___vfprintf_internal_r+0x1594>
    3a08:	01500034 	movhi	r5,16384
    3a0c:	29404484 	addi	r5,r5,274
    3a10:	d9402b15 	stw	r5,172(sp)
    3a14:	01c001c4 	movi	r7,7
    3a18:	dcc02c17 	ldw	r19,176(sp)
    3a1c:	00000306 	br	3a2c <___vfprintf_internal_r+0x13b4>
    3a20:	b5800204 	addi	r22,r22,8
    3a24:	843ffc04 	addi	r16,r16,-16
    3a28:	e4007b0e 	bge	fp,r16,3c18 <___vfprintf_internal_r+0x15a0>
    3a2c:	18c00404 	addi	r3,r3,16
    3a30:	8c400044 	addi	r17,r17,1
    3a34:	b5000015 	stw	r20,0(r22)
    3a38:	b7000115 	stw	fp,4(r22)
    3a3c:	d8c02015 	stw	r3,128(sp)
    3a40:	dc401f15 	stw	r17,124(sp)
    3a44:	3c7ff60e 	bge	r7,r17,3a20 <__alt_data_end+0x80003a20>
    3a48:	d9801e04 	addi	r6,sp,120
    3a4c:	b80b883a 	mov	r5,r23
    3a50:	9809883a 	mov	r4,r19
    3a54:	d9c03c15 	stw	r7,240(sp)
    3a58:	00092e80 	call	92e8 <__sprint_r>
    3a5c:	d9c03c17 	ldw	r7,240(sp)
    3a60:	103c071e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3a64:	d8c02017 	ldw	r3,128(sp)
    3a68:	dc401f17 	ldw	r17,124(sp)
    3a6c:	dd800404 	addi	r22,sp,16
    3a70:	003fec06 	br	3a24 <__alt_data_end+0x80003a24>
    3a74:	9080100c 	andi	r2,r18,64
    3a78:	d8002785 	stb	zero,158(sp)
    3a7c:	10010e26 	beq	r2,zero,3eb8 <___vfprintf_internal_r+0x1840>
    3a80:	d9002d17 	ldw	r4,180(sp)
    3a84:	d9402917 	ldw	r5,164(sp)
    3a88:	002d883a 	mov	r22,zero
    3a8c:	20800104 	addi	r2,r4,4
    3a90:	24c0000b 	ldhu	r19,0(r4)
    3a94:	283fc90e 	bge	r5,zero,39bc <__alt_data_end+0x800039bc>
    3a98:	d8802d15 	stw	r2,180(sp)
    3a9c:	0039883a 	mov	fp,zero
    3aa0:	9d84b03a 	or	r2,r19,r22
    3aa4:	103c461e 	bne	r2,zero,2bc0 <__alt_data_end+0x80002bc0>
    3aa8:	00800044 	movi	r2,1
    3aac:	003e6c06 	br	3460 <__alt_data_end+0x80003460>
    3ab0:	d9002c17 	ldw	r4,176(sp)
    3ab4:	d9801e04 	addi	r6,sp,120
    3ab8:	b80b883a 	mov	r5,r23
    3abc:	00092e80 	call	92e8 <__sprint_r>
    3ac0:	103bef1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3ac4:	d8c02017 	ldw	r3,128(sp)
    3ac8:	da000404 	addi	r8,sp,16
    3acc:	d9003217 	ldw	r4,200(sp)
    3ad0:	d8802617 	ldw	r2,152(sp)
    3ad4:	d9403317 	ldw	r5,204(sp)
    3ad8:	8123883a 	add	r17,r16,r4
    3adc:	11400216 	blt	r2,r5,3ae8 <___vfprintf_internal_r+0x1470>
    3ae0:	9100004c 	andi	r4,r18,1
    3ae4:	20000d26 	beq	r4,zero,3b1c <___vfprintf_internal_r+0x14a4>
    3ae8:	d9003717 	ldw	r4,220(sp)
    3aec:	d9403417 	ldw	r5,208(sp)
    3af0:	1907883a 	add	r3,r3,r4
    3af4:	d9001f17 	ldw	r4,124(sp)
    3af8:	41400015 	stw	r5,0(r8)
    3afc:	d9403717 	ldw	r5,220(sp)
    3b00:	21000044 	addi	r4,r4,1
    3b04:	d8c02015 	stw	r3,128(sp)
    3b08:	41400115 	stw	r5,4(r8)
    3b0c:	d9001f15 	stw	r4,124(sp)
    3b10:	014001c4 	movi	r5,7
    3b14:	2901e816 	blt	r5,r4,42b8 <___vfprintf_internal_r+0x1c40>
    3b18:	42000204 	addi	r8,r8,8
    3b1c:	d9003317 	ldw	r4,204(sp)
    3b20:	8121883a 	add	r16,r16,r4
    3b24:	2085c83a 	sub	r2,r4,r2
    3b28:	8461c83a 	sub	r16,r16,r17
    3b2c:	1400010e 	bge	r2,r16,3b34 <___vfprintf_internal_r+0x14bc>
    3b30:	1021883a 	mov	r16,r2
    3b34:	04000a0e 	bge	zero,r16,3b60 <___vfprintf_internal_r+0x14e8>
    3b38:	d9001f17 	ldw	r4,124(sp)
    3b3c:	1c07883a 	add	r3,r3,r16
    3b40:	44400015 	stw	r17,0(r8)
    3b44:	21000044 	addi	r4,r4,1
    3b48:	44000115 	stw	r16,4(r8)
    3b4c:	d8c02015 	stw	r3,128(sp)
    3b50:	d9001f15 	stw	r4,124(sp)
    3b54:	014001c4 	movi	r5,7
    3b58:	2901fb16 	blt	r5,r4,4348 <___vfprintf_internal_r+0x1cd0>
    3b5c:	42000204 	addi	r8,r8,8
    3b60:	8001f716 	blt	r16,zero,4340 <___vfprintf_internal_r+0x1cc8>
    3b64:	1421c83a 	sub	r16,r2,r16
    3b68:	043d380e 	bge	zero,r16,304c <__alt_data_end+0x8000304c>
    3b6c:	04400404 	movi	r17,16
    3b70:	d8801f17 	ldw	r2,124(sp)
    3b74:	8c3efb0e 	bge	r17,r16,3764 <__alt_data_end+0x80003764>
    3b78:	01500034 	movhi	r5,16384
    3b7c:	29404484 	addi	r5,r5,274
    3b80:	d9402b15 	stw	r5,172(sp)
    3b84:	058001c4 	movi	r22,7
    3b88:	dcc02c17 	ldw	r19,176(sp)
    3b8c:	00000306 	br	3b9c <___vfprintf_internal_r+0x1524>
    3b90:	42000204 	addi	r8,r8,8
    3b94:	843ffc04 	addi	r16,r16,-16
    3b98:	8c3ef50e 	bge	r17,r16,3770 <__alt_data_end+0x80003770>
    3b9c:	18c00404 	addi	r3,r3,16
    3ba0:	10800044 	addi	r2,r2,1
    3ba4:	45000015 	stw	r20,0(r8)
    3ba8:	44400115 	stw	r17,4(r8)
    3bac:	d8c02015 	stw	r3,128(sp)
    3bb0:	d8801f15 	stw	r2,124(sp)
    3bb4:	b0bff60e 	bge	r22,r2,3b90 <__alt_data_end+0x80003b90>
    3bb8:	d9801e04 	addi	r6,sp,120
    3bbc:	b80b883a 	mov	r5,r23
    3bc0:	9809883a 	mov	r4,r19
    3bc4:	00092e80 	call	92e8 <__sprint_r>
    3bc8:	103bad1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3bcc:	d8c02017 	ldw	r3,128(sp)
    3bd0:	d8801f17 	ldw	r2,124(sp)
    3bd4:	da000404 	addi	r8,sp,16
    3bd8:	003fee06 	br	3b94 <__alt_data_end+0x80003b94>
    3bdc:	9088703a 	and	r4,r18,r2
    3be0:	203eab1e 	bne	r4,zero,3690 <__alt_data_end+0x80003690>
    3be4:	dc401f17 	ldw	r17,124(sp)
    3be8:	40800115 	stw	r2,4(r8)
    3bec:	44000015 	stw	r16,0(r8)
    3bf0:	8c400044 	addi	r17,r17,1
    3bf4:	d8c02015 	stw	r3,128(sp)
    3bf8:	dc401f15 	stw	r17,124(sp)
    3bfc:	008001c4 	movi	r2,7
    3c00:	14400e16 	blt	r2,r17,3c3c <___vfprintf_internal_r+0x15c4>
    3c04:	45800204 	addi	r22,r8,8
    3c08:	003eca06 	br	3734 <__alt_data_end+0x80003734>
    3c0c:	01100034 	movhi	r4,16384
    3c10:	21004484 	addi	r4,r4,274
    3c14:	d9002b15 	stw	r4,172(sp)
    3c18:	d8802b17 	ldw	r2,172(sp)
    3c1c:	1c07883a 	add	r3,r3,r16
    3c20:	8c400044 	addi	r17,r17,1
    3c24:	b0800015 	stw	r2,0(r22)
    3c28:	b4000115 	stw	r16,4(r22)
    3c2c:	d8c02015 	stw	r3,128(sp)
    3c30:	dc401f15 	stw	r17,124(sp)
    3c34:	008001c4 	movi	r2,7
    3c38:	147ebd0e 	bge	r2,r17,3730 <__alt_data_end+0x80003730>
    3c3c:	d9002c17 	ldw	r4,176(sp)
    3c40:	d9801e04 	addi	r6,sp,120
    3c44:	b80b883a 	mov	r5,r23
    3c48:	00092e80 	call	92e8 <__sprint_r>
    3c4c:	103b8c1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3c50:	d8c02017 	ldw	r3,128(sp)
    3c54:	dc401f17 	ldw	r17,124(sp)
    3c58:	dd800404 	addi	r22,sp,16
    3c5c:	003eb506 	br	3734 <__alt_data_end+0x80003734>
    3c60:	d9002c17 	ldw	r4,176(sp)
    3c64:	d9801e04 	addi	r6,sp,120
    3c68:	b80b883a 	mov	r5,r23
    3c6c:	00092e80 	call	92e8 <__sprint_r>
    3c70:	103b831e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3c74:	d8c02017 	ldw	r3,128(sp)
    3c78:	dc401f17 	ldw	r17,124(sp)
    3c7c:	da000404 	addi	r8,sp,16
    3c80:	003e8d06 	br	36b8 <__alt_data_end+0x800036b8>
    3c84:	d9002c17 	ldw	r4,176(sp)
    3c88:	d9801e04 	addi	r6,sp,120
    3c8c:	b80b883a 	mov	r5,r23
    3c90:	00092e80 	call	92e8 <__sprint_r>
    3c94:	103b7a1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3c98:	d8c02017 	ldw	r3,128(sp)
    3c9c:	dc401f17 	ldw	r17,124(sp)
    3ca0:	dd800404 	addi	r22,sp,16
    3ca4:	003e8f06 	br	36e4 <__alt_data_end+0x800036e4>
    3ca8:	0027883a 	mov	r19,zero
    3cac:	003f4a06 	br	39d8 <__alt_data_end+0x800039d8>
    3cb0:	d9002c17 	ldw	r4,176(sp)
    3cb4:	d9801e04 	addi	r6,sp,120
    3cb8:	b80b883a 	mov	r5,r23
    3cbc:	00092e80 	call	92e8 <__sprint_r>
    3cc0:	103b6f1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3cc4:	d8c02017 	ldw	r3,128(sp)
    3cc8:	da000404 	addi	r8,sp,16
    3ccc:	003c9d06 	br	2f44 <__alt_data_end+0x80002f44>
    3cd0:	04e7c83a 	sub	r19,zero,r19
    3cd4:	9804c03a 	cmpne	r2,r19,zero
    3cd8:	05adc83a 	sub	r22,zero,r22
    3cdc:	b0adc83a 	sub	r22,r22,r2
    3ce0:	d8802917 	ldw	r2,164(sp)
    3ce4:	07000b44 	movi	fp,45
    3ce8:	df002785 	stb	fp,158(sp)
    3cec:	10017b16 	blt	r2,zero,42dc <___vfprintf_internal_r+0x1c64>
    3cf0:	00bfdfc4 	movi	r2,-129
    3cf4:	90a4703a 	and	r18,r18,r2
    3cf8:	003bb106 	br	2bc0 <__alt_data_end+0x80002bc0>
    3cfc:	d9003617 	ldw	r4,216(sp)
    3d00:	d9403817 	ldw	r5,224(sp)
    3d04:	da003d15 	stw	r8,244(sp)
    3d08:	00091780 	call	9178 <__fpclassifyd>
    3d0c:	da003d17 	ldw	r8,244(sp)
    3d10:	1000f026 	beq	r2,zero,40d4 <___vfprintf_internal_r+0x1a5c>
    3d14:	d9002917 	ldw	r4,164(sp)
    3d18:	05bff7c4 	movi	r22,-33
    3d1c:	00bfffc4 	movi	r2,-1
    3d20:	8dac703a 	and	r22,r17,r22
    3d24:	20820026 	beq	r4,r2,4528 <___vfprintf_internal_r+0x1eb0>
    3d28:	008011c4 	movi	r2,71
    3d2c:	b081f726 	beq	r22,r2,450c <___vfprintf_internal_r+0x1e94>
    3d30:	d9003817 	ldw	r4,224(sp)
    3d34:	90c04014 	ori	r3,r18,256
    3d38:	d8c02b15 	stw	r3,172(sp)
    3d3c:	20021516 	blt	r4,zero,4594 <___vfprintf_internal_r+0x1f1c>
    3d40:	dcc03817 	ldw	r19,224(sp)
    3d44:	d8002a05 	stb	zero,168(sp)
    3d48:	00801984 	movi	r2,102
    3d4c:	8881f926 	beq	r17,r2,4534 <___vfprintf_internal_r+0x1ebc>
    3d50:	00801184 	movi	r2,70
    3d54:	88821c26 	beq	r17,r2,45c8 <___vfprintf_internal_r+0x1f50>
    3d58:	00801144 	movi	r2,69
    3d5c:	b081ef26 	beq	r22,r2,451c <___vfprintf_internal_r+0x1ea4>
    3d60:	d8c02917 	ldw	r3,164(sp)
    3d64:	d8802104 	addi	r2,sp,132
    3d68:	d8800315 	stw	r2,12(sp)
    3d6c:	d9403617 	ldw	r5,216(sp)
    3d70:	d8802504 	addi	r2,sp,148
    3d74:	d9002c17 	ldw	r4,176(sp)
    3d78:	d8800215 	stw	r2,8(sp)
    3d7c:	d8802604 	addi	r2,sp,152
    3d80:	d8c00015 	stw	r3,0(sp)
    3d84:	d8800115 	stw	r2,4(sp)
    3d88:	01c00084 	movi	r7,2
    3d8c:	980d883a 	mov	r6,r19
    3d90:	d8c03c15 	stw	r3,240(sp)
    3d94:	da003d15 	stw	r8,244(sp)
    3d98:	0004eac0 	call	4eac <_dtoa_r>
    3d9c:	1021883a 	mov	r16,r2
    3da0:	008019c4 	movi	r2,103
    3da4:	d8c03c17 	ldw	r3,240(sp)
    3da8:	da003d17 	ldw	r8,244(sp)
    3dac:	88817126 	beq	r17,r2,4374 <___vfprintf_internal_r+0x1cfc>
    3db0:	008011c4 	movi	r2,71
    3db4:	88829226 	beq	r17,r2,4800 <___vfprintf_internal_r+0x2188>
    3db8:	80f9883a 	add	fp,r16,r3
    3dbc:	d9003617 	ldw	r4,216(sp)
    3dc0:	000d883a 	mov	r6,zero
    3dc4:	000f883a 	mov	r7,zero
    3dc8:	980b883a 	mov	r5,r19
    3dcc:	da003d15 	stw	r8,244(sp)
    3dd0:	000cbe40 	call	cbe4 <__eqdf2>
    3dd4:	da003d17 	ldw	r8,244(sp)
    3dd8:	10018d26 	beq	r2,zero,4410 <___vfprintf_internal_r+0x1d98>
    3ddc:	d8802117 	ldw	r2,132(sp)
    3de0:	1700062e 	bgeu	r2,fp,3dfc <___vfprintf_internal_r+0x1784>
    3de4:	01000c04 	movi	r4,48
    3de8:	10c00044 	addi	r3,r2,1
    3dec:	d8c02115 	stw	r3,132(sp)
    3df0:	11000005 	stb	r4,0(r2)
    3df4:	d8802117 	ldw	r2,132(sp)
    3df8:	173ffb36 	bltu	r2,fp,3de8 <__alt_data_end+0x80003de8>
    3dfc:	1405c83a 	sub	r2,r2,r16
    3e00:	d8803315 	stw	r2,204(sp)
    3e04:	008011c4 	movi	r2,71
    3e08:	b0817626 	beq	r22,r2,43e4 <___vfprintf_internal_r+0x1d6c>
    3e0c:	00801944 	movi	r2,101
    3e10:	1442810e 	bge	r2,r17,4818 <___vfprintf_internal_r+0x21a0>
    3e14:	d8c02617 	ldw	r3,152(sp)
    3e18:	00801984 	movi	r2,102
    3e1c:	d8c03215 	stw	r3,200(sp)
    3e20:	8881fe26 	beq	r17,r2,461c <___vfprintf_internal_r+0x1fa4>
    3e24:	d8c03217 	ldw	r3,200(sp)
    3e28:	d9003317 	ldw	r4,204(sp)
    3e2c:	1901dd16 	blt	r3,r4,45a4 <___vfprintf_internal_r+0x1f2c>
    3e30:	9480004c 	andi	r18,r18,1
    3e34:	90022b1e 	bne	r18,zero,46e4 <___vfprintf_internal_r+0x206c>
    3e38:	1805883a 	mov	r2,r3
    3e3c:	18028016 	blt	r3,zero,4840 <___vfprintf_internal_r+0x21c8>
    3e40:	d8c03217 	ldw	r3,200(sp)
    3e44:	044019c4 	movi	r17,103
    3e48:	d8c02e15 	stw	r3,184(sp)
    3e4c:	df002a07 	ldb	fp,168(sp)
    3e50:	e001531e 	bne	fp,zero,43a0 <___vfprintf_internal_r+0x1d28>
    3e54:	df002783 	ldbu	fp,158(sp)
    3e58:	d8802a15 	stw	r2,168(sp)
    3e5c:	dc802b17 	ldw	r18,172(sp)
    3e60:	d8002915 	stw	zero,164(sp)
    3e64:	003bd106 	br	2dac <__alt_data_end+0x80002dac>
    3e68:	d8802d17 	ldw	r2,180(sp)
    3e6c:	d8c02d17 	ldw	r3,180(sp)
    3e70:	d9002d17 	ldw	r4,180(sp)
    3e74:	10800017 	ldw	r2,0(r2)
    3e78:	18c00117 	ldw	r3,4(r3)
    3e7c:	21000204 	addi	r4,r4,8
    3e80:	d8803615 	stw	r2,216(sp)
    3e84:	d8c03815 	stw	r3,224(sp)
    3e88:	d9002d15 	stw	r4,180(sp)
    3e8c:	003b7506 	br	2c64 <__alt_data_end+0x80002c64>
    3e90:	ac400007 	ldb	r17,0(r21)
    3e94:	003a5906 	br	27fc <__alt_data_end+0x800027fc>
    3e98:	9080100c 	andi	r2,r18,64
    3e9c:	1000a826 	beq	r2,zero,4140 <___vfprintf_internal_r+0x1ac8>
    3ea0:	d9002d17 	ldw	r4,180(sp)
    3ea4:	002d883a 	mov	r22,zero
    3ea8:	24c0000b 	ldhu	r19,0(r4)
    3eac:	21000104 	addi	r4,r4,4
    3eb0:	d9002d15 	stw	r4,180(sp)
    3eb4:	003ccb06 	br	31e4 <__alt_data_end+0x800031e4>
    3eb8:	d8c02d17 	ldw	r3,180(sp)
    3ebc:	d9002917 	ldw	r4,164(sp)
    3ec0:	002d883a 	mov	r22,zero
    3ec4:	18800104 	addi	r2,r3,4
    3ec8:	1cc00017 	ldw	r19,0(r3)
    3ecc:	203ebb0e 	bge	r4,zero,39bc <__alt_data_end+0x800039bc>
    3ed0:	003ef106 	br	3a98 <__alt_data_end+0x80003a98>
    3ed4:	9080040c 	andi	r2,r18,16
    3ed8:	1000921e 	bne	r2,zero,4124 <___vfprintf_internal_r+0x1aac>
    3edc:	9480100c 	andi	r18,r18,64
    3ee0:	90013926 	beq	r18,zero,43c8 <___vfprintf_internal_r+0x1d50>
    3ee4:	d9002d17 	ldw	r4,180(sp)
    3ee8:	d9402f17 	ldw	r5,188(sp)
    3eec:	20800017 	ldw	r2,0(r4)
    3ef0:	21000104 	addi	r4,r4,4
    3ef4:	d9002d15 	stw	r4,180(sp)
    3ef8:	1140000d 	sth	r5,0(r2)
    3efc:	003a1606 	br	2758 <__alt_data_end+0x80002758>
    3f00:	9080100c 	andi	r2,r18,64
    3f04:	10008026 	beq	r2,zero,4108 <___vfprintf_internal_r+0x1a90>
    3f08:	d8c02d17 	ldw	r3,180(sp)
    3f0c:	1cc0000f 	ldh	r19,0(r3)
    3f10:	18c00104 	addi	r3,r3,4
    3f14:	d8c02d15 	stw	r3,180(sp)
    3f18:	982dd7fa 	srai	r22,r19,31
    3f1c:	b005883a 	mov	r2,r22
    3f20:	003b1f06 	br	2ba0 <__alt_data_end+0x80002ba0>
    3f24:	9080100c 	andi	r2,r18,64
    3f28:	d8002785 	stb	zero,158(sp)
    3f2c:	10008a1e 	bne	r2,zero,4158 <___vfprintf_internal_r+0x1ae0>
    3f30:	d9402d17 	ldw	r5,180(sp)
    3f34:	d8c02917 	ldw	r3,164(sp)
    3f38:	002d883a 	mov	r22,zero
    3f3c:	28800104 	addi	r2,r5,4
    3f40:	2cc00017 	ldw	r19,0(r5)
    3f44:	183e4b0e 	bge	r3,zero,3874 <__alt_data_end+0x80003874>
    3f48:	9d86b03a 	or	r3,r19,r22
    3f4c:	d8802d15 	stw	r2,180(sp)
    3f50:	183e4c1e 	bne	r3,zero,3884 <__alt_data_end+0x80003884>
    3f54:	0039883a 	mov	fp,zero
    3f58:	0005883a 	mov	r2,zero
    3f5c:	003d4006 	br	3460 <__alt_data_end+0x80003460>
    3f60:	01500034 	movhi	r5,16384
    3f64:	29404484 	addi	r5,r5,274
    3f68:	d9402b15 	stw	r5,172(sp)
    3f6c:	d9402b17 	ldw	r5,172(sp)
    3f70:	1c47883a 	add	r3,r3,r17
    3f74:	10800044 	addi	r2,r2,1
    3f78:	41400015 	stw	r5,0(r8)
    3f7c:	44400115 	stw	r17,4(r8)
    3f80:	d8c02015 	stw	r3,128(sp)
    3f84:	d8801f15 	stw	r2,124(sp)
    3f88:	010001c4 	movi	r4,7
    3f8c:	20bec816 	blt	r4,r2,3ab0 <__alt_data_end+0x80003ab0>
    3f90:	42000204 	addi	r8,r8,8
    3f94:	003ecd06 	br	3acc <__alt_data_end+0x80003acc>
    3f98:	d9002917 	ldw	r4,164(sp)
    3f9c:	d8002785 	stb	zero,158(sp)
    3fa0:	203d2d16 	blt	r4,zero,3458 <__alt_data_end+0x80003458>
    3fa4:	00bfdfc4 	movi	r2,-129
    3fa8:	90a4703a 	and	r18,r18,r2
    3fac:	003a9106 	br	29f4 <__alt_data_end+0x800029f4>
    3fb0:	01100034 	movhi	r4,16384
    3fb4:	21004484 	addi	r4,r4,274
    3fb8:	d9002b15 	stw	r4,172(sp)
    3fbc:	003c0c06 	br	2ff0 <__alt_data_end+0x80002ff0>
    3fc0:	d9002c17 	ldw	r4,176(sp)
    3fc4:	d9801e04 	addi	r6,sp,120
    3fc8:	b80b883a 	mov	r5,r23
    3fcc:	00092e80 	call	92e8 <__sprint_r>
    3fd0:	103aab1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    3fd4:	d8c02017 	ldw	r3,128(sp)
    3fd8:	da000404 	addi	r8,sp,16
    3fdc:	003d4106 	br	34e4 <__alt_data_end+0x800034e4>
    3fe0:	d8801f17 	ldw	r2,124(sp)
    3fe4:	01500034 	movhi	r5,16384
    3fe8:	01000044 	movi	r4,1
    3fec:	18c00044 	addi	r3,r3,1
    3ff0:	10800044 	addi	r2,r2,1
    3ff4:	29404404 	addi	r5,r5,272
    3ff8:	41000115 	stw	r4,4(r8)
    3ffc:	41400015 	stw	r5,0(r8)
    4000:	d8c02015 	stw	r3,128(sp)
    4004:	d8801f15 	stw	r2,124(sp)
    4008:	010001c4 	movi	r4,7
    400c:	20805c16 	blt	r4,r2,4180 <___vfprintf_internal_r+0x1b08>
    4010:	42000204 	addi	r8,r8,8
    4014:	8800041e 	bne	r17,zero,4028 <___vfprintf_internal_r+0x19b0>
    4018:	d8803317 	ldw	r2,204(sp)
    401c:	1000021e 	bne	r2,zero,4028 <___vfprintf_internal_r+0x19b0>
    4020:	9080004c 	andi	r2,r18,1
    4024:	103c0926 	beq	r2,zero,304c <__alt_data_end+0x8000304c>
    4028:	d9003717 	ldw	r4,220(sp)
    402c:	d8801f17 	ldw	r2,124(sp)
    4030:	d9403417 	ldw	r5,208(sp)
    4034:	20c7883a 	add	r3,r4,r3
    4038:	10800044 	addi	r2,r2,1
    403c:	41000115 	stw	r4,4(r8)
    4040:	41400015 	stw	r5,0(r8)
    4044:	d8c02015 	stw	r3,128(sp)
    4048:	d8801f15 	stw	r2,124(sp)
    404c:	010001c4 	movi	r4,7
    4050:	20812116 	blt	r4,r2,44d8 <___vfprintf_internal_r+0x1e60>
    4054:	42000204 	addi	r8,r8,8
    4058:	0463c83a 	sub	r17,zero,r17
    405c:	0440730e 	bge	zero,r17,422c <___vfprintf_internal_r+0x1bb4>
    4060:	05800404 	movi	r22,16
    4064:	b440860e 	bge	r22,r17,4280 <___vfprintf_internal_r+0x1c08>
    4068:	01500034 	movhi	r5,16384
    406c:	29404484 	addi	r5,r5,274
    4070:	d9402b15 	stw	r5,172(sp)
    4074:	070001c4 	movi	fp,7
    4078:	dcc02c17 	ldw	r19,176(sp)
    407c:	00000306 	br	408c <___vfprintf_internal_r+0x1a14>
    4080:	42000204 	addi	r8,r8,8
    4084:	8c7ffc04 	addi	r17,r17,-16
    4088:	b440800e 	bge	r22,r17,428c <___vfprintf_internal_r+0x1c14>
    408c:	18c00404 	addi	r3,r3,16
    4090:	10800044 	addi	r2,r2,1
    4094:	45000015 	stw	r20,0(r8)
    4098:	45800115 	stw	r22,4(r8)
    409c:	d8c02015 	stw	r3,128(sp)
    40a0:	d8801f15 	stw	r2,124(sp)
    40a4:	e0bff60e 	bge	fp,r2,4080 <__alt_data_end+0x80004080>
    40a8:	d9801e04 	addi	r6,sp,120
    40ac:	b80b883a 	mov	r5,r23
    40b0:	9809883a 	mov	r4,r19
    40b4:	00092e80 	call	92e8 <__sprint_r>
    40b8:	103a711e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    40bc:	d8c02017 	ldw	r3,128(sp)
    40c0:	d8801f17 	ldw	r2,124(sp)
    40c4:	da000404 	addi	r8,sp,16
    40c8:	003fee06 	br	4084 <__alt_data_end+0x80004084>
    40cc:	00bfffc4 	movi	r2,-1
    40d0:	003a6f06 	br	2a90 <__alt_data_end+0x80002a90>
    40d4:	008011c4 	movi	r2,71
    40d8:	1440b816 	blt	r2,r17,43bc <___vfprintf_internal_r+0x1d44>
    40dc:	04100034 	movhi	r16,16384
    40e0:	84003604 	addi	r16,r16,216
    40e4:	00c000c4 	movi	r3,3
    40e8:	00bfdfc4 	movi	r2,-129
    40ec:	d8c02a15 	stw	r3,168(sp)
    40f0:	90a4703a 	and	r18,r18,r2
    40f4:	df002783 	ldbu	fp,158(sp)
    40f8:	d8c02e15 	stw	r3,184(sp)
    40fc:	d8002915 	stw	zero,164(sp)
    4100:	d8003215 	stw	zero,200(sp)
    4104:	003b2906 	br	2dac <__alt_data_end+0x80002dac>
    4108:	d9002d17 	ldw	r4,180(sp)
    410c:	24c00017 	ldw	r19,0(r4)
    4110:	21000104 	addi	r4,r4,4
    4114:	d9002d15 	stw	r4,180(sp)
    4118:	982dd7fa 	srai	r22,r19,31
    411c:	b005883a 	mov	r2,r22
    4120:	003a9f06 	br	2ba0 <__alt_data_end+0x80002ba0>
    4124:	d9402d17 	ldw	r5,180(sp)
    4128:	d8c02f17 	ldw	r3,188(sp)
    412c:	28800017 	ldw	r2,0(r5)
    4130:	29400104 	addi	r5,r5,4
    4134:	d9402d15 	stw	r5,180(sp)
    4138:	10c00015 	stw	r3,0(r2)
    413c:	00398606 	br	2758 <__alt_data_end+0x80002758>
    4140:	d9402d17 	ldw	r5,180(sp)
    4144:	002d883a 	mov	r22,zero
    4148:	2cc00017 	ldw	r19,0(r5)
    414c:	29400104 	addi	r5,r5,4
    4150:	d9402d15 	stw	r5,180(sp)
    4154:	003c2306 	br	31e4 <__alt_data_end+0x800031e4>
    4158:	d8c02d17 	ldw	r3,180(sp)
    415c:	d9002917 	ldw	r4,164(sp)
    4160:	002d883a 	mov	r22,zero
    4164:	18800104 	addi	r2,r3,4
    4168:	1cc0000b 	ldhu	r19,0(r3)
    416c:	203dc10e 	bge	r4,zero,3874 <__alt_data_end+0x80003874>
    4170:	003f7506 	br	3f48 <__alt_data_end+0x80003f48>
    4174:	04100034 	movhi	r16,16384
    4178:	84003404 	addi	r16,r16,208
    417c:	003acc06 	br	2cb0 <__alt_data_end+0x80002cb0>
    4180:	d9002c17 	ldw	r4,176(sp)
    4184:	d9801e04 	addi	r6,sp,120
    4188:	b80b883a 	mov	r5,r23
    418c:	00092e80 	call	92e8 <__sprint_r>
    4190:	103a3b1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    4194:	dc402617 	ldw	r17,152(sp)
    4198:	d8c02017 	ldw	r3,128(sp)
    419c:	da000404 	addi	r8,sp,16
    41a0:	003f9c06 	br	4014 <__alt_data_end+0x80004014>
    41a4:	ac400043 	ldbu	r17,1(r21)
    41a8:	94800814 	ori	r18,r18,32
    41ac:	ad400044 	addi	r21,r21,1
    41b0:	8c403fcc 	andi	r17,r17,255
    41b4:	8c40201c 	xori	r17,r17,128
    41b8:	8c7fe004 	addi	r17,r17,-128
    41bc:	00398f06 	br	27fc <__alt_data_end+0x800027fc>
    41c0:	d8c02d15 	stw	r3,180(sp)
    41c4:	0039883a 	mov	fp,zero
    41c8:	003e3506 	br	3aa0 <__alt_data_end+0x80003aa0>
    41cc:	d9002c17 	ldw	r4,176(sp)
    41d0:	d9801e04 	addi	r6,sp,120
    41d4:	b80b883a 	mov	r5,r23
    41d8:	00092e80 	call	92e8 <__sprint_r>
    41dc:	103a281e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    41e0:	d8c02017 	ldw	r3,128(sp)
    41e4:	da000404 	addi	r8,sp,16
    41e8:	003cd006 	br	352c <__alt_data_end+0x8000352c>
    41ec:	8009883a 	mov	r4,r16
    41f0:	da003d15 	stw	r8,244(sp)
    41f4:	00025e00 	call	25e0 <strlen>
    41f8:	d8802e15 	stw	r2,184(sp)
    41fc:	da003d17 	ldw	r8,244(sp)
    4200:	103c340e 	bge	r2,zero,32d4 <__alt_data_end+0x800032d4>
    4204:	0005883a 	mov	r2,zero
    4208:	003c3206 	br	32d4 <__alt_data_end+0x800032d4>
    420c:	d9002c17 	ldw	r4,176(sp)
    4210:	d9801e04 	addi	r6,sp,120
    4214:	b80b883a 	mov	r5,r23
    4218:	00092e80 	call	92e8 <__sprint_r>
    421c:	103a181e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    4220:	d8c02017 	ldw	r3,128(sp)
    4224:	d8801f17 	ldw	r2,124(sp)
    4228:	da000404 	addi	r8,sp,16
    422c:	d9403317 	ldw	r5,204(sp)
    4230:	10800044 	addi	r2,r2,1
    4234:	44000015 	stw	r16,0(r8)
    4238:	28c7883a 	add	r3,r5,r3
    423c:	003b7d06 	br	3034 <__alt_data_end+0x80003034>
    4240:	01100034 	movhi	r4,16384
    4244:	21004884 	addi	r4,r4,290
    4248:	d9003515 	stw	r4,212(sp)
    424c:	003b1406 	br	2ea0 <__alt_data_end+0x80002ea0>
    4250:	013fffc4 	movi	r4,-1
    4254:	003a3506 	br	2b2c <__alt_data_end+0x80002b2c>
    4258:	0023883a 	mov	r17,zero
    425c:	003d9d06 	br	38d4 <__alt_data_end+0x800038d4>
    4260:	d9002c17 	ldw	r4,176(sp)
    4264:	d9801e04 	addi	r6,sp,120
    4268:	b80b883a 	mov	r5,r23
    426c:	00092e80 	call	92e8 <__sprint_r>
    4270:	103a031e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    4274:	d8c02017 	ldw	r3,128(sp)
    4278:	da000404 	addi	r8,sp,16
    427c:	003d9406 	br	38d0 <__alt_data_end+0x800038d0>
    4280:	01100034 	movhi	r4,16384
    4284:	21004484 	addi	r4,r4,274
    4288:	d9002b15 	stw	r4,172(sp)
    428c:	d9002b17 	ldw	r4,172(sp)
    4290:	1c47883a 	add	r3,r3,r17
    4294:	10800044 	addi	r2,r2,1
    4298:	41000015 	stw	r4,0(r8)
    429c:	44400115 	stw	r17,4(r8)
    42a0:	d8c02015 	stw	r3,128(sp)
    42a4:	d8801f15 	stw	r2,124(sp)
    42a8:	010001c4 	movi	r4,7
    42ac:	20bfd716 	blt	r4,r2,420c <__alt_data_end+0x8000420c>
    42b0:	42000204 	addi	r8,r8,8
    42b4:	003fdd06 	br	422c <__alt_data_end+0x8000422c>
    42b8:	d9002c17 	ldw	r4,176(sp)
    42bc:	d9801e04 	addi	r6,sp,120
    42c0:	b80b883a 	mov	r5,r23
    42c4:	00092e80 	call	92e8 <__sprint_r>
    42c8:	1039ed1e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    42cc:	d8802617 	ldw	r2,152(sp)
    42d0:	d8c02017 	ldw	r3,128(sp)
    42d4:	da000404 	addi	r8,sp,16
    42d8:	003e1006 	br	3b1c <__alt_data_end+0x80003b1c>
    42dc:	00800044 	movi	r2,1
    42e0:	10803fcc 	andi	r2,r2,255
    42e4:	00c00044 	movi	r3,1
    42e8:	10fa3526 	beq	r2,r3,2bc0 <__alt_data_end+0x80002bc0>
    42ec:	00c00084 	movi	r3,2
    42f0:	10fbcb26 	beq	r2,r3,3220 <__alt_data_end+0x80003220>
    42f4:	003a8f06 	br	2d34 <__alt_data_end+0x80002d34>
    42f8:	01100034 	movhi	r4,16384
    42fc:	21004884 	addi	r4,r4,290
    4300:	d9003515 	stw	r4,212(sp)
    4304:	003b7606 	br	30e0 <__alt_data_end+0x800030e0>
    4308:	d8802917 	ldw	r2,164(sp)
    430c:	00c00184 	movi	r3,6
    4310:	1880012e 	bgeu	r3,r2,4318 <___vfprintf_internal_r+0x1ca0>
    4314:	1805883a 	mov	r2,r3
    4318:	d8802e15 	stw	r2,184(sp)
    431c:	1000ef16 	blt	r2,zero,46dc <___vfprintf_internal_r+0x2064>
    4320:	04100034 	movhi	r16,16384
    4324:	d8802a15 	stw	r2,168(sp)
    4328:	dcc02d15 	stw	r19,180(sp)
    432c:	d8002915 	stw	zero,164(sp)
    4330:	d8003215 	stw	zero,200(sp)
    4334:	84004204 	addi	r16,r16,264
    4338:	0039883a 	mov	fp,zero
    433c:	003aa206 	br	2dc8 <__alt_data_end+0x80002dc8>
    4340:	0021883a 	mov	r16,zero
    4344:	003e0706 	br	3b64 <__alt_data_end+0x80003b64>
    4348:	d9002c17 	ldw	r4,176(sp)
    434c:	d9801e04 	addi	r6,sp,120
    4350:	b80b883a 	mov	r5,r23
    4354:	00092e80 	call	92e8 <__sprint_r>
    4358:	1039c91e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    435c:	d8802617 	ldw	r2,152(sp)
    4360:	d9403317 	ldw	r5,204(sp)
    4364:	d8c02017 	ldw	r3,128(sp)
    4368:	da000404 	addi	r8,sp,16
    436c:	2885c83a 	sub	r2,r5,r2
    4370:	003dfb06 	br	3b60 <__alt_data_end+0x80003b60>
    4374:	9080004c 	andi	r2,r18,1
    4378:	103e8f1e 	bne	r2,zero,3db8 <__alt_data_end+0x80003db8>
    437c:	d8802117 	ldw	r2,132(sp)
    4380:	003e9e06 	br	3dfc <__alt_data_end+0x80003dfc>
    4384:	1025883a 	mov	r18,r2
    4388:	0039883a 	mov	fp,zero
    438c:	00800084 	movi	r2,2
    4390:	003fd306 	br	42e0 <__alt_data_end+0x800042e0>
    4394:	07000b44 	movi	fp,45
    4398:	df002785 	stb	fp,158(sp)
    439c:	003a4006 	br	2ca0 <__alt_data_end+0x80002ca0>
    43a0:	00c00b44 	movi	r3,45
    43a4:	d8c02785 	stb	r3,158(sp)
    43a8:	d8802a15 	stw	r2,168(sp)
    43ac:	dc802b17 	ldw	r18,172(sp)
    43b0:	d8002915 	stw	zero,164(sp)
    43b4:	07000b44 	movi	fp,45
    43b8:	003a8006 	br	2dbc <__alt_data_end+0x80002dbc>
    43bc:	04100034 	movhi	r16,16384
    43c0:	84003704 	addi	r16,r16,220
    43c4:	003f4706 	br	40e4 <__alt_data_end+0x800040e4>
    43c8:	d8c02d17 	ldw	r3,180(sp)
    43cc:	d9002f17 	ldw	r4,188(sp)
    43d0:	18800017 	ldw	r2,0(r3)
    43d4:	18c00104 	addi	r3,r3,4
    43d8:	d8c02d15 	stw	r3,180(sp)
    43dc:	11000015 	stw	r4,0(r2)
    43e0:	0038dd06 	br	2758 <__alt_data_end+0x80002758>
    43e4:	dd802617 	ldw	r22,152(sp)
    43e8:	00bfff44 	movi	r2,-3
    43ec:	b0801c16 	blt	r22,r2,4460 <___vfprintf_internal_r+0x1de8>
    43f0:	d9402917 	ldw	r5,164(sp)
    43f4:	2d801a16 	blt	r5,r22,4460 <___vfprintf_internal_r+0x1de8>
    43f8:	dd803215 	stw	r22,200(sp)
    43fc:	003e8906 	br	3e24 <__alt_data_end+0x80003e24>
    4400:	01100034 	movhi	r4,16384
    4404:	21004484 	addi	r4,r4,274
    4408:	d9002b15 	stw	r4,172(sp)
    440c:	003c9106 	br	3654 <__alt_data_end+0x80003654>
    4410:	e005883a 	mov	r2,fp
    4414:	003e7906 	br	3dfc <__alt_data_end+0x80003dfc>
    4418:	d9402917 	ldw	r5,164(sp)
    441c:	df002783 	ldbu	fp,158(sp)
    4420:	dcc02d15 	stw	r19,180(sp)
    4424:	d9402a15 	stw	r5,168(sp)
    4428:	d9402e15 	stw	r5,184(sp)
    442c:	d8002915 	stw	zero,164(sp)
    4430:	d8003215 	stw	zero,200(sp)
    4434:	003a5d06 	br	2dac <__alt_data_end+0x80002dac>
    4438:	9080004c 	andi	r2,r18,1
    443c:	0039883a 	mov	fp,zero
    4440:	10000426 	beq	r2,zero,4454 <___vfprintf_internal_r+0x1ddc>
    4444:	00800c04 	movi	r2,48
    4448:	dc001dc4 	addi	r16,sp,119
    444c:	d8801dc5 	stb	r2,119(sp)
    4450:	003b8006 	br	3254 <__alt_data_end+0x80003254>
    4454:	d8002e15 	stw	zero,184(sp)
    4458:	dc001e04 	addi	r16,sp,120
    445c:	003a4d06 	br	2d94 <__alt_data_end+0x80002d94>
    4460:	8c7fff84 	addi	r17,r17,-2
    4464:	b5bfffc4 	addi	r22,r22,-1
    4468:	dd802615 	stw	r22,152(sp)
    446c:	dc4022c5 	stb	r17,139(sp)
    4470:	b000bf16 	blt	r22,zero,4770 <___vfprintf_internal_r+0x20f8>
    4474:	00800ac4 	movi	r2,43
    4478:	d8802305 	stb	r2,140(sp)
    447c:	00800244 	movi	r2,9
    4480:	15807016 	blt	r2,r22,4644 <___vfprintf_internal_r+0x1fcc>
    4484:	00800c04 	movi	r2,48
    4488:	b5800c04 	addi	r22,r22,48
    448c:	d8802345 	stb	r2,141(sp)
    4490:	dd802385 	stb	r22,142(sp)
    4494:	d88023c4 	addi	r2,sp,143
    4498:	df0022c4 	addi	fp,sp,139
    449c:	d8c03317 	ldw	r3,204(sp)
    44a0:	1739c83a 	sub	fp,r2,fp
    44a4:	d9003317 	ldw	r4,204(sp)
    44a8:	e0c7883a 	add	r3,fp,r3
    44ac:	df003a15 	stw	fp,232(sp)
    44b0:	d8c02e15 	stw	r3,184(sp)
    44b4:	00800044 	movi	r2,1
    44b8:	1100b30e 	bge	r2,r4,4788 <___vfprintf_internal_r+0x2110>
    44bc:	d8c02e17 	ldw	r3,184(sp)
    44c0:	18c00044 	addi	r3,r3,1
    44c4:	d8c02e15 	stw	r3,184(sp)
    44c8:	1805883a 	mov	r2,r3
    44cc:	1800ac16 	blt	r3,zero,4780 <___vfprintf_internal_r+0x2108>
    44d0:	d8003215 	stw	zero,200(sp)
    44d4:	003e5d06 	br	3e4c <__alt_data_end+0x80003e4c>
    44d8:	d9002c17 	ldw	r4,176(sp)
    44dc:	d9801e04 	addi	r6,sp,120
    44e0:	b80b883a 	mov	r5,r23
    44e4:	00092e80 	call	92e8 <__sprint_r>
    44e8:	1039651e 	bne	r2,zero,2a80 <__alt_data_end+0x80002a80>
    44ec:	dc402617 	ldw	r17,152(sp)
    44f0:	d8c02017 	ldw	r3,128(sp)
    44f4:	d8801f17 	ldw	r2,124(sp)
    44f8:	da000404 	addi	r8,sp,16
    44fc:	003ed606 	br	4058 <__alt_data_end+0x80004058>
    4500:	582b883a 	mov	r21,r11
    4504:	d8002915 	stw	zero,164(sp)
    4508:	0038bd06 	br	2800 <__alt_data_end+0x80002800>
    450c:	d8802917 	ldw	r2,164(sp)
    4510:	103e071e 	bne	r2,zero,3d30 <__alt_data_end+0x80003d30>
    4514:	dc002915 	stw	r16,164(sp)
    4518:	003e0506 	br	3d30 <__alt_data_end+0x80003d30>
    451c:	d9002917 	ldw	r4,164(sp)
    4520:	20c00044 	addi	r3,r4,1
    4524:	003e0f06 	br	3d64 <__alt_data_end+0x80003d64>
    4528:	01400184 	movi	r5,6
    452c:	d9402915 	stw	r5,164(sp)
    4530:	003dff06 	br	3d30 <__alt_data_end+0x80003d30>
    4534:	d8802104 	addi	r2,sp,132
    4538:	d8800315 	stw	r2,12(sp)
    453c:	d8802504 	addi	r2,sp,148
    4540:	d8800215 	stw	r2,8(sp)
    4544:	d8802604 	addi	r2,sp,152
    4548:	d8800115 	stw	r2,4(sp)
    454c:	d8802917 	ldw	r2,164(sp)
    4550:	d9403617 	ldw	r5,216(sp)
    4554:	d9002c17 	ldw	r4,176(sp)
    4558:	d8800015 	stw	r2,0(sp)
    455c:	01c000c4 	movi	r7,3
    4560:	980d883a 	mov	r6,r19
    4564:	da003d15 	stw	r8,244(sp)
    4568:	0004eac0 	call	4eac <_dtoa_r>
    456c:	d8c02917 	ldw	r3,164(sp)
    4570:	da003d17 	ldw	r8,244(sp)
    4574:	1021883a 	mov	r16,r2
    4578:	10f9883a 	add	fp,r2,r3
    457c:	81000007 	ldb	r4,0(r16)
    4580:	00800c04 	movi	r2,48
    4584:	20805e26 	beq	r4,r2,4700 <___vfprintf_internal_r+0x2088>
    4588:	d8c02617 	ldw	r3,152(sp)
    458c:	e0f9883a 	add	fp,fp,r3
    4590:	003e0a06 	br	3dbc <__alt_data_end+0x80003dbc>
    4594:	00c00b44 	movi	r3,45
    4598:	24e0003c 	xorhi	r19,r4,32768
    459c:	d8c02a05 	stb	r3,168(sp)
    45a0:	003de906 	br	3d48 <__alt_data_end+0x80003d48>
    45a4:	d8c03217 	ldw	r3,200(sp)
    45a8:	00c07a0e 	bge	zero,r3,4794 <___vfprintf_internal_r+0x211c>
    45ac:	00800044 	movi	r2,1
    45b0:	d9003317 	ldw	r4,204(sp)
    45b4:	1105883a 	add	r2,r2,r4
    45b8:	d8802e15 	stw	r2,184(sp)
    45bc:	10004e16 	blt	r2,zero,46f8 <___vfprintf_internal_r+0x2080>
    45c0:	044019c4 	movi	r17,103
    45c4:	003e2106 	br	3e4c <__alt_data_end+0x80003e4c>
    45c8:	d9002917 	ldw	r4,164(sp)
    45cc:	d8802104 	addi	r2,sp,132
    45d0:	d8800315 	stw	r2,12(sp)
    45d4:	d9000015 	stw	r4,0(sp)
    45d8:	d8802504 	addi	r2,sp,148
    45dc:	d9403617 	ldw	r5,216(sp)
    45e0:	d9002c17 	ldw	r4,176(sp)
    45e4:	d8800215 	stw	r2,8(sp)
    45e8:	d8802604 	addi	r2,sp,152
    45ec:	d8800115 	stw	r2,4(sp)
    45f0:	01c000c4 	movi	r7,3
    45f4:	980d883a 	mov	r6,r19
    45f8:	da003d15 	stw	r8,244(sp)
    45fc:	0004eac0 	call	4eac <_dtoa_r>
    4600:	d8c02917 	ldw	r3,164(sp)
    4604:	da003d17 	ldw	r8,244(sp)
    4608:	1021883a 	mov	r16,r2
    460c:	00801184 	movi	r2,70
    4610:	80f9883a 	add	fp,r16,r3
    4614:	88bfd926 	beq	r17,r2,457c <__alt_data_end+0x8000457c>
    4618:	003de806 	br	3dbc <__alt_data_end+0x80003dbc>
    461c:	d9002917 	ldw	r4,164(sp)
    4620:	00c04d0e 	bge	zero,r3,4758 <___vfprintf_internal_r+0x20e0>
    4624:	2000441e 	bne	r4,zero,4738 <___vfprintf_internal_r+0x20c0>
    4628:	9480004c 	andi	r18,r18,1
    462c:	9000421e 	bne	r18,zero,4738 <___vfprintf_internal_r+0x20c0>
    4630:	1805883a 	mov	r2,r3
    4634:	18007016 	blt	r3,zero,47f8 <___vfprintf_internal_r+0x2180>
    4638:	d8c03217 	ldw	r3,200(sp)
    463c:	d8c02e15 	stw	r3,184(sp)
    4640:	003e0206 	br	3e4c <__alt_data_end+0x80003e4c>
    4644:	df0022c4 	addi	fp,sp,139
    4648:	dc002915 	stw	r16,164(sp)
    464c:	4027883a 	mov	r19,r8
    4650:	e021883a 	mov	r16,fp
    4654:	b009883a 	mov	r4,r22
    4658:	01400284 	movi	r5,10
    465c:	000b9200 	call	b920 <__modsi3>
    4660:	10800c04 	addi	r2,r2,48
    4664:	843fffc4 	addi	r16,r16,-1
    4668:	b009883a 	mov	r4,r22
    466c:	01400284 	movi	r5,10
    4670:	80800005 	stb	r2,0(r16)
    4674:	000b89c0 	call	b89c <__divsi3>
    4678:	102d883a 	mov	r22,r2
    467c:	00800244 	movi	r2,9
    4680:	15bff416 	blt	r2,r22,4654 <__alt_data_end+0x80004654>
    4684:	9811883a 	mov	r8,r19
    4688:	b0800c04 	addi	r2,r22,48
    468c:	8027883a 	mov	r19,r16
    4690:	997fffc4 	addi	r5,r19,-1
    4694:	98bfffc5 	stb	r2,-1(r19)
    4698:	dc002917 	ldw	r16,164(sp)
    469c:	2f006a2e 	bgeu	r5,fp,4848 <___vfprintf_internal_r+0x21d0>
    46a0:	d9c02384 	addi	r7,sp,142
    46a4:	3ccfc83a 	sub	r7,r7,r19
    46a8:	d9002344 	addi	r4,sp,141
    46ac:	e1cf883a 	add	r7,fp,r7
    46b0:	00000106 	br	46b8 <___vfprintf_internal_r+0x2040>
    46b4:	28800003 	ldbu	r2,0(r5)
    46b8:	20800005 	stb	r2,0(r4)
    46bc:	21000044 	addi	r4,r4,1
    46c0:	29400044 	addi	r5,r5,1
    46c4:	393ffb1e 	bne	r7,r4,46b4 <__alt_data_end+0x800046b4>
    46c8:	d8802304 	addi	r2,sp,140
    46cc:	14c5c83a 	sub	r2,r2,r19
    46d0:	d8c02344 	addi	r3,sp,141
    46d4:	1885883a 	add	r2,r3,r2
    46d8:	003f7006 	br	449c <__alt_data_end+0x8000449c>
    46dc:	0005883a 	mov	r2,zero
    46e0:	003f0f06 	br	4320 <__alt_data_end+0x80004320>
    46e4:	d8c03217 	ldw	r3,200(sp)
    46e8:	18c00044 	addi	r3,r3,1
    46ec:	d8c02e15 	stw	r3,184(sp)
    46f0:	1805883a 	mov	r2,r3
    46f4:	183fb20e 	bge	r3,zero,45c0 <__alt_data_end+0x800045c0>
    46f8:	0005883a 	mov	r2,zero
    46fc:	003fb006 	br	45c0 <__alt_data_end+0x800045c0>
    4700:	d9003617 	ldw	r4,216(sp)
    4704:	000d883a 	mov	r6,zero
    4708:	000f883a 	mov	r7,zero
    470c:	980b883a 	mov	r5,r19
    4710:	d8c03c15 	stw	r3,240(sp)
    4714:	da003d15 	stw	r8,244(sp)
    4718:	000cbe40 	call	cbe4 <__eqdf2>
    471c:	d8c03c17 	ldw	r3,240(sp)
    4720:	da003d17 	ldw	r8,244(sp)
    4724:	103f9826 	beq	r2,zero,4588 <__alt_data_end+0x80004588>
    4728:	00800044 	movi	r2,1
    472c:	10c7c83a 	sub	r3,r2,r3
    4730:	d8c02615 	stw	r3,152(sp)
    4734:	003f9506 	br	458c <__alt_data_end+0x8000458c>
    4738:	d9002917 	ldw	r4,164(sp)
    473c:	d8c03217 	ldw	r3,200(sp)
    4740:	20800044 	addi	r2,r4,1
    4744:	1885883a 	add	r2,r3,r2
    4748:	d8802e15 	stw	r2,184(sp)
    474c:	103dbf0e 	bge	r2,zero,3e4c <__alt_data_end+0x80003e4c>
    4750:	0005883a 	mov	r2,zero
    4754:	003dbd06 	br	3e4c <__alt_data_end+0x80003e4c>
    4758:	2000211e 	bne	r4,zero,47e0 <___vfprintf_internal_r+0x2168>
    475c:	9480004c 	andi	r18,r18,1
    4760:	90001f1e 	bne	r18,zero,47e0 <___vfprintf_internal_r+0x2168>
    4764:	00800044 	movi	r2,1
    4768:	d8802e15 	stw	r2,184(sp)
    476c:	003db706 	br	3e4c <__alt_data_end+0x80003e4c>
    4770:	00800b44 	movi	r2,45
    4774:	05adc83a 	sub	r22,zero,r22
    4778:	d8802305 	stb	r2,140(sp)
    477c:	003f3f06 	br	447c <__alt_data_end+0x8000447c>
    4780:	0005883a 	mov	r2,zero
    4784:	003f5206 	br	44d0 <__alt_data_end+0x800044d0>
    4788:	90a4703a 	and	r18,r18,r2
    478c:	903f4e26 	beq	r18,zero,44c8 <__alt_data_end+0x800044c8>
    4790:	003f4a06 	br	44bc <__alt_data_end+0x800044bc>
    4794:	00800084 	movi	r2,2
    4798:	10c5c83a 	sub	r2,r2,r3
    479c:	003f8406 	br	45b0 <__alt_data_end+0x800045b0>
    47a0:	d8802d17 	ldw	r2,180(sp)
    47a4:	d9002d17 	ldw	r4,180(sp)
    47a8:	ac400043 	ldbu	r17,1(r21)
    47ac:	10800017 	ldw	r2,0(r2)
    47b0:	582b883a 	mov	r21,r11
    47b4:	d8802915 	stw	r2,164(sp)
    47b8:	20800104 	addi	r2,r4,4
    47bc:	d9002917 	ldw	r4,164(sp)
    47c0:	d8802d15 	stw	r2,180(sp)
    47c4:	203e7a0e 	bge	r4,zero,41b0 <__alt_data_end+0x800041b0>
    47c8:	8c403fcc 	andi	r17,r17,255
    47cc:	00bfffc4 	movi	r2,-1
    47d0:	8c40201c 	xori	r17,r17,128
    47d4:	d8802915 	stw	r2,164(sp)
    47d8:	8c7fe004 	addi	r17,r17,-128
    47dc:	00380706 	br	27fc <__alt_data_end+0x800027fc>
    47e0:	d8c02917 	ldw	r3,164(sp)
    47e4:	18c00084 	addi	r3,r3,2
    47e8:	d8c02e15 	stw	r3,184(sp)
    47ec:	1805883a 	mov	r2,r3
    47f0:	183d960e 	bge	r3,zero,3e4c <__alt_data_end+0x80003e4c>
    47f4:	003fd606 	br	4750 <__alt_data_end+0x80004750>
    47f8:	0005883a 	mov	r2,zero
    47fc:	003f8e06 	br	4638 <__alt_data_end+0x80004638>
    4800:	9080004c 	andi	r2,r18,1
    4804:	103f811e 	bne	r2,zero,460c <__alt_data_end+0x8000460c>
    4808:	d8802117 	ldw	r2,132(sp)
    480c:	1405c83a 	sub	r2,r2,r16
    4810:	d8803315 	stw	r2,204(sp)
    4814:	b47ef326 	beq	r22,r17,43e4 <__alt_data_end+0x800043e4>
    4818:	dd802617 	ldw	r22,152(sp)
    481c:	003f1106 	br	4464 <__alt_data_end+0x80004464>
    4820:	d9c02785 	stb	r7,158(sp)
    4824:	00390406 	br	2c38 <__alt_data_end+0x80002c38>
    4828:	d9c02785 	stb	r7,158(sp)
    482c:	0038d306 	br	2b7c <__alt_data_end+0x80002b7c>
    4830:	d9c02785 	stb	r7,158(sp)
    4834:	003a6106 	br	31bc <__alt_data_end+0x800031bc>
    4838:	d9c02785 	stb	r7,158(sp)
    483c:	003af806 	br	3420 <__alt_data_end+0x80003420>
    4840:	0005883a 	mov	r2,zero
    4844:	003d7e06 	br	3e40 <__alt_data_end+0x80003e40>
    4848:	d8802344 	addi	r2,sp,141
    484c:	003f1306 	br	449c <__alt_data_end+0x8000449c>
    4850:	d9c02785 	stb	r7,158(sp)
    4854:	00392306 	br	2ce4 <__alt_data_end+0x80002ce4>
    4858:	d9c02785 	stb	r7,158(sp)
    485c:	003aa906 	br	3304 <__alt_data_end+0x80003304>
    4860:	d9c02785 	stb	r7,158(sp)
    4864:	003a3d06 	br	315c <__alt_data_end+0x8000315c>
    4868:	d9c02785 	stb	r7,158(sp)
    486c:	003aca06 	br	3398 <__alt_data_end+0x80003398>

00004870 <__vfprintf_internal>:
    4870:	00900034 	movhi	r2,16384
    4874:	10885204 	addi	r2,r2,8520
    4878:	300f883a 	mov	r7,r6
    487c:	280d883a 	mov	r6,r5
    4880:	200b883a 	mov	r5,r4
    4884:	11000017 	ldw	r4,0(r2)
    4888:	00026781 	jmpi	2678 <___vfprintf_internal_r>

0000488c <__sbprintf>:
    488c:	2880030b 	ldhu	r2,12(r5)
    4890:	2ac01917 	ldw	r11,100(r5)
    4894:	2a80038b 	ldhu	r10,14(r5)
    4898:	2a400717 	ldw	r9,28(r5)
    489c:	2a000917 	ldw	r8,36(r5)
    48a0:	defee204 	addi	sp,sp,-1144
    48a4:	00c10004 	movi	r3,1024
    48a8:	dc011a15 	stw	r16,1128(sp)
    48ac:	10bfff4c 	andi	r2,r2,65533
    48b0:	2821883a 	mov	r16,r5
    48b4:	d8cb883a 	add	r5,sp,r3
    48b8:	dc811c15 	stw	r18,1136(sp)
    48bc:	dc411b15 	stw	r17,1132(sp)
    48c0:	dfc11d15 	stw	ra,1140(sp)
    48c4:	2025883a 	mov	r18,r4
    48c8:	d881030d 	sth	r2,1036(sp)
    48cc:	dac11915 	stw	r11,1124(sp)
    48d0:	da81038d 	sth	r10,1038(sp)
    48d4:	da410715 	stw	r9,1052(sp)
    48d8:	da010915 	stw	r8,1060(sp)
    48dc:	dec10015 	stw	sp,1024(sp)
    48e0:	dec10415 	stw	sp,1040(sp)
    48e4:	d8c10215 	stw	r3,1032(sp)
    48e8:	d8c10515 	stw	r3,1044(sp)
    48ec:	d8010615 	stw	zero,1048(sp)
    48f0:	00026780 	call	2678 <___vfprintf_internal_r>
    48f4:	1023883a 	mov	r17,r2
    48f8:	10000416 	blt	r2,zero,490c <__sbprintf+0x80>
    48fc:	d9410004 	addi	r5,sp,1024
    4900:	9009883a 	mov	r4,r18
    4904:	00067500 	call	6750 <_fflush_r>
    4908:	10000d1e 	bne	r2,zero,4940 <__sbprintf+0xb4>
    490c:	d881030b 	ldhu	r2,1036(sp)
    4910:	1080100c 	andi	r2,r2,64
    4914:	10000326 	beq	r2,zero,4924 <__sbprintf+0x98>
    4918:	8080030b 	ldhu	r2,12(r16)
    491c:	10801014 	ori	r2,r2,64
    4920:	8080030d 	sth	r2,12(r16)
    4924:	8805883a 	mov	r2,r17
    4928:	dfc11d17 	ldw	ra,1140(sp)
    492c:	dc811c17 	ldw	r18,1136(sp)
    4930:	dc411b17 	ldw	r17,1132(sp)
    4934:	dc011a17 	ldw	r16,1128(sp)
    4938:	dec11e04 	addi	sp,sp,1144
    493c:	f800283a 	ret
    4940:	047fffc4 	movi	r17,-1
    4944:	003ff106 	br	490c <__alt_data_end+0x8000490c>

00004948 <vfprintf>:
    4948:	00048701 	jmpi	4870 <__vfprintf_internal>

0000494c <__swbuf_r>:
    494c:	defffb04 	addi	sp,sp,-20
    4950:	dcc00315 	stw	r19,12(sp)
    4954:	dc800215 	stw	r18,8(sp)
    4958:	dc000015 	stw	r16,0(sp)
    495c:	dfc00415 	stw	ra,16(sp)
    4960:	dc400115 	stw	r17,4(sp)
    4964:	2025883a 	mov	r18,r4
    4968:	2827883a 	mov	r19,r5
    496c:	3021883a 	mov	r16,r6
    4970:	20000226 	beq	r4,zero,497c <__swbuf_r+0x30>
    4974:	20800e17 	ldw	r2,56(r4)
    4978:	10004226 	beq	r2,zero,4a84 <__swbuf_r+0x138>
    497c:	80800617 	ldw	r2,24(r16)
    4980:	8100030b 	ldhu	r4,12(r16)
    4984:	80800215 	stw	r2,8(r16)
    4988:	2080020c 	andi	r2,r4,8
    498c:	10003626 	beq	r2,zero,4a68 <__swbuf_r+0x11c>
    4990:	80c00417 	ldw	r3,16(r16)
    4994:	18003426 	beq	r3,zero,4a68 <__swbuf_r+0x11c>
    4998:	2088000c 	andi	r2,r4,8192
    499c:	9c403fcc 	andi	r17,r19,255
    49a0:	10001a26 	beq	r2,zero,4a0c <__swbuf_r+0xc0>
    49a4:	80800017 	ldw	r2,0(r16)
    49a8:	81000517 	ldw	r4,20(r16)
    49ac:	10c7c83a 	sub	r3,r2,r3
    49b0:	1900200e 	bge	r3,r4,4a34 <__swbuf_r+0xe8>
    49b4:	18c00044 	addi	r3,r3,1
    49b8:	81000217 	ldw	r4,8(r16)
    49bc:	11400044 	addi	r5,r2,1
    49c0:	81400015 	stw	r5,0(r16)
    49c4:	213fffc4 	addi	r4,r4,-1
    49c8:	81000215 	stw	r4,8(r16)
    49cc:	14c00005 	stb	r19,0(r2)
    49d0:	80800517 	ldw	r2,20(r16)
    49d4:	10c01e26 	beq	r2,r3,4a50 <__swbuf_r+0x104>
    49d8:	8080030b 	ldhu	r2,12(r16)
    49dc:	1080004c 	andi	r2,r2,1
    49e0:	10000226 	beq	r2,zero,49ec <__swbuf_r+0xa0>
    49e4:	00800284 	movi	r2,10
    49e8:	88801926 	beq	r17,r2,4a50 <__swbuf_r+0x104>
    49ec:	8805883a 	mov	r2,r17
    49f0:	dfc00417 	ldw	ra,16(sp)
    49f4:	dcc00317 	ldw	r19,12(sp)
    49f8:	dc800217 	ldw	r18,8(sp)
    49fc:	dc400117 	ldw	r17,4(sp)
    4a00:	dc000017 	ldw	r16,0(sp)
    4a04:	dec00504 	addi	sp,sp,20
    4a08:	f800283a 	ret
    4a0c:	81401917 	ldw	r5,100(r16)
    4a10:	00b7ffc4 	movi	r2,-8193
    4a14:	21080014 	ori	r4,r4,8192
    4a18:	2884703a 	and	r2,r5,r2
    4a1c:	80801915 	stw	r2,100(r16)
    4a20:	80800017 	ldw	r2,0(r16)
    4a24:	8100030d 	sth	r4,12(r16)
    4a28:	81000517 	ldw	r4,20(r16)
    4a2c:	10c7c83a 	sub	r3,r2,r3
    4a30:	193fe016 	blt	r3,r4,49b4 <__alt_data_end+0x800049b4>
    4a34:	800b883a 	mov	r5,r16
    4a38:	9009883a 	mov	r4,r18
    4a3c:	00067500 	call	6750 <_fflush_r>
    4a40:	1000071e 	bne	r2,zero,4a60 <__swbuf_r+0x114>
    4a44:	80800017 	ldw	r2,0(r16)
    4a48:	00c00044 	movi	r3,1
    4a4c:	003fda06 	br	49b8 <__alt_data_end+0x800049b8>
    4a50:	800b883a 	mov	r5,r16
    4a54:	9009883a 	mov	r4,r18
    4a58:	00067500 	call	6750 <_fflush_r>
    4a5c:	103fe326 	beq	r2,zero,49ec <__alt_data_end+0x800049ec>
    4a60:	00bfffc4 	movi	r2,-1
    4a64:	003fe206 	br	49f0 <__alt_data_end+0x800049f0>
    4a68:	800b883a 	mov	r5,r16
    4a6c:	9009883a 	mov	r4,r18
    4a70:	0004b040 	call	4b04 <__swsetup_r>
    4a74:	103ffa1e 	bne	r2,zero,4a60 <__alt_data_end+0x80004a60>
    4a78:	8100030b 	ldhu	r4,12(r16)
    4a7c:	80c00417 	ldw	r3,16(r16)
    4a80:	003fc506 	br	4998 <__alt_data_end+0x80004998>
    4a84:	0006b2c0 	call	6b2c <__sinit>
    4a88:	003fbc06 	br	497c <__alt_data_end+0x8000497c>

00004a8c <__swbuf>:
    4a8c:	00900034 	movhi	r2,16384
    4a90:	10885204 	addi	r2,r2,8520
    4a94:	280d883a 	mov	r6,r5
    4a98:	200b883a 	mov	r5,r4
    4a9c:	11000017 	ldw	r4,0(r2)
    4aa0:	000494c1 	jmpi	494c <__swbuf_r>

00004aa4 <_write_r>:
    4aa4:	defffd04 	addi	sp,sp,-12
    4aa8:	2805883a 	mov	r2,r5
    4aac:	dc000015 	stw	r16,0(sp)
    4ab0:	04100034 	movhi	r16,16384
    4ab4:	dc400115 	stw	r17,4(sp)
    4ab8:	300b883a 	mov	r5,r6
    4abc:	84086104 	addi	r16,r16,8580
    4ac0:	2023883a 	mov	r17,r4
    4ac4:	380d883a 	mov	r6,r7
    4ac8:	1009883a 	mov	r4,r2
    4acc:	dfc00215 	stw	ra,8(sp)
    4ad0:	80000015 	stw	zero,0(r16)
    4ad4:	000eb580 	call	eb58 <write>
    4ad8:	00ffffc4 	movi	r3,-1
    4adc:	10c00526 	beq	r2,r3,4af4 <_write_r+0x50>
    4ae0:	dfc00217 	ldw	ra,8(sp)
    4ae4:	dc400117 	ldw	r17,4(sp)
    4ae8:	dc000017 	ldw	r16,0(sp)
    4aec:	dec00304 	addi	sp,sp,12
    4af0:	f800283a 	ret
    4af4:	80c00017 	ldw	r3,0(r16)
    4af8:	183ff926 	beq	r3,zero,4ae0 <__alt_data_end+0x80004ae0>
    4afc:	88c00015 	stw	r3,0(r17)
    4b00:	003ff706 	br	4ae0 <__alt_data_end+0x80004ae0>

00004b04 <__swsetup_r>:
    4b04:	00900034 	movhi	r2,16384
    4b08:	defffd04 	addi	sp,sp,-12
    4b0c:	10885204 	addi	r2,r2,8520
    4b10:	dc400115 	stw	r17,4(sp)
    4b14:	2023883a 	mov	r17,r4
    4b18:	11000017 	ldw	r4,0(r2)
    4b1c:	dc000015 	stw	r16,0(sp)
    4b20:	dfc00215 	stw	ra,8(sp)
    4b24:	2821883a 	mov	r16,r5
    4b28:	20000226 	beq	r4,zero,4b34 <__swsetup_r+0x30>
    4b2c:	20800e17 	ldw	r2,56(r4)
    4b30:	10003126 	beq	r2,zero,4bf8 <__swsetup_r+0xf4>
    4b34:	8080030b 	ldhu	r2,12(r16)
    4b38:	10c0020c 	andi	r3,r2,8
    4b3c:	1009883a 	mov	r4,r2
    4b40:	18000f26 	beq	r3,zero,4b80 <__swsetup_r+0x7c>
    4b44:	80c00417 	ldw	r3,16(r16)
    4b48:	18001526 	beq	r3,zero,4ba0 <__swsetup_r+0x9c>
    4b4c:	1100004c 	andi	r4,r2,1
    4b50:	20001c1e 	bne	r4,zero,4bc4 <__swsetup_r+0xc0>
    4b54:	1080008c 	andi	r2,r2,2
    4b58:	1000291e 	bne	r2,zero,4c00 <__swsetup_r+0xfc>
    4b5c:	80800517 	ldw	r2,20(r16)
    4b60:	80800215 	stw	r2,8(r16)
    4b64:	18001c26 	beq	r3,zero,4bd8 <__swsetup_r+0xd4>
    4b68:	0005883a 	mov	r2,zero
    4b6c:	dfc00217 	ldw	ra,8(sp)
    4b70:	dc400117 	ldw	r17,4(sp)
    4b74:	dc000017 	ldw	r16,0(sp)
    4b78:	dec00304 	addi	sp,sp,12
    4b7c:	f800283a 	ret
    4b80:	2080040c 	andi	r2,r4,16
    4b84:	10002e26 	beq	r2,zero,4c40 <__swsetup_r+0x13c>
    4b88:	2080010c 	andi	r2,r4,4
    4b8c:	10001e1e 	bne	r2,zero,4c08 <__swsetup_r+0x104>
    4b90:	80c00417 	ldw	r3,16(r16)
    4b94:	20800214 	ori	r2,r4,8
    4b98:	8080030d 	sth	r2,12(r16)
    4b9c:	183feb1e 	bne	r3,zero,4b4c <__alt_data_end+0x80004b4c>
    4ba0:	1100a00c 	andi	r4,r2,640
    4ba4:	01408004 	movi	r5,512
    4ba8:	217fe826 	beq	r4,r5,4b4c <__alt_data_end+0x80004b4c>
    4bac:	800b883a 	mov	r5,r16
    4bb0:	8809883a 	mov	r4,r17
    4bb4:	00012e40 	call	12e4 <__smakebuf_r>
    4bb8:	8080030b 	ldhu	r2,12(r16)
    4bbc:	80c00417 	ldw	r3,16(r16)
    4bc0:	003fe206 	br	4b4c <__alt_data_end+0x80004b4c>
    4bc4:	80800517 	ldw	r2,20(r16)
    4bc8:	80000215 	stw	zero,8(r16)
    4bcc:	0085c83a 	sub	r2,zero,r2
    4bd0:	80800615 	stw	r2,24(r16)
    4bd4:	183fe41e 	bne	r3,zero,4b68 <__alt_data_end+0x80004b68>
    4bd8:	80c0030b 	ldhu	r3,12(r16)
    4bdc:	0005883a 	mov	r2,zero
    4be0:	1900200c 	andi	r4,r3,128
    4be4:	203fe126 	beq	r4,zero,4b6c <__alt_data_end+0x80004b6c>
    4be8:	18c01014 	ori	r3,r3,64
    4bec:	80c0030d 	sth	r3,12(r16)
    4bf0:	00bfffc4 	movi	r2,-1
    4bf4:	003fdd06 	br	4b6c <__alt_data_end+0x80004b6c>
    4bf8:	0006b2c0 	call	6b2c <__sinit>
    4bfc:	003fcd06 	br	4b34 <__alt_data_end+0x80004b34>
    4c00:	0005883a 	mov	r2,zero
    4c04:	003fd606 	br	4b60 <__alt_data_end+0x80004b60>
    4c08:	81400c17 	ldw	r5,48(r16)
    4c0c:	28000626 	beq	r5,zero,4c28 <__swsetup_r+0x124>
    4c10:	80801004 	addi	r2,r16,64
    4c14:	28800326 	beq	r5,r2,4c24 <__swsetup_r+0x120>
    4c18:	8809883a 	mov	r4,r17
    4c1c:	0006d4c0 	call	6d4c <_free_r>
    4c20:	8100030b 	ldhu	r4,12(r16)
    4c24:	80000c15 	stw	zero,48(r16)
    4c28:	80c00417 	ldw	r3,16(r16)
    4c2c:	00bff6c4 	movi	r2,-37
    4c30:	1108703a 	and	r4,r2,r4
    4c34:	80000115 	stw	zero,4(r16)
    4c38:	80c00015 	stw	r3,0(r16)
    4c3c:	003fd506 	br	4b94 <__alt_data_end+0x80004b94>
    4c40:	00800244 	movi	r2,9
    4c44:	88800015 	stw	r2,0(r17)
    4c48:	20801014 	ori	r2,r4,64
    4c4c:	8080030d 	sth	r2,12(r16)
    4c50:	00bfffc4 	movi	r2,-1
    4c54:	003fc506 	br	4b6c <__alt_data_end+0x80004b6c>

00004c58 <_close_r>:
    4c58:	defffd04 	addi	sp,sp,-12
    4c5c:	dc000015 	stw	r16,0(sp)
    4c60:	04100034 	movhi	r16,16384
    4c64:	dc400115 	stw	r17,4(sp)
    4c68:	84086104 	addi	r16,r16,8580
    4c6c:	2023883a 	mov	r17,r4
    4c70:	2809883a 	mov	r4,r5
    4c74:	dfc00215 	stw	ra,8(sp)
    4c78:	80000015 	stw	zero,0(r16)
    4c7c:	000e0f40 	call	e0f4 <close>
    4c80:	00ffffc4 	movi	r3,-1
    4c84:	10c00526 	beq	r2,r3,4c9c <_close_r+0x44>
    4c88:	dfc00217 	ldw	ra,8(sp)
    4c8c:	dc400117 	ldw	r17,4(sp)
    4c90:	dc000017 	ldw	r16,0(sp)
    4c94:	dec00304 	addi	sp,sp,12
    4c98:	f800283a 	ret
    4c9c:	80c00017 	ldw	r3,0(r16)
    4ca0:	183ff926 	beq	r3,zero,4c88 <__alt_data_end+0x80004c88>
    4ca4:	88c00015 	stw	r3,0(r17)
    4ca8:	003ff706 	br	4c88 <__alt_data_end+0x80004c88>

00004cac <quorem>:
    4cac:	defff704 	addi	sp,sp,-36
    4cb0:	dc800215 	stw	r18,8(sp)
    4cb4:	20800417 	ldw	r2,16(r4)
    4cb8:	2c800417 	ldw	r18,16(r5)
    4cbc:	dfc00815 	stw	ra,32(sp)
    4cc0:	ddc00715 	stw	r23,28(sp)
    4cc4:	dd800615 	stw	r22,24(sp)
    4cc8:	dd400515 	stw	r21,20(sp)
    4ccc:	dd000415 	stw	r20,16(sp)
    4cd0:	dcc00315 	stw	r19,12(sp)
    4cd4:	dc400115 	stw	r17,4(sp)
    4cd8:	dc000015 	stw	r16,0(sp)
    4cdc:	14807116 	blt	r2,r18,4ea4 <quorem+0x1f8>
    4ce0:	94bfffc4 	addi	r18,r18,-1
    4ce4:	94ad883a 	add	r22,r18,r18
    4ce8:	b5ad883a 	add	r22,r22,r22
    4cec:	2c400504 	addi	r17,r5,20
    4cf0:	8da9883a 	add	r20,r17,r22
    4cf4:	25400504 	addi	r21,r4,20
    4cf8:	282f883a 	mov	r23,r5
    4cfc:	adad883a 	add	r22,r21,r22
    4d00:	a1400017 	ldw	r5,0(r20)
    4d04:	2021883a 	mov	r16,r4
    4d08:	b1000017 	ldw	r4,0(r22)
    4d0c:	29400044 	addi	r5,r5,1
    4d10:	000b9940 	call	b994 <__udivsi3>
    4d14:	1027883a 	mov	r19,r2
    4d18:	10002c26 	beq	r2,zero,4dcc <quorem+0x120>
    4d1c:	a813883a 	mov	r9,r21
    4d20:	880b883a 	mov	r5,r17
    4d24:	0009883a 	mov	r4,zero
    4d28:	000d883a 	mov	r6,zero
    4d2c:	2a000017 	ldw	r8,0(r5)
    4d30:	49c00017 	ldw	r7,0(r9)
    4d34:	29400104 	addi	r5,r5,4
    4d38:	40bfffcc 	andi	r2,r8,65535
    4d3c:	14c5383a 	mul	r2,r2,r19
    4d40:	4010d43a 	srli	r8,r8,16
    4d44:	38ffffcc 	andi	r3,r7,65535
    4d48:	1105883a 	add	r2,r2,r4
    4d4c:	1008d43a 	srli	r4,r2,16
    4d50:	44d1383a 	mul	r8,r8,r19
    4d54:	198d883a 	add	r6,r3,r6
    4d58:	10ffffcc 	andi	r3,r2,65535
    4d5c:	30c7c83a 	sub	r3,r6,r3
    4d60:	380ed43a 	srli	r7,r7,16
    4d64:	4105883a 	add	r2,r8,r4
    4d68:	180dd43a 	srai	r6,r3,16
    4d6c:	113fffcc 	andi	r4,r2,65535
    4d70:	390fc83a 	sub	r7,r7,r4
    4d74:	398d883a 	add	r6,r7,r6
    4d78:	300e943a 	slli	r7,r6,16
    4d7c:	18ffffcc 	andi	r3,r3,65535
    4d80:	1008d43a 	srli	r4,r2,16
    4d84:	38ceb03a 	or	r7,r7,r3
    4d88:	49c00015 	stw	r7,0(r9)
    4d8c:	300dd43a 	srai	r6,r6,16
    4d90:	4a400104 	addi	r9,r9,4
    4d94:	a17fe52e 	bgeu	r20,r5,4d2c <__alt_data_end+0x80004d2c>
    4d98:	b0800017 	ldw	r2,0(r22)
    4d9c:	10000b1e 	bne	r2,zero,4dcc <quorem+0x120>
    4da0:	b0bfff04 	addi	r2,r22,-4
    4da4:	a880082e 	bgeu	r21,r2,4dc8 <quorem+0x11c>
    4da8:	b0ffff17 	ldw	r3,-4(r22)
    4dac:	18000326 	beq	r3,zero,4dbc <quorem+0x110>
    4db0:	00000506 	br	4dc8 <quorem+0x11c>
    4db4:	10c00017 	ldw	r3,0(r2)
    4db8:	1800031e 	bne	r3,zero,4dc8 <quorem+0x11c>
    4dbc:	10bfff04 	addi	r2,r2,-4
    4dc0:	94bfffc4 	addi	r18,r18,-1
    4dc4:	a8bffb36 	bltu	r21,r2,4db4 <__alt_data_end+0x80004db4>
    4dc8:	84800415 	stw	r18,16(r16)
    4dcc:	b80b883a 	mov	r5,r23
    4dd0:	8009883a 	mov	r4,r16
    4dd4:	00084800 	call	8480 <__mcmp>
    4dd8:	10002616 	blt	r2,zero,4e74 <quorem+0x1c8>
    4ddc:	9cc00044 	addi	r19,r19,1
    4de0:	a805883a 	mov	r2,r21
    4de4:	000b883a 	mov	r5,zero
    4de8:	11000017 	ldw	r4,0(r2)
    4dec:	89800017 	ldw	r6,0(r17)
    4df0:	10800104 	addi	r2,r2,4
    4df4:	20ffffcc 	andi	r3,r4,65535
    4df8:	194b883a 	add	r5,r3,r5
    4dfc:	30ffffcc 	andi	r3,r6,65535
    4e00:	28c7c83a 	sub	r3,r5,r3
    4e04:	300cd43a 	srli	r6,r6,16
    4e08:	2008d43a 	srli	r4,r4,16
    4e0c:	180bd43a 	srai	r5,r3,16
    4e10:	18ffffcc 	andi	r3,r3,65535
    4e14:	2189c83a 	sub	r4,r4,r6
    4e18:	2149883a 	add	r4,r4,r5
    4e1c:	200c943a 	slli	r6,r4,16
    4e20:	8c400104 	addi	r17,r17,4
    4e24:	200bd43a 	srai	r5,r4,16
    4e28:	30c6b03a 	or	r3,r6,r3
    4e2c:	10ffff15 	stw	r3,-4(r2)
    4e30:	a47fed2e 	bgeu	r20,r17,4de8 <__alt_data_end+0x80004de8>
    4e34:	9485883a 	add	r2,r18,r18
    4e38:	1085883a 	add	r2,r2,r2
    4e3c:	a887883a 	add	r3,r21,r2
    4e40:	18800017 	ldw	r2,0(r3)
    4e44:	10000b1e 	bne	r2,zero,4e74 <quorem+0x1c8>
    4e48:	18bfff04 	addi	r2,r3,-4
    4e4c:	a880082e 	bgeu	r21,r2,4e70 <quorem+0x1c4>
    4e50:	18ffff17 	ldw	r3,-4(r3)
    4e54:	18000326 	beq	r3,zero,4e64 <quorem+0x1b8>
    4e58:	00000506 	br	4e70 <quorem+0x1c4>
    4e5c:	10c00017 	ldw	r3,0(r2)
    4e60:	1800031e 	bne	r3,zero,4e70 <quorem+0x1c4>
    4e64:	10bfff04 	addi	r2,r2,-4
    4e68:	94bfffc4 	addi	r18,r18,-1
    4e6c:	a8bffb36 	bltu	r21,r2,4e5c <__alt_data_end+0x80004e5c>
    4e70:	84800415 	stw	r18,16(r16)
    4e74:	9805883a 	mov	r2,r19
    4e78:	dfc00817 	ldw	ra,32(sp)
    4e7c:	ddc00717 	ldw	r23,28(sp)
    4e80:	dd800617 	ldw	r22,24(sp)
    4e84:	dd400517 	ldw	r21,20(sp)
    4e88:	dd000417 	ldw	r20,16(sp)
    4e8c:	dcc00317 	ldw	r19,12(sp)
    4e90:	dc800217 	ldw	r18,8(sp)
    4e94:	dc400117 	ldw	r17,4(sp)
    4e98:	dc000017 	ldw	r16,0(sp)
    4e9c:	dec00904 	addi	sp,sp,36
    4ea0:	f800283a 	ret
    4ea4:	0005883a 	mov	r2,zero
    4ea8:	003ff306 	br	4e78 <__alt_data_end+0x80004e78>

00004eac <_dtoa_r>:
    4eac:	20801017 	ldw	r2,64(r4)
    4eb0:	deffde04 	addi	sp,sp,-136
    4eb4:	df002015 	stw	fp,128(sp)
    4eb8:	dcc01b15 	stw	r19,108(sp)
    4ebc:	dc801a15 	stw	r18,104(sp)
    4ec0:	dc401915 	stw	r17,100(sp)
    4ec4:	dc001815 	stw	r16,96(sp)
    4ec8:	dfc02115 	stw	ra,132(sp)
    4ecc:	ddc01f15 	stw	r23,124(sp)
    4ed0:	dd801e15 	stw	r22,120(sp)
    4ed4:	dd401d15 	stw	r21,116(sp)
    4ed8:	dd001c15 	stw	r20,112(sp)
    4edc:	d9c00315 	stw	r7,12(sp)
    4ee0:	2039883a 	mov	fp,r4
    4ee4:	3023883a 	mov	r17,r6
    4ee8:	2825883a 	mov	r18,r5
    4eec:	dc002417 	ldw	r16,144(sp)
    4ef0:	3027883a 	mov	r19,r6
    4ef4:	10000826 	beq	r2,zero,4f18 <_dtoa_r+0x6c>
    4ef8:	21801117 	ldw	r6,68(r4)
    4efc:	00c00044 	movi	r3,1
    4f00:	100b883a 	mov	r5,r2
    4f04:	1986983a 	sll	r3,r3,r6
    4f08:	11800115 	stw	r6,4(r2)
    4f0c:	10c00215 	stw	r3,8(r2)
    4f10:	0007c600 	call	7c60 <_Bfree>
    4f14:	e0001015 	stw	zero,64(fp)
    4f18:	88002e16 	blt	r17,zero,4fd4 <_dtoa_r+0x128>
    4f1c:	80000015 	stw	zero,0(r16)
    4f20:	889ffc2c 	andhi	r2,r17,32752
    4f24:	00dffc34 	movhi	r3,32752
    4f28:	10c01c26 	beq	r2,r3,4f9c <_dtoa_r+0xf0>
    4f2c:	000d883a 	mov	r6,zero
    4f30:	000f883a 	mov	r7,zero
    4f34:	9009883a 	mov	r4,r18
    4f38:	980b883a 	mov	r5,r19
    4f3c:	000cbe40 	call	cbe4 <__eqdf2>
    4f40:	10002b1e 	bne	r2,zero,4ff0 <_dtoa_r+0x144>
    4f44:	d9c02317 	ldw	r7,140(sp)
    4f48:	00800044 	movi	r2,1
    4f4c:	38800015 	stw	r2,0(r7)
    4f50:	d8802517 	ldw	r2,148(sp)
    4f54:	10019e26 	beq	r2,zero,55d0 <_dtoa_r+0x724>
    4f58:	d8c02517 	ldw	r3,148(sp)
    4f5c:	00900034 	movhi	r2,16384
    4f60:	10804444 	addi	r2,r2,273
    4f64:	18800015 	stw	r2,0(r3)
    4f68:	10bfffc4 	addi	r2,r2,-1
    4f6c:	dfc02117 	ldw	ra,132(sp)
    4f70:	df002017 	ldw	fp,128(sp)
    4f74:	ddc01f17 	ldw	r23,124(sp)
    4f78:	dd801e17 	ldw	r22,120(sp)
    4f7c:	dd401d17 	ldw	r21,116(sp)
    4f80:	dd001c17 	ldw	r20,112(sp)
    4f84:	dcc01b17 	ldw	r19,108(sp)
    4f88:	dc801a17 	ldw	r18,104(sp)
    4f8c:	dc401917 	ldw	r17,100(sp)
    4f90:	dc001817 	ldw	r16,96(sp)
    4f94:	dec02204 	addi	sp,sp,136
    4f98:	f800283a 	ret
    4f9c:	d8c02317 	ldw	r3,140(sp)
    4fa0:	0089c3c4 	movi	r2,9999
    4fa4:	18800015 	stw	r2,0(r3)
    4fa8:	90017726 	beq	r18,zero,5588 <_dtoa_r+0x6dc>
    4fac:	00900034 	movhi	r2,16384
    4fb0:	10805004 	addi	r2,r2,320
    4fb4:	d9002517 	ldw	r4,148(sp)
    4fb8:	203fec26 	beq	r4,zero,4f6c <__alt_data_end+0x80004f6c>
    4fbc:	10c000c7 	ldb	r3,3(r2)
    4fc0:	1801781e 	bne	r3,zero,55a4 <_dtoa_r+0x6f8>
    4fc4:	10c000c4 	addi	r3,r2,3
    4fc8:	d9802517 	ldw	r6,148(sp)
    4fcc:	30c00015 	stw	r3,0(r6)
    4fd0:	003fe606 	br	4f6c <__alt_data_end+0x80004f6c>
    4fd4:	04e00034 	movhi	r19,32768
    4fd8:	9cffffc4 	addi	r19,r19,-1
    4fdc:	00800044 	movi	r2,1
    4fe0:	8ce6703a 	and	r19,r17,r19
    4fe4:	80800015 	stw	r2,0(r16)
    4fe8:	9823883a 	mov	r17,r19
    4fec:	003fcc06 	br	4f20 <__alt_data_end+0x80004f20>
    4ff0:	d8800204 	addi	r2,sp,8
    4ff4:	d8800015 	stw	r2,0(sp)
    4ff8:	d9c00104 	addi	r7,sp,4
    4ffc:	900b883a 	mov	r5,r18
    5000:	980d883a 	mov	r6,r19
    5004:	e009883a 	mov	r4,fp
    5008:	8820d53a 	srli	r16,r17,20
    500c:	000884c0 	call	884c <__d2b>
    5010:	d8800915 	stw	r2,36(sp)
    5014:	8001651e 	bne	r16,zero,55ac <_dtoa_r+0x700>
    5018:	dd800217 	ldw	r22,8(sp)
    501c:	dc000117 	ldw	r16,4(sp)
    5020:	00800804 	movi	r2,32
    5024:	b421883a 	add	r16,r22,r16
    5028:	80c10c84 	addi	r3,r16,1074
    502c:	10c2d10e 	bge	r2,r3,5b74 <_dtoa_r+0xcc8>
    5030:	00801004 	movi	r2,64
    5034:	81010484 	addi	r4,r16,1042
    5038:	10c7c83a 	sub	r3,r2,r3
    503c:	9108d83a 	srl	r4,r18,r4
    5040:	88e2983a 	sll	r17,r17,r3
    5044:	2448b03a 	or	r4,r4,r17
    5048:	000dfac0 	call	dfac <__floatunsidf>
    504c:	017f8434 	movhi	r5,65040
    5050:	01800044 	movi	r6,1
    5054:	1009883a 	mov	r4,r2
    5058:	194b883a 	add	r5,r3,r5
    505c:	843fffc4 	addi	r16,r16,-1
    5060:	d9801115 	stw	r6,68(sp)
    5064:	000d883a 	mov	r6,zero
    5068:	01cffe34 	movhi	r7,16376
    506c:	000d5540 	call	d554 <__subdf3>
    5070:	0198dbf4 	movhi	r6,25455
    5074:	01cff4f4 	movhi	r7,16339
    5078:	3190d844 	addi	r6,r6,17249
    507c:	39e1e9c4 	addi	r7,r7,-30809
    5080:	1009883a 	mov	r4,r2
    5084:	180b883a 	mov	r5,r3
    5088:	000ce3c0 	call	ce3c <__muldf3>
    508c:	01a2d874 	movhi	r6,35681
    5090:	01cff1f4 	movhi	r7,16327
    5094:	31b22cc4 	addi	r6,r6,-14157
    5098:	39e28a04 	addi	r7,r7,-30168
    509c:	180b883a 	mov	r5,r3
    50a0:	1009883a 	mov	r4,r2
    50a4:	000ba500 	call	ba50 <__adddf3>
    50a8:	8009883a 	mov	r4,r16
    50ac:	1029883a 	mov	r20,r2
    50b0:	1823883a 	mov	r17,r3
    50b4:	000ded00 	call	ded0 <__floatsidf>
    50b8:	019427f4 	movhi	r6,20639
    50bc:	01cff4f4 	movhi	r7,16339
    50c0:	319e7ec4 	addi	r6,r6,31227
    50c4:	39d104c4 	addi	r7,r7,17427
    50c8:	1009883a 	mov	r4,r2
    50cc:	180b883a 	mov	r5,r3
    50d0:	000ce3c0 	call	ce3c <__muldf3>
    50d4:	100d883a 	mov	r6,r2
    50d8:	180f883a 	mov	r7,r3
    50dc:	a009883a 	mov	r4,r20
    50e0:	880b883a 	mov	r5,r17
    50e4:	000ba500 	call	ba50 <__adddf3>
    50e8:	1009883a 	mov	r4,r2
    50ec:	180b883a 	mov	r5,r3
    50f0:	1029883a 	mov	r20,r2
    50f4:	1823883a 	mov	r17,r3
    50f8:	000de500 	call	de50 <__fixdfsi>
    50fc:	000d883a 	mov	r6,zero
    5100:	000f883a 	mov	r7,zero
    5104:	a009883a 	mov	r4,r20
    5108:	880b883a 	mov	r5,r17
    510c:	d8800515 	stw	r2,20(sp)
    5110:	000cd480 	call	cd48 <__ledf2>
    5114:	10028716 	blt	r2,zero,5b34 <_dtoa_r+0xc88>
    5118:	d8c00517 	ldw	r3,20(sp)
    511c:	00800584 	movi	r2,22
    5120:	10c27536 	bltu	r2,r3,5af8 <_dtoa_r+0xc4c>
    5124:	180490fa 	slli	r2,r3,3
    5128:	00d00034 	movhi	r3,16384
    512c:	18c06b04 	addi	r3,r3,428
    5130:	1885883a 	add	r2,r3,r2
    5134:	11000017 	ldw	r4,0(r2)
    5138:	11400117 	ldw	r5,4(r2)
    513c:	900d883a 	mov	r6,r18
    5140:	980f883a 	mov	r7,r19
    5144:	000cc6c0 	call	cc6c <__gedf2>
    5148:	00828d0e 	bge	zero,r2,5b80 <_dtoa_r+0xcd4>
    514c:	d9000517 	ldw	r4,20(sp)
    5150:	d8000e15 	stw	zero,56(sp)
    5154:	213fffc4 	addi	r4,r4,-1
    5158:	d9000515 	stw	r4,20(sp)
    515c:	b42dc83a 	sub	r22,r22,r16
    5160:	b5bfffc4 	addi	r22,r22,-1
    5164:	b0026f16 	blt	r22,zero,5b24 <_dtoa_r+0xc78>
    5168:	d8000815 	stw	zero,32(sp)
    516c:	d9c00517 	ldw	r7,20(sp)
    5170:	38026416 	blt	r7,zero,5b04 <_dtoa_r+0xc58>
    5174:	b1ed883a 	add	r22,r22,r7
    5178:	d9c00d15 	stw	r7,52(sp)
    517c:	d8000a15 	stw	zero,40(sp)
    5180:	d9800317 	ldw	r6,12(sp)
    5184:	00800244 	movi	r2,9
    5188:	11811436 	bltu	r2,r6,55dc <_dtoa_r+0x730>
    518c:	00800144 	movi	r2,5
    5190:	1184e10e 	bge	r2,r6,6518 <_dtoa_r+0x166c>
    5194:	31bfff04 	addi	r6,r6,-4
    5198:	d9800315 	stw	r6,12(sp)
    519c:	0023883a 	mov	r17,zero
    51a0:	d9800317 	ldw	r6,12(sp)
    51a4:	008000c4 	movi	r2,3
    51a8:	30836726 	beq	r6,r2,5f48 <_dtoa_r+0x109c>
    51ac:	1183410e 	bge	r2,r6,5eb4 <_dtoa_r+0x1008>
    51b0:	d9c00317 	ldw	r7,12(sp)
    51b4:	00800104 	movi	r2,4
    51b8:	38827c26 	beq	r7,r2,5bac <_dtoa_r+0xd00>
    51bc:	00800144 	movi	r2,5
    51c0:	3884c41e 	bne	r7,r2,64d4 <_dtoa_r+0x1628>
    51c4:	00800044 	movi	r2,1
    51c8:	d8800b15 	stw	r2,44(sp)
    51cc:	d8c00517 	ldw	r3,20(sp)
    51d0:	d9002217 	ldw	r4,136(sp)
    51d4:	1907883a 	add	r3,r3,r4
    51d8:	19800044 	addi	r6,r3,1
    51dc:	d8c00c15 	stw	r3,48(sp)
    51e0:	d9800615 	stw	r6,24(sp)
    51e4:	0183a40e 	bge	zero,r6,6078 <_dtoa_r+0x11cc>
    51e8:	d9800617 	ldw	r6,24(sp)
    51ec:	3021883a 	mov	r16,r6
    51f0:	e0001115 	stw	zero,68(fp)
    51f4:	008005c4 	movi	r2,23
    51f8:	1184c92e 	bgeu	r2,r6,6520 <_dtoa_r+0x1674>
    51fc:	00c00044 	movi	r3,1
    5200:	00800104 	movi	r2,4
    5204:	1085883a 	add	r2,r2,r2
    5208:	11000504 	addi	r4,r2,20
    520c:	180b883a 	mov	r5,r3
    5210:	18c00044 	addi	r3,r3,1
    5214:	313ffb2e 	bgeu	r6,r4,5204 <__alt_data_end+0x80005204>
    5218:	e1401115 	stw	r5,68(fp)
    521c:	e009883a 	mov	r4,fp
    5220:	0007bb80 	call	7bb8 <_Balloc>
    5224:	d8800715 	stw	r2,28(sp)
    5228:	e0801015 	stw	r2,64(fp)
    522c:	00800384 	movi	r2,14
    5230:	1400f736 	bltu	r2,r16,5610 <_dtoa_r+0x764>
    5234:	8800f626 	beq	r17,zero,5610 <_dtoa_r+0x764>
    5238:	d9c00517 	ldw	r7,20(sp)
    523c:	01c39a0e 	bge	zero,r7,60a8 <_dtoa_r+0x11fc>
    5240:	388003cc 	andi	r2,r7,15
    5244:	100490fa 	slli	r2,r2,3
    5248:	382bd13a 	srai	r21,r7,4
    524c:	00d00034 	movhi	r3,16384
    5250:	18c06b04 	addi	r3,r3,428
    5254:	1885883a 	add	r2,r3,r2
    5258:	a8c0040c 	andi	r3,r21,16
    525c:	12400017 	ldw	r9,0(r2)
    5260:	12000117 	ldw	r8,4(r2)
    5264:	18037926 	beq	r3,zero,604c <_dtoa_r+0x11a0>
    5268:	00900034 	movhi	r2,16384
    526c:	10806104 	addi	r2,r2,388
    5270:	11800817 	ldw	r6,32(r2)
    5274:	11c00917 	ldw	r7,36(r2)
    5278:	9009883a 	mov	r4,r18
    527c:	980b883a 	mov	r5,r19
    5280:	da001715 	stw	r8,92(sp)
    5284:	da401615 	stw	r9,88(sp)
    5288:	000c2fc0 	call	c2fc <__divdf3>
    528c:	da001717 	ldw	r8,92(sp)
    5290:	da401617 	ldw	r9,88(sp)
    5294:	ad4003cc 	andi	r21,r21,15
    5298:	040000c4 	movi	r16,3
    529c:	1023883a 	mov	r17,r2
    52a0:	1829883a 	mov	r20,r3
    52a4:	a8001126 	beq	r21,zero,52ec <_dtoa_r+0x440>
    52a8:	05d00034 	movhi	r23,16384
    52ac:	bdc06104 	addi	r23,r23,388
    52b0:	4805883a 	mov	r2,r9
    52b4:	4007883a 	mov	r3,r8
    52b8:	a980004c 	andi	r6,r21,1
    52bc:	1009883a 	mov	r4,r2
    52c0:	a82bd07a 	srai	r21,r21,1
    52c4:	180b883a 	mov	r5,r3
    52c8:	30000426 	beq	r6,zero,52dc <_dtoa_r+0x430>
    52cc:	b9800017 	ldw	r6,0(r23)
    52d0:	b9c00117 	ldw	r7,4(r23)
    52d4:	84000044 	addi	r16,r16,1
    52d8:	000ce3c0 	call	ce3c <__muldf3>
    52dc:	bdc00204 	addi	r23,r23,8
    52e0:	a83ff51e 	bne	r21,zero,52b8 <__alt_data_end+0x800052b8>
    52e4:	1013883a 	mov	r9,r2
    52e8:	1811883a 	mov	r8,r3
    52ec:	480d883a 	mov	r6,r9
    52f0:	400f883a 	mov	r7,r8
    52f4:	8809883a 	mov	r4,r17
    52f8:	a00b883a 	mov	r5,r20
    52fc:	000c2fc0 	call	c2fc <__divdf3>
    5300:	d8800f15 	stw	r2,60(sp)
    5304:	d8c01015 	stw	r3,64(sp)
    5308:	d8c00e17 	ldw	r3,56(sp)
    530c:	18000626 	beq	r3,zero,5328 <_dtoa_r+0x47c>
    5310:	d9000f17 	ldw	r4,60(sp)
    5314:	d9401017 	ldw	r5,64(sp)
    5318:	000d883a 	mov	r6,zero
    531c:	01cffc34 	movhi	r7,16368
    5320:	000cd480 	call	cd48 <__ledf2>
    5324:	10040b16 	blt	r2,zero,6354 <_dtoa_r+0x14a8>
    5328:	8009883a 	mov	r4,r16
    532c:	000ded00 	call	ded0 <__floatsidf>
    5330:	d9800f17 	ldw	r6,60(sp)
    5334:	d9c01017 	ldw	r7,64(sp)
    5338:	1009883a 	mov	r4,r2
    533c:	180b883a 	mov	r5,r3
    5340:	000ce3c0 	call	ce3c <__muldf3>
    5344:	000d883a 	mov	r6,zero
    5348:	01d00734 	movhi	r7,16412
    534c:	1009883a 	mov	r4,r2
    5350:	180b883a 	mov	r5,r3
    5354:	000ba500 	call	ba50 <__adddf3>
    5358:	1021883a 	mov	r16,r2
    535c:	d8800617 	ldw	r2,24(sp)
    5360:	047f3034 	movhi	r17,64704
    5364:	1c63883a 	add	r17,r3,r17
    5368:	10031826 	beq	r2,zero,5fcc <_dtoa_r+0x1120>
    536c:	d8c00517 	ldw	r3,20(sp)
    5370:	db000617 	ldw	r12,24(sp)
    5374:	d8c01315 	stw	r3,76(sp)
    5378:	d9000b17 	ldw	r4,44(sp)
    537c:	20038f26 	beq	r4,zero,61bc <_dtoa_r+0x1310>
    5380:	60bfffc4 	addi	r2,r12,-1
    5384:	100490fa 	slli	r2,r2,3
    5388:	00d00034 	movhi	r3,16384
    538c:	18c06b04 	addi	r3,r3,428
    5390:	1885883a 	add	r2,r3,r2
    5394:	11800017 	ldw	r6,0(r2)
    5398:	11c00117 	ldw	r7,4(r2)
    539c:	d8800717 	ldw	r2,28(sp)
    53a0:	0009883a 	mov	r4,zero
    53a4:	014ff834 	movhi	r5,16352
    53a8:	db001615 	stw	r12,88(sp)
    53ac:	15c00044 	addi	r23,r2,1
    53b0:	000c2fc0 	call	c2fc <__divdf3>
    53b4:	800d883a 	mov	r6,r16
    53b8:	880f883a 	mov	r7,r17
    53bc:	1009883a 	mov	r4,r2
    53c0:	180b883a 	mov	r5,r3
    53c4:	000d5540 	call	d554 <__subdf3>
    53c8:	d9401017 	ldw	r5,64(sp)
    53cc:	d9000f17 	ldw	r4,60(sp)
    53d0:	102b883a 	mov	r21,r2
    53d4:	d8c01215 	stw	r3,72(sp)
    53d8:	000de500 	call	de50 <__fixdfsi>
    53dc:	1009883a 	mov	r4,r2
    53e0:	1029883a 	mov	r20,r2
    53e4:	000ded00 	call	ded0 <__floatsidf>
    53e8:	d9000f17 	ldw	r4,60(sp)
    53ec:	d9401017 	ldw	r5,64(sp)
    53f0:	100d883a 	mov	r6,r2
    53f4:	180f883a 	mov	r7,r3
    53f8:	000d5540 	call	d554 <__subdf3>
    53fc:	1823883a 	mov	r17,r3
    5400:	d8c00717 	ldw	r3,28(sp)
    5404:	d9401217 	ldw	r5,72(sp)
    5408:	a2000c04 	addi	r8,r20,48
    540c:	1021883a 	mov	r16,r2
    5410:	1a000005 	stb	r8,0(r3)
    5414:	800d883a 	mov	r6,r16
    5418:	880f883a 	mov	r7,r17
    541c:	a809883a 	mov	r4,r21
    5420:	4029883a 	mov	r20,r8
    5424:	000cc6c0 	call	cc6c <__gedf2>
    5428:	00841d16 	blt	zero,r2,64a0 <_dtoa_r+0x15f4>
    542c:	800d883a 	mov	r6,r16
    5430:	880f883a 	mov	r7,r17
    5434:	0009883a 	mov	r4,zero
    5438:	014ffc34 	movhi	r5,16368
    543c:	000d5540 	call	d554 <__subdf3>
    5440:	d9401217 	ldw	r5,72(sp)
    5444:	100d883a 	mov	r6,r2
    5448:	180f883a 	mov	r7,r3
    544c:	a809883a 	mov	r4,r21
    5450:	000cc6c0 	call	cc6c <__gedf2>
    5454:	db001617 	ldw	r12,88(sp)
    5458:	00840e16 	blt	zero,r2,6494 <_dtoa_r+0x15e8>
    545c:	00800044 	movi	r2,1
    5460:	13006b0e 	bge	r2,r12,5610 <_dtoa_r+0x764>
    5464:	d9000717 	ldw	r4,28(sp)
    5468:	dd800f15 	stw	r22,60(sp)
    546c:	dcc01015 	stw	r19,64(sp)
    5470:	2319883a 	add	r12,r4,r12
    5474:	dcc01217 	ldw	r19,72(sp)
    5478:	602d883a 	mov	r22,r12
    547c:	dc801215 	stw	r18,72(sp)
    5480:	b825883a 	mov	r18,r23
    5484:	00000906 	br	54ac <_dtoa_r+0x600>
    5488:	000d5540 	call	d554 <__subdf3>
    548c:	a80d883a 	mov	r6,r21
    5490:	980f883a 	mov	r7,r19
    5494:	1009883a 	mov	r4,r2
    5498:	180b883a 	mov	r5,r3
    549c:	000cd480 	call	cd48 <__ledf2>
    54a0:	1003e816 	blt	r2,zero,6444 <_dtoa_r+0x1598>
    54a4:	b825883a 	mov	r18,r23
    54a8:	bd83e926 	beq	r23,r22,6450 <_dtoa_r+0x15a4>
    54ac:	a809883a 	mov	r4,r21
    54b0:	980b883a 	mov	r5,r19
    54b4:	000d883a 	mov	r6,zero
    54b8:	01d00934 	movhi	r7,16420
    54bc:	000ce3c0 	call	ce3c <__muldf3>
    54c0:	000d883a 	mov	r6,zero
    54c4:	01d00934 	movhi	r7,16420
    54c8:	8009883a 	mov	r4,r16
    54cc:	880b883a 	mov	r5,r17
    54d0:	102b883a 	mov	r21,r2
    54d4:	1827883a 	mov	r19,r3
    54d8:	000ce3c0 	call	ce3c <__muldf3>
    54dc:	180b883a 	mov	r5,r3
    54e0:	1009883a 	mov	r4,r2
    54e4:	1821883a 	mov	r16,r3
    54e8:	1023883a 	mov	r17,r2
    54ec:	000de500 	call	de50 <__fixdfsi>
    54f0:	1009883a 	mov	r4,r2
    54f4:	1029883a 	mov	r20,r2
    54f8:	000ded00 	call	ded0 <__floatsidf>
    54fc:	8809883a 	mov	r4,r17
    5500:	800b883a 	mov	r5,r16
    5504:	100d883a 	mov	r6,r2
    5508:	180f883a 	mov	r7,r3
    550c:	000d5540 	call	d554 <__subdf3>
    5510:	a5000c04 	addi	r20,r20,48
    5514:	a80d883a 	mov	r6,r21
    5518:	980f883a 	mov	r7,r19
    551c:	1009883a 	mov	r4,r2
    5520:	180b883a 	mov	r5,r3
    5524:	95000005 	stb	r20,0(r18)
    5528:	1021883a 	mov	r16,r2
    552c:	1823883a 	mov	r17,r3
    5530:	000cd480 	call	cd48 <__ledf2>
    5534:	bdc00044 	addi	r23,r23,1
    5538:	800d883a 	mov	r6,r16
    553c:	880f883a 	mov	r7,r17
    5540:	0009883a 	mov	r4,zero
    5544:	014ffc34 	movhi	r5,16368
    5548:	103fcf0e 	bge	r2,zero,5488 <__alt_data_end+0x80005488>
    554c:	d8c01317 	ldw	r3,76(sp)
    5550:	d8c00515 	stw	r3,20(sp)
    5554:	d9400917 	ldw	r5,36(sp)
    5558:	e009883a 	mov	r4,fp
    555c:	0007c600 	call	7c60 <_Bfree>
    5560:	d9000517 	ldw	r4,20(sp)
    5564:	d9802317 	ldw	r6,140(sp)
    5568:	d9c02517 	ldw	r7,148(sp)
    556c:	b8000005 	stb	zero,0(r23)
    5570:	20800044 	addi	r2,r4,1
    5574:	30800015 	stw	r2,0(r6)
    5578:	3802aa26 	beq	r7,zero,6024 <_dtoa_r+0x1178>
    557c:	3dc00015 	stw	r23,0(r7)
    5580:	d8800717 	ldw	r2,28(sp)
    5584:	003e7906 	br	4f6c <__alt_data_end+0x80004f6c>
    5588:	00800434 	movhi	r2,16
    558c:	10bfffc4 	addi	r2,r2,-1
    5590:	88a2703a 	and	r17,r17,r2
    5594:	883e851e 	bne	r17,zero,4fac <__alt_data_end+0x80004fac>
    5598:	00900034 	movhi	r2,16384
    559c:	10804d04 	addi	r2,r2,308
    55a0:	003e8406 	br	4fb4 <__alt_data_end+0x80004fb4>
    55a4:	10c00204 	addi	r3,r2,8
    55a8:	003e8706 	br	4fc8 <__alt_data_end+0x80004fc8>
    55ac:	01400434 	movhi	r5,16
    55b0:	297fffc4 	addi	r5,r5,-1
    55b4:	994a703a 	and	r5,r19,r5
    55b8:	9009883a 	mov	r4,r18
    55bc:	843f0044 	addi	r16,r16,-1023
    55c0:	294ffc34 	orhi	r5,r5,16368
    55c4:	dd800217 	ldw	r22,8(sp)
    55c8:	d8001115 	stw	zero,68(sp)
    55cc:	003ea506 	br	5064 <__alt_data_end+0x80005064>
    55d0:	00900034 	movhi	r2,16384
    55d4:	10804404 	addi	r2,r2,272
    55d8:	003e6406 	br	4f6c <__alt_data_end+0x80004f6c>
    55dc:	e0001115 	stw	zero,68(fp)
    55e0:	000b883a 	mov	r5,zero
    55e4:	e009883a 	mov	r4,fp
    55e8:	0007bb80 	call	7bb8 <_Balloc>
    55ec:	01bfffc4 	movi	r6,-1
    55f0:	01c00044 	movi	r7,1
    55f4:	d8800715 	stw	r2,28(sp)
    55f8:	d9800c15 	stw	r6,48(sp)
    55fc:	e0801015 	stw	r2,64(fp)
    5600:	d8000315 	stw	zero,12(sp)
    5604:	d9c00b15 	stw	r7,44(sp)
    5608:	d9800615 	stw	r6,24(sp)
    560c:	d8002215 	stw	zero,136(sp)
    5610:	d8800117 	ldw	r2,4(sp)
    5614:	10008916 	blt	r2,zero,583c <_dtoa_r+0x990>
    5618:	d9000517 	ldw	r4,20(sp)
    561c:	00c00384 	movi	r3,14
    5620:	19008616 	blt	r3,r4,583c <_dtoa_r+0x990>
    5624:	200490fa 	slli	r2,r4,3
    5628:	00d00034 	movhi	r3,16384
    562c:	d9802217 	ldw	r6,136(sp)
    5630:	18c06b04 	addi	r3,r3,428
    5634:	1885883a 	add	r2,r3,r2
    5638:	14000017 	ldw	r16,0(r2)
    563c:	14400117 	ldw	r17,4(r2)
    5640:	30016316 	blt	r6,zero,5bd0 <_dtoa_r+0xd24>
    5644:	800d883a 	mov	r6,r16
    5648:	880f883a 	mov	r7,r17
    564c:	9009883a 	mov	r4,r18
    5650:	980b883a 	mov	r5,r19
    5654:	000c2fc0 	call	c2fc <__divdf3>
    5658:	180b883a 	mov	r5,r3
    565c:	1009883a 	mov	r4,r2
    5660:	000de500 	call	de50 <__fixdfsi>
    5664:	1009883a 	mov	r4,r2
    5668:	102b883a 	mov	r21,r2
    566c:	000ded00 	call	ded0 <__floatsidf>
    5670:	800d883a 	mov	r6,r16
    5674:	880f883a 	mov	r7,r17
    5678:	1009883a 	mov	r4,r2
    567c:	180b883a 	mov	r5,r3
    5680:	000ce3c0 	call	ce3c <__muldf3>
    5684:	100d883a 	mov	r6,r2
    5688:	180f883a 	mov	r7,r3
    568c:	9009883a 	mov	r4,r18
    5690:	980b883a 	mov	r5,r19
    5694:	000d5540 	call	d554 <__subdf3>
    5698:	d9c00717 	ldw	r7,28(sp)
    569c:	1009883a 	mov	r4,r2
    56a0:	a8800c04 	addi	r2,r21,48
    56a4:	38800005 	stb	r2,0(r7)
    56a8:	3dc00044 	addi	r23,r7,1
    56ac:	d9c00617 	ldw	r7,24(sp)
    56b0:	01800044 	movi	r6,1
    56b4:	180b883a 	mov	r5,r3
    56b8:	2005883a 	mov	r2,r4
    56bc:	39803826 	beq	r7,r6,57a0 <_dtoa_r+0x8f4>
    56c0:	000d883a 	mov	r6,zero
    56c4:	01d00934 	movhi	r7,16420
    56c8:	000ce3c0 	call	ce3c <__muldf3>
    56cc:	000d883a 	mov	r6,zero
    56d0:	000f883a 	mov	r7,zero
    56d4:	1009883a 	mov	r4,r2
    56d8:	180b883a 	mov	r5,r3
    56dc:	1025883a 	mov	r18,r2
    56e0:	1827883a 	mov	r19,r3
    56e4:	000cbe40 	call	cbe4 <__eqdf2>
    56e8:	103f9a26 	beq	r2,zero,5554 <__alt_data_end+0x80005554>
    56ec:	d9c00617 	ldw	r7,24(sp)
    56f0:	d8c00717 	ldw	r3,28(sp)
    56f4:	b829883a 	mov	r20,r23
    56f8:	38bfffc4 	addi	r2,r7,-1
    56fc:	18ad883a 	add	r22,r3,r2
    5700:	00000a06 	br	572c <_dtoa_r+0x880>
    5704:	000ce3c0 	call	ce3c <__muldf3>
    5708:	000d883a 	mov	r6,zero
    570c:	000f883a 	mov	r7,zero
    5710:	1009883a 	mov	r4,r2
    5714:	180b883a 	mov	r5,r3
    5718:	1025883a 	mov	r18,r2
    571c:	1827883a 	mov	r19,r3
    5720:	b829883a 	mov	r20,r23
    5724:	000cbe40 	call	cbe4 <__eqdf2>
    5728:	103f8a26 	beq	r2,zero,5554 <__alt_data_end+0x80005554>
    572c:	800d883a 	mov	r6,r16
    5730:	880f883a 	mov	r7,r17
    5734:	9009883a 	mov	r4,r18
    5738:	980b883a 	mov	r5,r19
    573c:	000c2fc0 	call	c2fc <__divdf3>
    5740:	180b883a 	mov	r5,r3
    5744:	1009883a 	mov	r4,r2
    5748:	000de500 	call	de50 <__fixdfsi>
    574c:	1009883a 	mov	r4,r2
    5750:	102b883a 	mov	r21,r2
    5754:	000ded00 	call	ded0 <__floatsidf>
    5758:	800d883a 	mov	r6,r16
    575c:	880f883a 	mov	r7,r17
    5760:	1009883a 	mov	r4,r2
    5764:	180b883a 	mov	r5,r3
    5768:	000ce3c0 	call	ce3c <__muldf3>
    576c:	100d883a 	mov	r6,r2
    5770:	180f883a 	mov	r7,r3
    5774:	9009883a 	mov	r4,r18
    5778:	980b883a 	mov	r5,r19
    577c:	000d5540 	call	d554 <__subdf3>
    5780:	aa000c04 	addi	r8,r21,48
    5784:	a2000005 	stb	r8,0(r20)
    5788:	000d883a 	mov	r6,zero
    578c:	01d00934 	movhi	r7,16420
    5790:	1009883a 	mov	r4,r2
    5794:	180b883a 	mov	r5,r3
    5798:	a5c00044 	addi	r23,r20,1
    579c:	b53fd91e 	bne	r22,r20,5704 <__alt_data_end+0x80005704>
    57a0:	100d883a 	mov	r6,r2
    57a4:	180f883a 	mov	r7,r3
    57a8:	1009883a 	mov	r4,r2
    57ac:	180b883a 	mov	r5,r3
    57b0:	000ba500 	call	ba50 <__adddf3>
    57b4:	100d883a 	mov	r6,r2
    57b8:	180f883a 	mov	r7,r3
    57bc:	8009883a 	mov	r4,r16
    57c0:	880b883a 	mov	r5,r17
    57c4:	1027883a 	mov	r19,r2
    57c8:	1825883a 	mov	r18,r3
    57cc:	000cd480 	call	cd48 <__ledf2>
    57d0:	10000816 	blt	r2,zero,57f4 <_dtoa_r+0x948>
    57d4:	980d883a 	mov	r6,r19
    57d8:	900f883a 	mov	r7,r18
    57dc:	8009883a 	mov	r4,r16
    57e0:	880b883a 	mov	r5,r17
    57e4:	000cbe40 	call	cbe4 <__eqdf2>
    57e8:	103f5a1e 	bne	r2,zero,5554 <__alt_data_end+0x80005554>
    57ec:	ad40004c 	andi	r21,r21,1
    57f0:	a83f5826 	beq	r21,zero,5554 <__alt_data_end+0x80005554>
    57f4:	bd3fffc3 	ldbu	r20,-1(r23)
    57f8:	b8bfffc4 	addi	r2,r23,-1
    57fc:	1007883a 	mov	r3,r2
    5800:	01400e44 	movi	r5,57
    5804:	d9800717 	ldw	r6,28(sp)
    5808:	00000506 	br	5820 <_dtoa_r+0x974>
    580c:	18ffffc4 	addi	r3,r3,-1
    5810:	11824726 	beq	r2,r6,6130 <_dtoa_r+0x1284>
    5814:	1d000003 	ldbu	r20,0(r3)
    5818:	102f883a 	mov	r23,r2
    581c:	10bfffc4 	addi	r2,r2,-1
    5820:	a1003fcc 	andi	r4,r20,255
    5824:	2100201c 	xori	r4,r4,128
    5828:	213fe004 	addi	r4,r4,-128
    582c:	217ff726 	beq	r4,r5,580c <__alt_data_end+0x8000580c>
    5830:	a2000044 	addi	r8,r20,1
    5834:	12000005 	stb	r8,0(r2)
    5838:	003f4606 	br	5554 <__alt_data_end+0x80005554>
    583c:	d9000b17 	ldw	r4,44(sp)
    5840:	2000c826 	beq	r4,zero,5b64 <_dtoa_r+0xcb8>
    5844:	d9800317 	ldw	r6,12(sp)
    5848:	00c00044 	movi	r3,1
    584c:	1980f90e 	bge	r3,r6,5c34 <_dtoa_r+0xd88>
    5850:	d8800617 	ldw	r2,24(sp)
    5854:	d8c00a17 	ldw	r3,40(sp)
    5858:	157fffc4 	addi	r21,r2,-1
    585c:	1d41f316 	blt	r3,r21,602c <_dtoa_r+0x1180>
    5860:	1d6bc83a 	sub	r21,r3,r21
    5864:	d9c00617 	ldw	r7,24(sp)
    5868:	3802aa16 	blt	r7,zero,6314 <_dtoa_r+0x1468>
    586c:	dd000817 	ldw	r20,32(sp)
    5870:	d8800617 	ldw	r2,24(sp)
    5874:	d8c00817 	ldw	r3,32(sp)
    5878:	01400044 	movi	r5,1
    587c:	e009883a 	mov	r4,fp
    5880:	1887883a 	add	r3,r3,r2
    5884:	d8c00815 	stw	r3,32(sp)
    5888:	b0ad883a 	add	r22,r22,r2
    588c:	0007fc40 	call	7fc4 <__i2b>
    5890:	1023883a 	mov	r17,r2
    5894:	a0000826 	beq	r20,zero,58b8 <_dtoa_r+0xa0c>
    5898:	0580070e 	bge	zero,r22,58b8 <_dtoa_r+0xa0c>
    589c:	a005883a 	mov	r2,r20
    58a0:	b500b916 	blt	r22,r20,5b88 <_dtoa_r+0xcdc>
    58a4:	d9000817 	ldw	r4,32(sp)
    58a8:	a0a9c83a 	sub	r20,r20,r2
    58ac:	b0adc83a 	sub	r22,r22,r2
    58b0:	2089c83a 	sub	r4,r4,r2
    58b4:	d9000815 	stw	r4,32(sp)
    58b8:	d9800a17 	ldw	r6,40(sp)
    58bc:	0181810e 	bge	zero,r6,5ec4 <_dtoa_r+0x1018>
    58c0:	d9c00b17 	ldw	r7,44(sp)
    58c4:	3800b326 	beq	r7,zero,5b94 <_dtoa_r+0xce8>
    58c8:	a800b226 	beq	r21,zero,5b94 <_dtoa_r+0xce8>
    58cc:	880b883a 	mov	r5,r17
    58d0:	a80d883a 	mov	r6,r21
    58d4:	e009883a 	mov	r4,fp
    58d8:	00081f80 	call	81f8 <__pow5mult>
    58dc:	d9800917 	ldw	r6,36(sp)
    58e0:	100b883a 	mov	r5,r2
    58e4:	e009883a 	mov	r4,fp
    58e8:	1023883a 	mov	r17,r2
    58ec:	00080000 	call	8000 <__multiply>
    58f0:	1021883a 	mov	r16,r2
    58f4:	d8800a17 	ldw	r2,40(sp)
    58f8:	d9400917 	ldw	r5,36(sp)
    58fc:	e009883a 	mov	r4,fp
    5900:	1545c83a 	sub	r2,r2,r21
    5904:	d8800a15 	stw	r2,40(sp)
    5908:	0007c600 	call	7c60 <_Bfree>
    590c:	d8c00a17 	ldw	r3,40(sp)
    5910:	18009f1e 	bne	r3,zero,5b90 <_dtoa_r+0xce4>
    5914:	05c00044 	movi	r23,1
    5918:	e009883a 	mov	r4,fp
    591c:	b80b883a 	mov	r5,r23
    5920:	0007fc40 	call	7fc4 <__i2b>
    5924:	d9000d17 	ldw	r4,52(sp)
    5928:	102b883a 	mov	r21,r2
    592c:	2000ce26 	beq	r4,zero,5c68 <_dtoa_r+0xdbc>
    5930:	200d883a 	mov	r6,r4
    5934:	100b883a 	mov	r5,r2
    5938:	e009883a 	mov	r4,fp
    593c:	00081f80 	call	81f8 <__pow5mult>
    5940:	d9800317 	ldw	r6,12(sp)
    5944:	102b883a 	mov	r21,r2
    5948:	b981810e 	bge	r23,r6,5f50 <_dtoa_r+0x10a4>
    594c:	0027883a 	mov	r19,zero
    5950:	a8800417 	ldw	r2,16(r21)
    5954:	05c00804 	movi	r23,32
    5958:	10800104 	addi	r2,r2,4
    595c:	1085883a 	add	r2,r2,r2
    5960:	1085883a 	add	r2,r2,r2
    5964:	a885883a 	add	r2,r21,r2
    5968:	11000017 	ldw	r4,0(r2)
    596c:	0007eac0 	call	7eac <__hi0bits>
    5970:	b885c83a 	sub	r2,r23,r2
    5974:	1585883a 	add	r2,r2,r22
    5978:	108007cc 	andi	r2,r2,31
    597c:	1000b326 	beq	r2,zero,5c4c <_dtoa_r+0xda0>
    5980:	00c00804 	movi	r3,32
    5984:	1887c83a 	sub	r3,r3,r2
    5988:	01000104 	movi	r4,4
    598c:	20c2cd0e 	bge	r4,r3,64c4 <_dtoa_r+0x1618>
    5990:	00c00704 	movi	r3,28
    5994:	1885c83a 	sub	r2,r3,r2
    5998:	d8c00817 	ldw	r3,32(sp)
    599c:	a0a9883a 	add	r20,r20,r2
    59a0:	b0ad883a 	add	r22,r22,r2
    59a4:	1887883a 	add	r3,r3,r2
    59a8:	d8c00815 	stw	r3,32(sp)
    59ac:	d9800817 	ldw	r6,32(sp)
    59b0:	0180040e 	bge	zero,r6,59c4 <_dtoa_r+0xb18>
    59b4:	800b883a 	mov	r5,r16
    59b8:	e009883a 	mov	r4,fp
    59bc:	00083380 	call	8338 <__lshift>
    59c0:	1021883a 	mov	r16,r2
    59c4:	0580050e 	bge	zero,r22,59dc <_dtoa_r+0xb30>
    59c8:	a80b883a 	mov	r5,r21
    59cc:	b00d883a 	mov	r6,r22
    59d0:	e009883a 	mov	r4,fp
    59d4:	00083380 	call	8338 <__lshift>
    59d8:	102b883a 	mov	r21,r2
    59dc:	d9c00e17 	ldw	r7,56(sp)
    59e0:	3801211e 	bne	r7,zero,5e68 <_dtoa_r+0xfbc>
    59e4:	d9800617 	ldw	r6,24(sp)
    59e8:	0181380e 	bge	zero,r6,5ecc <_dtoa_r+0x1020>
    59ec:	d8c00b17 	ldw	r3,44(sp)
    59f0:	1800ab1e 	bne	r3,zero,5ca0 <_dtoa_r+0xdf4>
    59f4:	dc800717 	ldw	r18,28(sp)
    59f8:	dcc00617 	ldw	r19,24(sp)
    59fc:	9029883a 	mov	r20,r18
    5a00:	00000206 	br	5a0c <_dtoa_r+0xb60>
    5a04:	0007c880 	call	7c88 <__multadd>
    5a08:	1021883a 	mov	r16,r2
    5a0c:	a80b883a 	mov	r5,r21
    5a10:	8009883a 	mov	r4,r16
    5a14:	0004cac0 	call	4cac <quorem>
    5a18:	10800c04 	addi	r2,r2,48
    5a1c:	90800005 	stb	r2,0(r18)
    5a20:	94800044 	addi	r18,r18,1
    5a24:	9507c83a 	sub	r3,r18,r20
    5a28:	000f883a 	mov	r7,zero
    5a2c:	01800284 	movi	r6,10
    5a30:	800b883a 	mov	r5,r16
    5a34:	e009883a 	mov	r4,fp
    5a38:	1cfff216 	blt	r3,r19,5a04 <__alt_data_end+0x80005a04>
    5a3c:	1011883a 	mov	r8,r2
    5a40:	d8800617 	ldw	r2,24(sp)
    5a44:	0082370e 	bge	zero,r2,6324 <_dtoa_r+0x1478>
    5a48:	d9000717 	ldw	r4,28(sp)
    5a4c:	0025883a 	mov	r18,zero
    5a50:	20af883a 	add	r23,r4,r2
    5a54:	01800044 	movi	r6,1
    5a58:	800b883a 	mov	r5,r16
    5a5c:	e009883a 	mov	r4,fp
    5a60:	da001715 	stw	r8,92(sp)
    5a64:	00083380 	call	8338 <__lshift>
    5a68:	a80b883a 	mov	r5,r21
    5a6c:	1009883a 	mov	r4,r2
    5a70:	d8800915 	stw	r2,36(sp)
    5a74:	00084800 	call	8480 <__mcmp>
    5a78:	da001717 	ldw	r8,92(sp)
    5a7c:	0081800e 	bge	zero,r2,6080 <_dtoa_r+0x11d4>
    5a80:	b93fffc3 	ldbu	r4,-1(r23)
    5a84:	b8bfffc4 	addi	r2,r23,-1
    5a88:	1007883a 	mov	r3,r2
    5a8c:	01800e44 	movi	r6,57
    5a90:	d9c00717 	ldw	r7,28(sp)
    5a94:	00000506 	br	5aac <_dtoa_r+0xc00>
    5a98:	18ffffc4 	addi	r3,r3,-1
    5a9c:	11c12326 	beq	r2,r7,5f2c <_dtoa_r+0x1080>
    5aa0:	19000003 	ldbu	r4,0(r3)
    5aa4:	102f883a 	mov	r23,r2
    5aa8:	10bfffc4 	addi	r2,r2,-1
    5aac:	21403fcc 	andi	r5,r4,255
    5ab0:	2940201c 	xori	r5,r5,128
    5ab4:	297fe004 	addi	r5,r5,-128
    5ab8:	29bff726 	beq	r5,r6,5a98 <__alt_data_end+0x80005a98>
    5abc:	21000044 	addi	r4,r4,1
    5ac0:	11000005 	stb	r4,0(r2)
    5ac4:	a80b883a 	mov	r5,r21
    5ac8:	e009883a 	mov	r4,fp
    5acc:	0007c600 	call	7c60 <_Bfree>
    5ad0:	883ea026 	beq	r17,zero,5554 <__alt_data_end+0x80005554>
    5ad4:	90000426 	beq	r18,zero,5ae8 <_dtoa_r+0xc3c>
    5ad8:	94400326 	beq	r18,r17,5ae8 <_dtoa_r+0xc3c>
    5adc:	900b883a 	mov	r5,r18
    5ae0:	e009883a 	mov	r4,fp
    5ae4:	0007c600 	call	7c60 <_Bfree>
    5ae8:	880b883a 	mov	r5,r17
    5aec:	e009883a 	mov	r4,fp
    5af0:	0007c600 	call	7c60 <_Bfree>
    5af4:	003e9706 	br	5554 <__alt_data_end+0x80005554>
    5af8:	01800044 	movi	r6,1
    5afc:	d9800e15 	stw	r6,56(sp)
    5b00:	003d9606 	br	515c <__alt_data_end+0x8000515c>
    5b04:	d8800817 	ldw	r2,32(sp)
    5b08:	d8c00517 	ldw	r3,20(sp)
    5b0c:	d8000d15 	stw	zero,52(sp)
    5b10:	10c5c83a 	sub	r2,r2,r3
    5b14:	00c9c83a 	sub	r4,zero,r3
    5b18:	d8800815 	stw	r2,32(sp)
    5b1c:	d9000a15 	stw	r4,40(sp)
    5b20:	003d9706 	br	5180 <__alt_data_end+0x80005180>
    5b24:	05adc83a 	sub	r22,zero,r22
    5b28:	dd800815 	stw	r22,32(sp)
    5b2c:	002d883a 	mov	r22,zero
    5b30:	003d8e06 	br	516c <__alt_data_end+0x8000516c>
    5b34:	d9000517 	ldw	r4,20(sp)
    5b38:	000ded00 	call	ded0 <__floatsidf>
    5b3c:	100d883a 	mov	r6,r2
    5b40:	180f883a 	mov	r7,r3
    5b44:	a009883a 	mov	r4,r20
    5b48:	880b883a 	mov	r5,r17
    5b4c:	000cbe40 	call	cbe4 <__eqdf2>
    5b50:	103d7126 	beq	r2,zero,5118 <__alt_data_end+0x80005118>
    5b54:	d9c00517 	ldw	r7,20(sp)
    5b58:	39ffffc4 	addi	r7,r7,-1
    5b5c:	d9c00515 	stw	r7,20(sp)
    5b60:	003d6d06 	br	5118 <__alt_data_end+0x80005118>
    5b64:	dd400a17 	ldw	r21,40(sp)
    5b68:	dd000817 	ldw	r20,32(sp)
    5b6c:	0023883a 	mov	r17,zero
    5b70:	003f4806 	br	5894 <__alt_data_end+0x80005894>
    5b74:	10e3c83a 	sub	r17,r2,r3
    5b78:	9448983a 	sll	r4,r18,r17
    5b7c:	003d3206 	br	5048 <__alt_data_end+0x80005048>
    5b80:	d8000e15 	stw	zero,56(sp)
    5b84:	003d7506 	br	515c <__alt_data_end+0x8000515c>
    5b88:	b005883a 	mov	r2,r22
    5b8c:	003f4506 	br	58a4 <__alt_data_end+0x800058a4>
    5b90:	dc000915 	stw	r16,36(sp)
    5b94:	d9800a17 	ldw	r6,40(sp)
    5b98:	d9400917 	ldw	r5,36(sp)
    5b9c:	e009883a 	mov	r4,fp
    5ba0:	00081f80 	call	81f8 <__pow5mult>
    5ba4:	1021883a 	mov	r16,r2
    5ba8:	003f5a06 	br	5914 <__alt_data_end+0x80005914>
    5bac:	01c00044 	movi	r7,1
    5bb0:	d9c00b15 	stw	r7,44(sp)
    5bb4:	d8802217 	ldw	r2,136(sp)
    5bb8:	0081280e 	bge	zero,r2,605c <_dtoa_r+0x11b0>
    5bbc:	100d883a 	mov	r6,r2
    5bc0:	1021883a 	mov	r16,r2
    5bc4:	d8800c15 	stw	r2,48(sp)
    5bc8:	d8800615 	stw	r2,24(sp)
    5bcc:	003d8806 	br	51f0 <__alt_data_end+0x800051f0>
    5bd0:	d8800617 	ldw	r2,24(sp)
    5bd4:	00be9b16 	blt	zero,r2,5644 <__alt_data_end+0x80005644>
    5bd8:	10010f1e 	bne	r2,zero,6018 <_dtoa_r+0x116c>
    5bdc:	880b883a 	mov	r5,r17
    5be0:	000d883a 	mov	r6,zero
    5be4:	01d00534 	movhi	r7,16404
    5be8:	8009883a 	mov	r4,r16
    5bec:	000ce3c0 	call	ce3c <__muldf3>
    5bf0:	900d883a 	mov	r6,r18
    5bf4:	980f883a 	mov	r7,r19
    5bf8:	1009883a 	mov	r4,r2
    5bfc:	180b883a 	mov	r5,r3
    5c00:	000cc6c0 	call	cc6c <__gedf2>
    5c04:	002b883a 	mov	r21,zero
    5c08:	0023883a 	mov	r17,zero
    5c0c:	1000bf16 	blt	r2,zero,5f0c <_dtoa_r+0x1060>
    5c10:	d9802217 	ldw	r6,136(sp)
    5c14:	ddc00717 	ldw	r23,28(sp)
    5c18:	018c303a 	nor	r6,zero,r6
    5c1c:	d9800515 	stw	r6,20(sp)
    5c20:	a80b883a 	mov	r5,r21
    5c24:	e009883a 	mov	r4,fp
    5c28:	0007c600 	call	7c60 <_Bfree>
    5c2c:	883e4926 	beq	r17,zero,5554 <__alt_data_end+0x80005554>
    5c30:	003fad06 	br	5ae8 <__alt_data_end+0x80005ae8>
    5c34:	d9c01117 	ldw	r7,68(sp)
    5c38:	3801bc26 	beq	r7,zero,632c <_dtoa_r+0x1480>
    5c3c:	10810cc4 	addi	r2,r2,1075
    5c40:	dd400a17 	ldw	r21,40(sp)
    5c44:	dd000817 	ldw	r20,32(sp)
    5c48:	003f0a06 	br	5874 <__alt_data_end+0x80005874>
    5c4c:	00800704 	movi	r2,28
    5c50:	d9000817 	ldw	r4,32(sp)
    5c54:	a0a9883a 	add	r20,r20,r2
    5c58:	b0ad883a 	add	r22,r22,r2
    5c5c:	2089883a 	add	r4,r4,r2
    5c60:	d9000815 	stw	r4,32(sp)
    5c64:	003f5106 	br	59ac <__alt_data_end+0x800059ac>
    5c68:	d8c00317 	ldw	r3,12(sp)
    5c6c:	b8c1fc0e 	bge	r23,r3,6460 <_dtoa_r+0x15b4>
    5c70:	0027883a 	mov	r19,zero
    5c74:	b805883a 	mov	r2,r23
    5c78:	003f3e06 	br	5974 <__alt_data_end+0x80005974>
    5c7c:	880b883a 	mov	r5,r17
    5c80:	e009883a 	mov	r4,fp
    5c84:	000f883a 	mov	r7,zero
    5c88:	01800284 	movi	r6,10
    5c8c:	0007c880 	call	7c88 <__multadd>
    5c90:	d9000c17 	ldw	r4,48(sp)
    5c94:	1023883a 	mov	r17,r2
    5c98:	0102040e 	bge	zero,r4,64ac <_dtoa_r+0x1600>
    5c9c:	d9000615 	stw	r4,24(sp)
    5ca0:	0500050e 	bge	zero,r20,5cb8 <_dtoa_r+0xe0c>
    5ca4:	880b883a 	mov	r5,r17
    5ca8:	a00d883a 	mov	r6,r20
    5cac:	e009883a 	mov	r4,fp
    5cb0:	00083380 	call	8338 <__lshift>
    5cb4:	1023883a 	mov	r17,r2
    5cb8:	9801241e 	bne	r19,zero,614c <_dtoa_r+0x12a0>
    5cbc:	8829883a 	mov	r20,r17
    5cc0:	d9000617 	ldw	r4,24(sp)
    5cc4:	dcc00717 	ldw	r19,28(sp)
    5cc8:	9480004c 	andi	r18,r18,1
    5ccc:	20bfffc4 	addi	r2,r4,-1
    5cd0:	9885883a 	add	r2,r19,r2
    5cd4:	d8800415 	stw	r2,16(sp)
    5cd8:	dc800615 	stw	r18,24(sp)
    5cdc:	a80b883a 	mov	r5,r21
    5ce0:	8009883a 	mov	r4,r16
    5ce4:	0004cac0 	call	4cac <quorem>
    5ce8:	880b883a 	mov	r5,r17
    5cec:	8009883a 	mov	r4,r16
    5cf0:	102f883a 	mov	r23,r2
    5cf4:	00084800 	call	8480 <__mcmp>
    5cf8:	a80b883a 	mov	r5,r21
    5cfc:	a00d883a 	mov	r6,r20
    5d00:	e009883a 	mov	r4,fp
    5d04:	102d883a 	mov	r22,r2
    5d08:	00084e00 	call	84e0 <__mdiff>
    5d0c:	1007883a 	mov	r3,r2
    5d10:	10800317 	ldw	r2,12(r2)
    5d14:	bc800c04 	addi	r18,r23,48
    5d18:	180b883a 	mov	r5,r3
    5d1c:	10004e1e 	bne	r2,zero,5e58 <_dtoa_r+0xfac>
    5d20:	8009883a 	mov	r4,r16
    5d24:	d8c01615 	stw	r3,88(sp)
    5d28:	00084800 	call	8480 <__mcmp>
    5d2c:	d8c01617 	ldw	r3,88(sp)
    5d30:	e009883a 	mov	r4,fp
    5d34:	d8801615 	stw	r2,88(sp)
    5d38:	180b883a 	mov	r5,r3
    5d3c:	0007c600 	call	7c60 <_Bfree>
    5d40:	d8801617 	ldw	r2,88(sp)
    5d44:	1000041e 	bne	r2,zero,5d58 <_dtoa_r+0xeac>
    5d48:	d9800317 	ldw	r6,12(sp)
    5d4c:	3000021e 	bne	r6,zero,5d58 <_dtoa_r+0xeac>
    5d50:	d8c00617 	ldw	r3,24(sp)
    5d54:	18003726 	beq	r3,zero,5e34 <_dtoa_r+0xf88>
    5d58:	b0002016 	blt	r22,zero,5ddc <_dtoa_r+0xf30>
    5d5c:	b000041e 	bne	r22,zero,5d70 <_dtoa_r+0xec4>
    5d60:	d9000317 	ldw	r4,12(sp)
    5d64:	2000021e 	bne	r4,zero,5d70 <_dtoa_r+0xec4>
    5d68:	d8c00617 	ldw	r3,24(sp)
    5d6c:	18001b26 	beq	r3,zero,5ddc <_dtoa_r+0xf30>
    5d70:	00810716 	blt	zero,r2,6190 <_dtoa_r+0x12e4>
    5d74:	d8c00417 	ldw	r3,16(sp)
    5d78:	9d800044 	addi	r22,r19,1
    5d7c:	9c800005 	stb	r18,0(r19)
    5d80:	b02f883a 	mov	r23,r22
    5d84:	98c10626 	beq	r19,r3,61a0 <_dtoa_r+0x12f4>
    5d88:	800b883a 	mov	r5,r16
    5d8c:	000f883a 	mov	r7,zero
    5d90:	01800284 	movi	r6,10
    5d94:	e009883a 	mov	r4,fp
    5d98:	0007c880 	call	7c88 <__multadd>
    5d9c:	1021883a 	mov	r16,r2
    5da0:	000f883a 	mov	r7,zero
    5da4:	01800284 	movi	r6,10
    5da8:	880b883a 	mov	r5,r17
    5dac:	e009883a 	mov	r4,fp
    5db0:	8d002526 	beq	r17,r20,5e48 <_dtoa_r+0xf9c>
    5db4:	0007c880 	call	7c88 <__multadd>
    5db8:	a00b883a 	mov	r5,r20
    5dbc:	000f883a 	mov	r7,zero
    5dc0:	01800284 	movi	r6,10
    5dc4:	e009883a 	mov	r4,fp
    5dc8:	1023883a 	mov	r17,r2
    5dcc:	0007c880 	call	7c88 <__multadd>
    5dd0:	1029883a 	mov	r20,r2
    5dd4:	b027883a 	mov	r19,r22
    5dd8:	003fc006 	br	5cdc <__alt_data_end+0x80005cdc>
    5ddc:	9011883a 	mov	r8,r18
    5de0:	00800e0e 	bge	zero,r2,5e1c <_dtoa_r+0xf70>
    5de4:	800b883a 	mov	r5,r16
    5de8:	01800044 	movi	r6,1
    5dec:	e009883a 	mov	r4,fp
    5df0:	da001715 	stw	r8,92(sp)
    5df4:	00083380 	call	8338 <__lshift>
    5df8:	a80b883a 	mov	r5,r21
    5dfc:	1009883a 	mov	r4,r2
    5e00:	1021883a 	mov	r16,r2
    5e04:	00084800 	call	8480 <__mcmp>
    5e08:	da001717 	ldw	r8,92(sp)
    5e0c:	0081960e 	bge	zero,r2,6468 <_dtoa_r+0x15bc>
    5e10:	00800e44 	movi	r2,57
    5e14:	40817026 	beq	r8,r2,63d8 <_dtoa_r+0x152c>
    5e18:	ba000c44 	addi	r8,r23,49
    5e1c:	8825883a 	mov	r18,r17
    5e20:	9dc00044 	addi	r23,r19,1
    5e24:	9a000005 	stb	r8,0(r19)
    5e28:	a023883a 	mov	r17,r20
    5e2c:	dc000915 	stw	r16,36(sp)
    5e30:	003f2406 	br	5ac4 <__alt_data_end+0x80005ac4>
    5e34:	00800e44 	movi	r2,57
    5e38:	9011883a 	mov	r8,r18
    5e3c:	90816626 	beq	r18,r2,63d8 <_dtoa_r+0x152c>
    5e40:	05bff516 	blt	zero,r22,5e18 <__alt_data_end+0x80005e18>
    5e44:	003ff506 	br	5e1c <__alt_data_end+0x80005e1c>
    5e48:	0007c880 	call	7c88 <__multadd>
    5e4c:	1023883a 	mov	r17,r2
    5e50:	1029883a 	mov	r20,r2
    5e54:	003fdf06 	br	5dd4 <__alt_data_end+0x80005dd4>
    5e58:	e009883a 	mov	r4,fp
    5e5c:	0007c600 	call	7c60 <_Bfree>
    5e60:	00800044 	movi	r2,1
    5e64:	003fbc06 	br	5d58 <__alt_data_end+0x80005d58>
    5e68:	a80b883a 	mov	r5,r21
    5e6c:	8009883a 	mov	r4,r16
    5e70:	00084800 	call	8480 <__mcmp>
    5e74:	103edb0e 	bge	r2,zero,59e4 <__alt_data_end+0x800059e4>
    5e78:	800b883a 	mov	r5,r16
    5e7c:	000f883a 	mov	r7,zero
    5e80:	01800284 	movi	r6,10
    5e84:	e009883a 	mov	r4,fp
    5e88:	0007c880 	call	7c88 <__multadd>
    5e8c:	1021883a 	mov	r16,r2
    5e90:	d8800517 	ldw	r2,20(sp)
    5e94:	d8c00b17 	ldw	r3,44(sp)
    5e98:	10bfffc4 	addi	r2,r2,-1
    5e9c:	d8800515 	stw	r2,20(sp)
    5ea0:	183f761e 	bne	r3,zero,5c7c <__alt_data_end+0x80005c7c>
    5ea4:	d9000c17 	ldw	r4,48(sp)
    5ea8:	0101730e 	bge	zero,r4,6478 <_dtoa_r+0x15cc>
    5eac:	d9000615 	stw	r4,24(sp)
    5eb0:	003ed006 	br	59f4 <__alt_data_end+0x800059f4>
    5eb4:	00800084 	movi	r2,2
    5eb8:	3081861e 	bne	r6,r2,64d4 <_dtoa_r+0x1628>
    5ebc:	d8000b15 	stw	zero,44(sp)
    5ec0:	003f3c06 	br	5bb4 <__alt_data_end+0x80005bb4>
    5ec4:	dc000917 	ldw	r16,36(sp)
    5ec8:	003e9206 	br	5914 <__alt_data_end+0x80005914>
    5ecc:	d9c00317 	ldw	r7,12(sp)
    5ed0:	00800084 	movi	r2,2
    5ed4:	11fec50e 	bge	r2,r7,59ec <__alt_data_end+0x800059ec>
    5ed8:	d9000617 	ldw	r4,24(sp)
    5edc:	20013c1e 	bne	r4,zero,63d0 <_dtoa_r+0x1524>
    5ee0:	a80b883a 	mov	r5,r21
    5ee4:	000f883a 	mov	r7,zero
    5ee8:	01800144 	movi	r6,5
    5eec:	e009883a 	mov	r4,fp
    5ef0:	0007c880 	call	7c88 <__multadd>
    5ef4:	100b883a 	mov	r5,r2
    5ef8:	8009883a 	mov	r4,r16
    5efc:	102b883a 	mov	r21,r2
    5f00:	00084800 	call	8480 <__mcmp>
    5f04:	dc000915 	stw	r16,36(sp)
    5f08:	00bf410e 	bge	zero,r2,5c10 <__alt_data_end+0x80005c10>
    5f0c:	d9c00717 	ldw	r7,28(sp)
    5f10:	00800c44 	movi	r2,49
    5f14:	38800005 	stb	r2,0(r7)
    5f18:	d8800517 	ldw	r2,20(sp)
    5f1c:	3dc00044 	addi	r23,r7,1
    5f20:	10800044 	addi	r2,r2,1
    5f24:	d8800515 	stw	r2,20(sp)
    5f28:	003f3d06 	br	5c20 <__alt_data_end+0x80005c20>
    5f2c:	d9800517 	ldw	r6,20(sp)
    5f30:	d9c00717 	ldw	r7,28(sp)
    5f34:	00800c44 	movi	r2,49
    5f38:	31800044 	addi	r6,r6,1
    5f3c:	d9800515 	stw	r6,20(sp)
    5f40:	38800005 	stb	r2,0(r7)
    5f44:	003edf06 	br	5ac4 <__alt_data_end+0x80005ac4>
    5f48:	d8000b15 	stw	zero,44(sp)
    5f4c:	003c9f06 	br	51cc <__alt_data_end+0x800051cc>
    5f50:	903e7e1e 	bne	r18,zero,594c <__alt_data_end+0x8000594c>
    5f54:	00800434 	movhi	r2,16
    5f58:	10bfffc4 	addi	r2,r2,-1
    5f5c:	9884703a 	and	r2,r19,r2
    5f60:	1000ea1e 	bne	r2,zero,630c <_dtoa_r+0x1460>
    5f64:	9cdffc2c 	andhi	r19,r19,32752
    5f68:	9800e826 	beq	r19,zero,630c <_dtoa_r+0x1460>
    5f6c:	d9c00817 	ldw	r7,32(sp)
    5f70:	b5800044 	addi	r22,r22,1
    5f74:	04c00044 	movi	r19,1
    5f78:	39c00044 	addi	r7,r7,1
    5f7c:	d9c00815 	stw	r7,32(sp)
    5f80:	d8800d17 	ldw	r2,52(sp)
    5f84:	103e721e 	bne	r2,zero,5950 <__alt_data_end+0x80005950>
    5f88:	00800044 	movi	r2,1
    5f8c:	003e7906 	br	5974 <__alt_data_end+0x80005974>
    5f90:	8009883a 	mov	r4,r16
    5f94:	000ded00 	call	ded0 <__floatsidf>
    5f98:	d9800f17 	ldw	r6,60(sp)
    5f9c:	d9c01017 	ldw	r7,64(sp)
    5fa0:	1009883a 	mov	r4,r2
    5fa4:	180b883a 	mov	r5,r3
    5fa8:	000ce3c0 	call	ce3c <__muldf3>
    5fac:	000d883a 	mov	r6,zero
    5fb0:	01d00734 	movhi	r7,16412
    5fb4:	1009883a 	mov	r4,r2
    5fb8:	180b883a 	mov	r5,r3
    5fbc:	000ba500 	call	ba50 <__adddf3>
    5fc0:	047f3034 	movhi	r17,64704
    5fc4:	1021883a 	mov	r16,r2
    5fc8:	1c63883a 	add	r17,r3,r17
    5fcc:	d9000f17 	ldw	r4,60(sp)
    5fd0:	d9401017 	ldw	r5,64(sp)
    5fd4:	000d883a 	mov	r6,zero
    5fd8:	01d00534 	movhi	r7,16404
    5fdc:	000d5540 	call	d554 <__subdf3>
    5fe0:	800d883a 	mov	r6,r16
    5fe4:	880f883a 	mov	r7,r17
    5fe8:	1009883a 	mov	r4,r2
    5fec:	180b883a 	mov	r5,r3
    5ff0:	102b883a 	mov	r21,r2
    5ff4:	1829883a 	mov	r20,r3
    5ff8:	000cc6c0 	call	cc6c <__gedf2>
    5ffc:	00806c16 	blt	zero,r2,61b0 <_dtoa_r+0x1304>
    6000:	89e0003c 	xorhi	r7,r17,32768
    6004:	800d883a 	mov	r6,r16
    6008:	a809883a 	mov	r4,r21
    600c:	a00b883a 	mov	r5,r20
    6010:	000cd480 	call	cd48 <__ledf2>
    6014:	103d7e0e 	bge	r2,zero,5610 <__alt_data_end+0x80005610>
    6018:	002b883a 	mov	r21,zero
    601c:	0023883a 	mov	r17,zero
    6020:	003efb06 	br	5c10 <__alt_data_end+0x80005c10>
    6024:	d8800717 	ldw	r2,28(sp)
    6028:	003bd006 	br	4f6c <__alt_data_end+0x80004f6c>
    602c:	d9000a17 	ldw	r4,40(sp)
    6030:	d9800d17 	ldw	r6,52(sp)
    6034:	dd400a15 	stw	r21,40(sp)
    6038:	a905c83a 	sub	r2,r21,r4
    603c:	308d883a 	add	r6,r6,r2
    6040:	d9800d15 	stw	r6,52(sp)
    6044:	002b883a 	mov	r21,zero
    6048:	003e0606 	br	5864 <__alt_data_end+0x80005864>
    604c:	9023883a 	mov	r17,r18
    6050:	9829883a 	mov	r20,r19
    6054:	04000084 	movi	r16,2
    6058:	003c9206 	br	52a4 <__alt_data_end+0x800052a4>
    605c:	04000044 	movi	r16,1
    6060:	dc000c15 	stw	r16,48(sp)
    6064:	dc000615 	stw	r16,24(sp)
    6068:	dc002215 	stw	r16,136(sp)
    606c:	e0001115 	stw	zero,68(fp)
    6070:	000b883a 	mov	r5,zero
    6074:	003c6906 	br	521c <__alt_data_end+0x8000521c>
    6078:	3021883a 	mov	r16,r6
    607c:	003ffb06 	br	606c <__alt_data_end+0x8000606c>
    6080:	1000021e 	bne	r2,zero,608c <_dtoa_r+0x11e0>
    6084:	4200004c 	andi	r8,r8,1
    6088:	403e7d1e 	bne	r8,zero,5a80 <__alt_data_end+0x80005a80>
    608c:	01000c04 	movi	r4,48
    6090:	00000106 	br	6098 <_dtoa_r+0x11ec>
    6094:	102f883a 	mov	r23,r2
    6098:	b8bfffc4 	addi	r2,r23,-1
    609c:	10c00007 	ldb	r3,0(r2)
    60a0:	193ffc26 	beq	r3,r4,6094 <__alt_data_end+0x80006094>
    60a4:	003e8706 	br	5ac4 <__alt_data_end+0x80005ac4>
    60a8:	d8800517 	ldw	r2,20(sp)
    60ac:	00a3c83a 	sub	r17,zero,r2
    60b0:	8800a426 	beq	r17,zero,6344 <_dtoa_r+0x1498>
    60b4:	888003cc 	andi	r2,r17,15
    60b8:	100490fa 	slli	r2,r2,3
    60bc:	00d00034 	movhi	r3,16384
    60c0:	18c06b04 	addi	r3,r3,428
    60c4:	1885883a 	add	r2,r3,r2
    60c8:	11800017 	ldw	r6,0(r2)
    60cc:	11c00117 	ldw	r7,4(r2)
    60d0:	9009883a 	mov	r4,r18
    60d4:	980b883a 	mov	r5,r19
    60d8:	8823d13a 	srai	r17,r17,4
    60dc:	000ce3c0 	call	ce3c <__muldf3>
    60e0:	d8800f15 	stw	r2,60(sp)
    60e4:	d8c01015 	stw	r3,64(sp)
    60e8:	8800e826 	beq	r17,zero,648c <_dtoa_r+0x15e0>
    60ec:	05100034 	movhi	r20,16384
    60f0:	a5006104 	addi	r20,r20,388
    60f4:	04000084 	movi	r16,2
    60f8:	8980004c 	andi	r6,r17,1
    60fc:	1009883a 	mov	r4,r2
    6100:	8823d07a 	srai	r17,r17,1
    6104:	180b883a 	mov	r5,r3
    6108:	30000426 	beq	r6,zero,611c <_dtoa_r+0x1270>
    610c:	a1800017 	ldw	r6,0(r20)
    6110:	a1c00117 	ldw	r7,4(r20)
    6114:	84000044 	addi	r16,r16,1
    6118:	000ce3c0 	call	ce3c <__muldf3>
    611c:	a5000204 	addi	r20,r20,8
    6120:	883ff51e 	bne	r17,zero,60f8 <__alt_data_end+0x800060f8>
    6124:	d8800f15 	stw	r2,60(sp)
    6128:	d8c01015 	stw	r3,64(sp)
    612c:	003c7606 	br	5308 <__alt_data_end+0x80005308>
    6130:	00c00c04 	movi	r3,48
    6134:	10c00005 	stb	r3,0(r2)
    6138:	d8c00517 	ldw	r3,20(sp)
    613c:	bd3fffc3 	ldbu	r20,-1(r23)
    6140:	18c00044 	addi	r3,r3,1
    6144:	d8c00515 	stw	r3,20(sp)
    6148:	003db906 	br	5830 <__alt_data_end+0x80005830>
    614c:	89400117 	ldw	r5,4(r17)
    6150:	e009883a 	mov	r4,fp
    6154:	0007bb80 	call	7bb8 <_Balloc>
    6158:	89800417 	ldw	r6,16(r17)
    615c:	89400304 	addi	r5,r17,12
    6160:	11000304 	addi	r4,r2,12
    6164:	31800084 	addi	r6,r6,2
    6168:	318d883a 	add	r6,r6,r6
    616c:	318d883a 	add	r6,r6,r6
    6170:	1027883a 	mov	r19,r2
    6174:	00079140 	call	7914 <memcpy>
    6178:	01800044 	movi	r6,1
    617c:	980b883a 	mov	r5,r19
    6180:	e009883a 	mov	r4,fp
    6184:	00083380 	call	8338 <__lshift>
    6188:	1029883a 	mov	r20,r2
    618c:	003ecc06 	br	5cc0 <__alt_data_end+0x80005cc0>
    6190:	00800e44 	movi	r2,57
    6194:	90809026 	beq	r18,r2,63d8 <_dtoa_r+0x152c>
    6198:	92000044 	addi	r8,r18,1
    619c:	003f1f06 	br	5e1c <__alt_data_end+0x80005e1c>
    61a0:	9011883a 	mov	r8,r18
    61a4:	8825883a 	mov	r18,r17
    61a8:	a023883a 	mov	r17,r20
    61ac:	003e2906 	br	5a54 <__alt_data_end+0x80005a54>
    61b0:	002b883a 	mov	r21,zero
    61b4:	0023883a 	mov	r17,zero
    61b8:	003f5406 	br	5f0c <__alt_data_end+0x80005f0c>
    61bc:	61bfffc4 	addi	r6,r12,-1
    61c0:	300490fa 	slli	r2,r6,3
    61c4:	00d00034 	movhi	r3,16384
    61c8:	18c06b04 	addi	r3,r3,428
    61cc:	1885883a 	add	r2,r3,r2
    61d0:	11000017 	ldw	r4,0(r2)
    61d4:	11400117 	ldw	r5,4(r2)
    61d8:	d8800717 	ldw	r2,28(sp)
    61dc:	880f883a 	mov	r7,r17
    61e0:	d9801215 	stw	r6,72(sp)
    61e4:	800d883a 	mov	r6,r16
    61e8:	db001615 	stw	r12,88(sp)
    61ec:	15c00044 	addi	r23,r2,1
    61f0:	000ce3c0 	call	ce3c <__muldf3>
    61f4:	d9401017 	ldw	r5,64(sp)
    61f8:	d9000f17 	ldw	r4,60(sp)
    61fc:	d8c01515 	stw	r3,84(sp)
    6200:	d8801415 	stw	r2,80(sp)
    6204:	000de500 	call	de50 <__fixdfsi>
    6208:	1009883a 	mov	r4,r2
    620c:	1021883a 	mov	r16,r2
    6210:	000ded00 	call	ded0 <__floatsidf>
    6214:	d9000f17 	ldw	r4,60(sp)
    6218:	d9401017 	ldw	r5,64(sp)
    621c:	100d883a 	mov	r6,r2
    6220:	180f883a 	mov	r7,r3
    6224:	000d5540 	call	d554 <__subdf3>
    6228:	1829883a 	mov	r20,r3
    622c:	d8c00717 	ldw	r3,28(sp)
    6230:	84000c04 	addi	r16,r16,48
    6234:	1023883a 	mov	r17,r2
    6238:	1c000005 	stb	r16,0(r3)
    623c:	db001617 	ldw	r12,88(sp)
    6240:	00800044 	movi	r2,1
    6244:	60802226 	beq	r12,r2,62d0 <_dtoa_r+0x1424>
    6248:	d9c00717 	ldw	r7,28(sp)
    624c:	8805883a 	mov	r2,r17
    6250:	b82b883a 	mov	r21,r23
    6254:	3b19883a 	add	r12,r7,r12
    6258:	6023883a 	mov	r17,r12
    625c:	a007883a 	mov	r3,r20
    6260:	dc800f15 	stw	r18,60(sp)
    6264:	000d883a 	mov	r6,zero
    6268:	01d00934 	movhi	r7,16420
    626c:	1009883a 	mov	r4,r2
    6270:	180b883a 	mov	r5,r3
    6274:	000ce3c0 	call	ce3c <__muldf3>
    6278:	180b883a 	mov	r5,r3
    627c:	1009883a 	mov	r4,r2
    6280:	1829883a 	mov	r20,r3
    6284:	1025883a 	mov	r18,r2
    6288:	000de500 	call	de50 <__fixdfsi>
    628c:	1009883a 	mov	r4,r2
    6290:	1021883a 	mov	r16,r2
    6294:	000ded00 	call	ded0 <__floatsidf>
    6298:	100d883a 	mov	r6,r2
    629c:	180f883a 	mov	r7,r3
    62a0:	9009883a 	mov	r4,r18
    62a4:	a00b883a 	mov	r5,r20
    62a8:	84000c04 	addi	r16,r16,48
    62ac:	000d5540 	call	d554 <__subdf3>
    62b0:	ad400044 	addi	r21,r21,1
    62b4:	ac3fffc5 	stb	r16,-1(r21)
    62b8:	ac7fea1e 	bne	r21,r17,6264 <__alt_data_end+0x80006264>
    62bc:	1023883a 	mov	r17,r2
    62c0:	d8801217 	ldw	r2,72(sp)
    62c4:	dc800f17 	ldw	r18,60(sp)
    62c8:	1829883a 	mov	r20,r3
    62cc:	b8af883a 	add	r23,r23,r2
    62d0:	d9001417 	ldw	r4,80(sp)
    62d4:	d9401517 	ldw	r5,84(sp)
    62d8:	000d883a 	mov	r6,zero
    62dc:	01cff834 	movhi	r7,16352
    62e0:	000ba500 	call	ba50 <__adddf3>
    62e4:	880d883a 	mov	r6,r17
    62e8:	a00f883a 	mov	r7,r20
    62ec:	1009883a 	mov	r4,r2
    62f0:	180b883a 	mov	r5,r3
    62f4:	000cd480 	call	cd48 <__ledf2>
    62f8:	10003e0e 	bge	r2,zero,63f4 <_dtoa_r+0x1548>
    62fc:	d9001317 	ldw	r4,76(sp)
    6300:	bd3fffc3 	ldbu	r20,-1(r23)
    6304:	d9000515 	stw	r4,20(sp)
    6308:	003d3b06 	br	57f8 <__alt_data_end+0x800057f8>
    630c:	0027883a 	mov	r19,zero
    6310:	003f1b06 	br	5f80 <__alt_data_end+0x80005f80>
    6314:	d8800817 	ldw	r2,32(sp)
    6318:	11e9c83a 	sub	r20,r2,r7
    631c:	0005883a 	mov	r2,zero
    6320:	003d5406 	br	5874 <__alt_data_end+0x80005874>
    6324:	00800044 	movi	r2,1
    6328:	003dc706 	br	5a48 <__alt_data_end+0x80005a48>
    632c:	d8c00217 	ldw	r3,8(sp)
    6330:	00800d84 	movi	r2,54
    6334:	dd400a17 	ldw	r21,40(sp)
    6338:	10c5c83a 	sub	r2,r2,r3
    633c:	dd000817 	ldw	r20,32(sp)
    6340:	003d4c06 	br	5874 <__alt_data_end+0x80005874>
    6344:	dc800f15 	stw	r18,60(sp)
    6348:	dcc01015 	stw	r19,64(sp)
    634c:	04000084 	movi	r16,2
    6350:	003bed06 	br	5308 <__alt_data_end+0x80005308>
    6354:	d9000617 	ldw	r4,24(sp)
    6358:	203f0d26 	beq	r4,zero,5f90 <__alt_data_end+0x80005f90>
    635c:	d9800c17 	ldw	r6,48(sp)
    6360:	01bcab0e 	bge	zero,r6,5610 <__alt_data_end+0x80005610>
    6364:	d9401017 	ldw	r5,64(sp)
    6368:	d9000f17 	ldw	r4,60(sp)
    636c:	000d883a 	mov	r6,zero
    6370:	01d00934 	movhi	r7,16420
    6374:	000ce3c0 	call	ce3c <__muldf3>
    6378:	81000044 	addi	r4,r16,1
    637c:	d8800f15 	stw	r2,60(sp)
    6380:	d8c01015 	stw	r3,64(sp)
    6384:	000ded00 	call	ded0 <__floatsidf>
    6388:	d9800f17 	ldw	r6,60(sp)
    638c:	d9c01017 	ldw	r7,64(sp)
    6390:	1009883a 	mov	r4,r2
    6394:	180b883a 	mov	r5,r3
    6398:	000ce3c0 	call	ce3c <__muldf3>
    639c:	01d00734 	movhi	r7,16412
    63a0:	000d883a 	mov	r6,zero
    63a4:	1009883a 	mov	r4,r2
    63a8:	180b883a 	mov	r5,r3
    63ac:	000ba500 	call	ba50 <__adddf3>
    63b0:	d9c00517 	ldw	r7,20(sp)
    63b4:	047f3034 	movhi	r17,64704
    63b8:	1021883a 	mov	r16,r2
    63bc:	39ffffc4 	addi	r7,r7,-1
    63c0:	d9c01315 	stw	r7,76(sp)
    63c4:	1c63883a 	add	r17,r3,r17
    63c8:	db000c17 	ldw	r12,48(sp)
    63cc:	003bea06 	br	5378 <__alt_data_end+0x80005378>
    63d0:	dc000915 	stw	r16,36(sp)
    63d4:	003e0e06 	br	5c10 <__alt_data_end+0x80005c10>
    63d8:	01000e44 	movi	r4,57
    63dc:	8825883a 	mov	r18,r17
    63e0:	9dc00044 	addi	r23,r19,1
    63e4:	99000005 	stb	r4,0(r19)
    63e8:	a023883a 	mov	r17,r20
    63ec:	dc000915 	stw	r16,36(sp)
    63f0:	003da406 	br	5a84 <__alt_data_end+0x80005a84>
    63f4:	d9801417 	ldw	r6,80(sp)
    63f8:	d9c01517 	ldw	r7,84(sp)
    63fc:	0009883a 	mov	r4,zero
    6400:	014ff834 	movhi	r5,16352
    6404:	000d5540 	call	d554 <__subdf3>
    6408:	880d883a 	mov	r6,r17
    640c:	a00f883a 	mov	r7,r20
    6410:	1009883a 	mov	r4,r2
    6414:	180b883a 	mov	r5,r3
    6418:	000cc6c0 	call	cc6c <__gedf2>
    641c:	00bc7c0e 	bge	zero,r2,5610 <__alt_data_end+0x80005610>
    6420:	01000c04 	movi	r4,48
    6424:	00000106 	br	642c <_dtoa_r+0x1580>
    6428:	102f883a 	mov	r23,r2
    642c:	b8bfffc4 	addi	r2,r23,-1
    6430:	10c00007 	ldb	r3,0(r2)
    6434:	193ffc26 	beq	r3,r4,6428 <__alt_data_end+0x80006428>
    6438:	d9801317 	ldw	r6,76(sp)
    643c:	d9800515 	stw	r6,20(sp)
    6440:	003c4406 	br	5554 <__alt_data_end+0x80005554>
    6444:	d9801317 	ldw	r6,76(sp)
    6448:	d9800515 	stw	r6,20(sp)
    644c:	003cea06 	br	57f8 <__alt_data_end+0x800057f8>
    6450:	dd800f17 	ldw	r22,60(sp)
    6454:	dcc01017 	ldw	r19,64(sp)
    6458:	dc801217 	ldw	r18,72(sp)
    645c:	003c6c06 	br	5610 <__alt_data_end+0x80005610>
    6460:	903e031e 	bne	r18,zero,5c70 <__alt_data_end+0x80005c70>
    6464:	003ebb06 	br	5f54 <__alt_data_end+0x80005f54>
    6468:	103e6c1e 	bne	r2,zero,5e1c <__alt_data_end+0x80005e1c>
    646c:	4080004c 	andi	r2,r8,1
    6470:	103e6a26 	beq	r2,zero,5e1c <__alt_data_end+0x80005e1c>
    6474:	003e6606 	br	5e10 <__alt_data_end+0x80005e10>
    6478:	d8c00317 	ldw	r3,12(sp)
    647c:	00800084 	movi	r2,2
    6480:	10c02916 	blt	r2,r3,6528 <_dtoa_r+0x167c>
    6484:	d9000c17 	ldw	r4,48(sp)
    6488:	003e8806 	br	5eac <__alt_data_end+0x80005eac>
    648c:	04000084 	movi	r16,2
    6490:	003b9d06 	br	5308 <__alt_data_end+0x80005308>
    6494:	d9001317 	ldw	r4,76(sp)
    6498:	d9000515 	stw	r4,20(sp)
    649c:	003cd606 	br	57f8 <__alt_data_end+0x800057f8>
    64a0:	d8801317 	ldw	r2,76(sp)
    64a4:	d8800515 	stw	r2,20(sp)
    64a8:	003c2a06 	br	5554 <__alt_data_end+0x80005554>
    64ac:	d9800317 	ldw	r6,12(sp)
    64b0:	00800084 	movi	r2,2
    64b4:	11801516 	blt	r2,r6,650c <_dtoa_r+0x1660>
    64b8:	d9c00c17 	ldw	r7,48(sp)
    64bc:	d9c00615 	stw	r7,24(sp)
    64c0:	003df706 	br	5ca0 <__alt_data_end+0x80005ca0>
    64c4:	193d3926 	beq	r3,r4,59ac <__alt_data_end+0x800059ac>
    64c8:	00c00f04 	movi	r3,60
    64cc:	1885c83a 	sub	r2,r3,r2
    64d0:	003ddf06 	br	5c50 <__alt_data_end+0x80005c50>
    64d4:	e009883a 	mov	r4,fp
    64d8:	e0001115 	stw	zero,68(fp)
    64dc:	000b883a 	mov	r5,zero
    64e0:	0007bb80 	call	7bb8 <_Balloc>
    64e4:	d8800715 	stw	r2,28(sp)
    64e8:	d8c00717 	ldw	r3,28(sp)
    64ec:	00bfffc4 	movi	r2,-1
    64f0:	01000044 	movi	r4,1
    64f4:	d8800c15 	stw	r2,48(sp)
    64f8:	e0c01015 	stw	r3,64(fp)
    64fc:	d9000b15 	stw	r4,44(sp)
    6500:	d8800615 	stw	r2,24(sp)
    6504:	d8002215 	stw	zero,136(sp)
    6508:	003c4106 	br	5610 <__alt_data_end+0x80005610>
    650c:	d8c00c17 	ldw	r3,48(sp)
    6510:	d8c00615 	stw	r3,24(sp)
    6514:	003e7006 	br	5ed8 <__alt_data_end+0x80005ed8>
    6518:	04400044 	movi	r17,1
    651c:	003b2006 	br	51a0 <__alt_data_end+0x800051a0>
    6520:	000b883a 	mov	r5,zero
    6524:	003b3d06 	br	521c <__alt_data_end+0x8000521c>
    6528:	d8800c17 	ldw	r2,48(sp)
    652c:	d8800615 	stw	r2,24(sp)
    6530:	003e6906 	br	5ed8 <__alt_data_end+0x80005ed8>

00006534 <__sflush_r>:
    6534:	2880030b 	ldhu	r2,12(r5)
    6538:	defffb04 	addi	sp,sp,-20
    653c:	dcc00315 	stw	r19,12(sp)
    6540:	dc400115 	stw	r17,4(sp)
    6544:	dfc00415 	stw	ra,16(sp)
    6548:	dc800215 	stw	r18,8(sp)
    654c:	dc000015 	stw	r16,0(sp)
    6550:	10c0020c 	andi	r3,r2,8
    6554:	2823883a 	mov	r17,r5
    6558:	2027883a 	mov	r19,r4
    655c:	1800311e 	bne	r3,zero,6624 <__sflush_r+0xf0>
    6560:	28c00117 	ldw	r3,4(r5)
    6564:	10820014 	ori	r2,r2,2048
    6568:	2880030d 	sth	r2,12(r5)
    656c:	00c04b0e 	bge	zero,r3,669c <__sflush_r+0x168>
    6570:	8a000a17 	ldw	r8,40(r17)
    6574:	40002326 	beq	r8,zero,6604 <__sflush_r+0xd0>
    6578:	9c000017 	ldw	r16,0(r19)
    657c:	10c4000c 	andi	r3,r2,4096
    6580:	98000015 	stw	zero,0(r19)
    6584:	18004826 	beq	r3,zero,66a8 <__sflush_r+0x174>
    6588:	89801417 	ldw	r6,80(r17)
    658c:	10c0010c 	andi	r3,r2,4
    6590:	18000626 	beq	r3,zero,65ac <__sflush_r+0x78>
    6594:	88c00117 	ldw	r3,4(r17)
    6598:	88800c17 	ldw	r2,48(r17)
    659c:	30cdc83a 	sub	r6,r6,r3
    65a0:	10000226 	beq	r2,zero,65ac <__sflush_r+0x78>
    65a4:	88800f17 	ldw	r2,60(r17)
    65a8:	308dc83a 	sub	r6,r6,r2
    65ac:	89400717 	ldw	r5,28(r17)
    65b0:	000f883a 	mov	r7,zero
    65b4:	9809883a 	mov	r4,r19
    65b8:	403ee83a 	callr	r8
    65bc:	00ffffc4 	movi	r3,-1
    65c0:	10c04426 	beq	r2,r3,66d4 <__sflush_r+0x1a0>
    65c4:	88c0030b 	ldhu	r3,12(r17)
    65c8:	89000417 	ldw	r4,16(r17)
    65cc:	88000115 	stw	zero,4(r17)
    65d0:	197dffcc 	andi	r5,r3,63487
    65d4:	8940030d 	sth	r5,12(r17)
    65d8:	89000015 	stw	r4,0(r17)
    65dc:	18c4000c 	andi	r3,r3,4096
    65e0:	18002c1e 	bne	r3,zero,6694 <__sflush_r+0x160>
    65e4:	89400c17 	ldw	r5,48(r17)
    65e8:	9c000015 	stw	r16,0(r19)
    65ec:	28000526 	beq	r5,zero,6604 <__sflush_r+0xd0>
    65f0:	88801004 	addi	r2,r17,64
    65f4:	28800226 	beq	r5,r2,6600 <__sflush_r+0xcc>
    65f8:	9809883a 	mov	r4,r19
    65fc:	0006d4c0 	call	6d4c <_free_r>
    6600:	88000c15 	stw	zero,48(r17)
    6604:	0005883a 	mov	r2,zero
    6608:	dfc00417 	ldw	ra,16(sp)
    660c:	dcc00317 	ldw	r19,12(sp)
    6610:	dc800217 	ldw	r18,8(sp)
    6614:	dc400117 	ldw	r17,4(sp)
    6618:	dc000017 	ldw	r16,0(sp)
    661c:	dec00504 	addi	sp,sp,20
    6620:	f800283a 	ret
    6624:	2c800417 	ldw	r18,16(r5)
    6628:	903ff626 	beq	r18,zero,6604 <__alt_data_end+0x80006604>
    662c:	2c000017 	ldw	r16,0(r5)
    6630:	108000cc 	andi	r2,r2,3
    6634:	2c800015 	stw	r18,0(r5)
    6638:	84a1c83a 	sub	r16,r16,r18
    663c:	1000131e 	bne	r2,zero,668c <__sflush_r+0x158>
    6640:	28800517 	ldw	r2,20(r5)
    6644:	88800215 	stw	r2,8(r17)
    6648:	04000316 	blt	zero,r16,6658 <__sflush_r+0x124>
    664c:	003fed06 	br	6604 <__alt_data_end+0x80006604>
    6650:	90a5883a 	add	r18,r18,r2
    6654:	043feb0e 	bge	zero,r16,6604 <__alt_data_end+0x80006604>
    6658:	88800917 	ldw	r2,36(r17)
    665c:	89400717 	ldw	r5,28(r17)
    6660:	800f883a 	mov	r7,r16
    6664:	900d883a 	mov	r6,r18
    6668:	9809883a 	mov	r4,r19
    666c:	103ee83a 	callr	r2
    6670:	80a1c83a 	sub	r16,r16,r2
    6674:	00bff616 	blt	zero,r2,6650 <__alt_data_end+0x80006650>
    6678:	88c0030b 	ldhu	r3,12(r17)
    667c:	00bfffc4 	movi	r2,-1
    6680:	18c01014 	ori	r3,r3,64
    6684:	88c0030d 	sth	r3,12(r17)
    6688:	003fdf06 	br	6608 <__alt_data_end+0x80006608>
    668c:	0005883a 	mov	r2,zero
    6690:	003fec06 	br	6644 <__alt_data_end+0x80006644>
    6694:	88801415 	stw	r2,80(r17)
    6698:	003fd206 	br	65e4 <__alt_data_end+0x800065e4>
    669c:	28c00f17 	ldw	r3,60(r5)
    66a0:	00ffb316 	blt	zero,r3,6570 <__alt_data_end+0x80006570>
    66a4:	003fd706 	br	6604 <__alt_data_end+0x80006604>
    66a8:	89400717 	ldw	r5,28(r17)
    66ac:	000d883a 	mov	r6,zero
    66b0:	01c00044 	movi	r7,1
    66b4:	9809883a 	mov	r4,r19
    66b8:	403ee83a 	callr	r8
    66bc:	100d883a 	mov	r6,r2
    66c0:	00bfffc4 	movi	r2,-1
    66c4:	30801426 	beq	r6,r2,6718 <__sflush_r+0x1e4>
    66c8:	8880030b 	ldhu	r2,12(r17)
    66cc:	8a000a17 	ldw	r8,40(r17)
    66d0:	003fae06 	br	658c <__alt_data_end+0x8000658c>
    66d4:	98c00017 	ldw	r3,0(r19)
    66d8:	183fba26 	beq	r3,zero,65c4 <__alt_data_end+0x800065c4>
    66dc:	01000744 	movi	r4,29
    66e0:	19000626 	beq	r3,r4,66fc <__sflush_r+0x1c8>
    66e4:	01000584 	movi	r4,22
    66e8:	19000426 	beq	r3,r4,66fc <__sflush_r+0x1c8>
    66ec:	88c0030b 	ldhu	r3,12(r17)
    66f0:	18c01014 	ori	r3,r3,64
    66f4:	88c0030d 	sth	r3,12(r17)
    66f8:	003fc306 	br	6608 <__alt_data_end+0x80006608>
    66fc:	8880030b 	ldhu	r2,12(r17)
    6700:	88c00417 	ldw	r3,16(r17)
    6704:	88000115 	stw	zero,4(r17)
    6708:	10bdffcc 	andi	r2,r2,63487
    670c:	8880030d 	sth	r2,12(r17)
    6710:	88c00015 	stw	r3,0(r17)
    6714:	003fb306 	br	65e4 <__alt_data_end+0x800065e4>
    6718:	98800017 	ldw	r2,0(r19)
    671c:	103fea26 	beq	r2,zero,66c8 <__alt_data_end+0x800066c8>
    6720:	00c00744 	movi	r3,29
    6724:	10c00226 	beq	r2,r3,6730 <__sflush_r+0x1fc>
    6728:	00c00584 	movi	r3,22
    672c:	10c0031e 	bne	r2,r3,673c <__sflush_r+0x208>
    6730:	9c000015 	stw	r16,0(r19)
    6734:	0005883a 	mov	r2,zero
    6738:	003fb306 	br	6608 <__alt_data_end+0x80006608>
    673c:	88c0030b 	ldhu	r3,12(r17)
    6740:	3005883a 	mov	r2,r6
    6744:	18c01014 	ori	r3,r3,64
    6748:	88c0030d 	sth	r3,12(r17)
    674c:	003fae06 	br	6608 <__alt_data_end+0x80006608>

00006750 <_fflush_r>:
    6750:	defffd04 	addi	sp,sp,-12
    6754:	dc000115 	stw	r16,4(sp)
    6758:	dfc00215 	stw	ra,8(sp)
    675c:	2021883a 	mov	r16,r4
    6760:	20000226 	beq	r4,zero,676c <_fflush_r+0x1c>
    6764:	20800e17 	ldw	r2,56(r4)
    6768:	10000c26 	beq	r2,zero,679c <_fflush_r+0x4c>
    676c:	2880030f 	ldh	r2,12(r5)
    6770:	1000051e 	bne	r2,zero,6788 <_fflush_r+0x38>
    6774:	0005883a 	mov	r2,zero
    6778:	dfc00217 	ldw	ra,8(sp)
    677c:	dc000117 	ldw	r16,4(sp)
    6780:	dec00304 	addi	sp,sp,12
    6784:	f800283a 	ret
    6788:	8009883a 	mov	r4,r16
    678c:	dfc00217 	ldw	ra,8(sp)
    6790:	dc000117 	ldw	r16,4(sp)
    6794:	dec00304 	addi	sp,sp,12
    6798:	00065341 	jmpi	6534 <__sflush_r>
    679c:	d9400015 	stw	r5,0(sp)
    67a0:	0006b2c0 	call	6b2c <__sinit>
    67a4:	d9400017 	ldw	r5,0(sp)
    67a8:	003ff006 	br	676c <__alt_data_end+0x8000676c>

000067ac <fflush>:
    67ac:	20000526 	beq	r4,zero,67c4 <fflush+0x18>
    67b0:	00900034 	movhi	r2,16384
    67b4:	10885204 	addi	r2,r2,8520
    67b8:	200b883a 	mov	r5,r4
    67bc:	11000017 	ldw	r4,0(r2)
    67c0:	00067501 	jmpi	6750 <_fflush_r>
    67c4:	00900034 	movhi	r2,16384
    67c8:	10885104 	addi	r2,r2,8516
    67cc:	11000017 	ldw	r4,0(r2)
    67d0:	01400034 	movhi	r5,0
    67d4:	2959d404 	addi	r5,r5,26448
    67d8:	00075dc1 	jmpi	75dc <_fwalk_reent>

000067dc <__fp_unlock>:
    67dc:	0005883a 	mov	r2,zero
    67e0:	f800283a 	ret

000067e4 <_cleanup_r>:
    67e4:	01400074 	movhi	r5,1
    67e8:	296a3e04 	addi	r5,r5,-22280
    67ec:	00075dc1 	jmpi	75dc <_fwalk_reent>

000067f0 <__sinit.part.1>:
    67f0:	defff704 	addi	sp,sp,-36
    67f4:	00c00034 	movhi	r3,0
    67f8:	dfc00815 	stw	ra,32(sp)
    67fc:	ddc00715 	stw	r23,28(sp)
    6800:	dd800615 	stw	r22,24(sp)
    6804:	dd400515 	stw	r21,20(sp)
    6808:	dd000415 	stw	r20,16(sp)
    680c:	dcc00315 	stw	r19,12(sp)
    6810:	dc800215 	stw	r18,8(sp)
    6814:	dc400115 	stw	r17,4(sp)
    6818:	dc000015 	stw	r16,0(sp)
    681c:	18d9f904 	addi	r3,r3,26596
    6820:	24000117 	ldw	r16,4(r4)
    6824:	20c00f15 	stw	r3,60(r4)
    6828:	2080bb04 	addi	r2,r4,748
    682c:	00c000c4 	movi	r3,3
    6830:	20c0b915 	stw	r3,740(r4)
    6834:	2080ba15 	stw	r2,744(r4)
    6838:	2000b815 	stw	zero,736(r4)
    683c:	05c00204 	movi	r23,8
    6840:	00800104 	movi	r2,4
    6844:	2025883a 	mov	r18,r4
    6848:	b80d883a 	mov	r6,r23
    684c:	81001704 	addi	r4,r16,92
    6850:	000b883a 	mov	r5,zero
    6854:	80000015 	stw	zero,0(r16)
    6858:	80000115 	stw	zero,4(r16)
    685c:	80000215 	stw	zero,8(r16)
    6860:	8080030d 	sth	r2,12(r16)
    6864:	80001915 	stw	zero,100(r16)
    6868:	8000038d 	sth	zero,14(r16)
    686c:	80000415 	stw	zero,16(r16)
    6870:	80000515 	stw	zero,20(r16)
    6874:	80000615 	stw	zero,24(r16)
    6878:	0001cac0 	call	1cac <memset>
    687c:	05800034 	movhi	r22,0
    6880:	94400217 	ldw	r17,8(r18)
    6884:	05400034 	movhi	r21,0
    6888:	05000034 	movhi	r20,0
    688c:	04c00034 	movhi	r19,0
    6890:	b588f204 	addi	r22,r22,9160
    6894:	ad490904 	addi	r21,r21,9252
    6898:	a5092804 	addi	r20,r20,9376
    689c:	9cc93f04 	addi	r19,r19,9468
    68a0:	85800815 	stw	r22,32(r16)
    68a4:	85400915 	stw	r21,36(r16)
    68a8:	85000a15 	stw	r20,40(r16)
    68ac:	84c00b15 	stw	r19,44(r16)
    68b0:	84000715 	stw	r16,28(r16)
    68b4:	00800284 	movi	r2,10
    68b8:	8880030d 	sth	r2,12(r17)
    68bc:	00800044 	movi	r2,1
    68c0:	b80d883a 	mov	r6,r23
    68c4:	89001704 	addi	r4,r17,92
    68c8:	000b883a 	mov	r5,zero
    68cc:	88000015 	stw	zero,0(r17)
    68d0:	88000115 	stw	zero,4(r17)
    68d4:	88000215 	stw	zero,8(r17)
    68d8:	88001915 	stw	zero,100(r17)
    68dc:	8880038d 	sth	r2,14(r17)
    68e0:	88000415 	stw	zero,16(r17)
    68e4:	88000515 	stw	zero,20(r17)
    68e8:	88000615 	stw	zero,24(r17)
    68ec:	0001cac0 	call	1cac <memset>
    68f0:	94000317 	ldw	r16,12(r18)
    68f4:	00800484 	movi	r2,18
    68f8:	8c400715 	stw	r17,28(r17)
    68fc:	8d800815 	stw	r22,32(r17)
    6900:	8d400915 	stw	r21,36(r17)
    6904:	8d000a15 	stw	r20,40(r17)
    6908:	8cc00b15 	stw	r19,44(r17)
    690c:	8080030d 	sth	r2,12(r16)
    6910:	00800084 	movi	r2,2
    6914:	80000015 	stw	zero,0(r16)
    6918:	80000115 	stw	zero,4(r16)
    691c:	80000215 	stw	zero,8(r16)
    6920:	80001915 	stw	zero,100(r16)
    6924:	8080038d 	sth	r2,14(r16)
    6928:	80000415 	stw	zero,16(r16)
    692c:	80000515 	stw	zero,20(r16)
    6930:	80000615 	stw	zero,24(r16)
    6934:	b80d883a 	mov	r6,r23
    6938:	000b883a 	mov	r5,zero
    693c:	81001704 	addi	r4,r16,92
    6940:	0001cac0 	call	1cac <memset>
    6944:	00800044 	movi	r2,1
    6948:	84000715 	stw	r16,28(r16)
    694c:	85800815 	stw	r22,32(r16)
    6950:	85400915 	stw	r21,36(r16)
    6954:	85000a15 	stw	r20,40(r16)
    6958:	84c00b15 	stw	r19,44(r16)
    695c:	90800e15 	stw	r2,56(r18)
    6960:	dfc00817 	ldw	ra,32(sp)
    6964:	ddc00717 	ldw	r23,28(sp)
    6968:	dd800617 	ldw	r22,24(sp)
    696c:	dd400517 	ldw	r21,20(sp)
    6970:	dd000417 	ldw	r20,16(sp)
    6974:	dcc00317 	ldw	r19,12(sp)
    6978:	dc800217 	ldw	r18,8(sp)
    697c:	dc400117 	ldw	r17,4(sp)
    6980:	dc000017 	ldw	r16,0(sp)
    6984:	dec00904 	addi	sp,sp,36
    6988:	f800283a 	ret

0000698c <__fp_lock>:
    698c:	0005883a 	mov	r2,zero
    6990:	f800283a 	ret

00006994 <__sfmoreglue>:
    6994:	defffc04 	addi	sp,sp,-16
    6998:	dc400115 	stw	r17,4(sp)
    699c:	2c7fffc4 	addi	r17,r5,-1
    69a0:	8c401a24 	muli	r17,r17,104
    69a4:	dc800215 	stw	r18,8(sp)
    69a8:	2825883a 	mov	r18,r5
    69ac:	89401d04 	addi	r5,r17,116
    69b0:	dc000015 	stw	r16,0(sp)
    69b4:	dfc00315 	stw	ra,12(sp)
    69b8:	00014a00 	call	14a0 <_malloc_r>
    69bc:	1021883a 	mov	r16,r2
    69c0:	10000726 	beq	r2,zero,69e0 <__sfmoreglue+0x4c>
    69c4:	11000304 	addi	r4,r2,12
    69c8:	10000015 	stw	zero,0(r2)
    69cc:	14800115 	stw	r18,4(r2)
    69d0:	11000215 	stw	r4,8(r2)
    69d4:	89801a04 	addi	r6,r17,104
    69d8:	000b883a 	mov	r5,zero
    69dc:	0001cac0 	call	1cac <memset>
    69e0:	8005883a 	mov	r2,r16
    69e4:	dfc00317 	ldw	ra,12(sp)
    69e8:	dc800217 	ldw	r18,8(sp)
    69ec:	dc400117 	ldw	r17,4(sp)
    69f0:	dc000017 	ldw	r16,0(sp)
    69f4:	dec00404 	addi	sp,sp,16
    69f8:	f800283a 	ret

000069fc <__sfp>:
    69fc:	defffb04 	addi	sp,sp,-20
    6a00:	dc000015 	stw	r16,0(sp)
    6a04:	04100034 	movhi	r16,16384
    6a08:	84085104 	addi	r16,r16,8516
    6a0c:	dcc00315 	stw	r19,12(sp)
    6a10:	2027883a 	mov	r19,r4
    6a14:	81000017 	ldw	r4,0(r16)
    6a18:	dfc00415 	stw	ra,16(sp)
    6a1c:	dc800215 	stw	r18,8(sp)
    6a20:	20800e17 	ldw	r2,56(r4)
    6a24:	dc400115 	stw	r17,4(sp)
    6a28:	1000021e 	bne	r2,zero,6a34 <__sfp+0x38>
    6a2c:	00067f00 	call	67f0 <__sinit.part.1>
    6a30:	81000017 	ldw	r4,0(r16)
    6a34:	2480b804 	addi	r18,r4,736
    6a38:	047fffc4 	movi	r17,-1
    6a3c:	91000117 	ldw	r4,4(r18)
    6a40:	94000217 	ldw	r16,8(r18)
    6a44:	213fffc4 	addi	r4,r4,-1
    6a48:	20000a16 	blt	r4,zero,6a74 <__sfp+0x78>
    6a4c:	8080030f 	ldh	r2,12(r16)
    6a50:	10000c26 	beq	r2,zero,6a84 <__sfp+0x88>
    6a54:	80c01d04 	addi	r3,r16,116
    6a58:	00000206 	br	6a64 <__sfp+0x68>
    6a5c:	18bfe60f 	ldh	r2,-104(r3)
    6a60:	10000826 	beq	r2,zero,6a84 <__sfp+0x88>
    6a64:	213fffc4 	addi	r4,r4,-1
    6a68:	1c3ffd04 	addi	r16,r3,-12
    6a6c:	18c01a04 	addi	r3,r3,104
    6a70:	247ffa1e 	bne	r4,r17,6a5c <__alt_data_end+0x80006a5c>
    6a74:	90800017 	ldw	r2,0(r18)
    6a78:	10001d26 	beq	r2,zero,6af0 <__sfp+0xf4>
    6a7c:	1025883a 	mov	r18,r2
    6a80:	003fee06 	br	6a3c <__alt_data_end+0x80006a3c>
    6a84:	00bfffc4 	movi	r2,-1
    6a88:	8080038d 	sth	r2,14(r16)
    6a8c:	00800044 	movi	r2,1
    6a90:	8080030d 	sth	r2,12(r16)
    6a94:	80001915 	stw	zero,100(r16)
    6a98:	80000015 	stw	zero,0(r16)
    6a9c:	80000215 	stw	zero,8(r16)
    6aa0:	80000115 	stw	zero,4(r16)
    6aa4:	80000415 	stw	zero,16(r16)
    6aa8:	80000515 	stw	zero,20(r16)
    6aac:	80000615 	stw	zero,24(r16)
    6ab0:	01800204 	movi	r6,8
    6ab4:	000b883a 	mov	r5,zero
    6ab8:	81001704 	addi	r4,r16,92
    6abc:	0001cac0 	call	1cac <memset>
    6ac0:	8005883a 	mov	r2,r16
    6ac4:	80000c15 	stw	zero,48(r16)
    6ac8:	80000d15 	stw	zero,52(r16)
    6acc:	80001115 	stw	zero,68(r16)
    6ad0:	80001215 	stw	zero,72(r16)
    6ad4:	dfc00417 	ldw	ra,16(sp)
    6ad8:	dcc00317 	ldw	r19,12(sp)
    6adc:	dc800217 	ldw	r18,8(sp)
    6ae0:	dc400117 	ldw	r17,4(sp)
    6ae4:	dc000017 	ldw	r16,0(sp)
    6ae8:	dec00504 	addi	sp,sp,20
    6aec:	f800283a 	ret
    6af0:	01400104 	movi	r5,4
    6af4:	9809883a 	mov	r4,r19
    6af8:	00069940 	call	6994 <__sfmoreglue>
    6afc:	90800015 	stw	r2,0(r18)
    6b00:	103fde1e 	bne	r2,zero,6a7c <__alt_data_end+0x80006a7c>
    6b04:	00800304 	movi	r2,12
    6b08:	98800015 	stw	r2,0(r19)
    6b0c:	0005883a 	mov	r2,zero
    6b10:	003ff006 	br	6ad4 <__alt_data_end+0x80006ad4>

00006b14 <_cleanup>:
    6b14:	00900034 	movhi	r2,16384
    6b18:	10885104 	addi	r2,r2,8516
    6b1c:	11000017 	ldw	r4,0(r2)
    6b20:	01400074 	movhi	r5,1
    6b24:	296a3e04 	addi	r5,r5,-22280
    6b28:	00075dc1 	jmpi	75dc <_fwalk_reent>

00006b2c <__sinit>:
    6b2c:	20800e17 	ldw	r2,56(r4)
    6b30:	10000126 	beq	r2,zero,6b38 <__sinit+0xc>
    6b34:	f800283a 	ret
    6b38:	00067f01 	jmpi	67f0 <__sinit.part.1>

00006b3c <__sfp_lock_acquire>:
    6b3c:	f800283a 	ret

00006b40 <__sfp_lock_release>:
    6b40:	f800283a 	ret

00006b44 <__sinit_lock_acquire>:
    6b44:	f800283a 	ret

00006b48 <__sinit_lock_release>:
    6b48:	f800283a 	ret

00006b4c <__fp_lock_all>:
    6b4c:	00900034 	movhi	r2,16384
    6b50:	10885204 	addi	r2,r2,8520
    6b54:	11000017 	ldw	r4,0(r2)
    6b58:	01400034 	movhi	r5,0
    6b5c:	295a6304 	addi	r5,r5,27020
    6b60:	00075181 	jmpi	7518 <_fwalk>

00006b64 <__fp_unlock_all>:
    6b64:	00900034 	movhi	r2,16384
    6b68:	10885204 	addi	r2,r2,8520
    6b6c:	11000017 	ldw	r4,0(r2)
    6b70:	01400034 	movhi	r5,0
    6b74:	2959f704 	addi	r5,r5,26588
    6b78:	00075181 	jmpi	7518 <_fwalk>

00006b7c <__sflags>:
    6b7c:	28800007 	ldb	r2,0(r5)
    6b80:	00c01c84 	movi	r3,114
    6b84:	10c02426 	beq	r2,r3,6c18 <__sflags+0x9c>
    6b88:	00c01dc4 	movi	r3,119
    6b8c:	10c01e26 	beq	r2,r3,6c08 <__sflags+0x8c>
    6b90:	00c01844 	movi	r3,97
    6b94:	10c00426 	beq	r2,r3,6ba8 <__sflags+0x2c>
    6b98:	00800584 	movi	r2,22
    6b9c:	20800015 	stw	r2,0(r4)
    6ba0:	0005883a 	mov	r2,zero
    6ba4:	f800283a 	ret
    6ba8:	02c08204 	movi	r11,520
    6bac:	01000044 	movi	r4,1
    6bb0:	00804204 	movi	r2,264
    6bb4:	01c00ac4 	movi	r7,43
    6bb8:	02bff8c4 	movi	r10,-29
    6bbc:	027fff04 	movi	r9,-4
    6bc0:	02001e04 	movi	r8,120
    6bc4:	29400044 	addi	r5,r5,1
    6bc8:	28c00007 	ldb	r3,0(r5)
    6bcc:	18000626 	beq	r3,zero,6be8 <__sflags+0x6c>
    6bd0:	19c00826 	beq	r3,r7,6bf4 <__sflags+0x78>
    6bd4:	1a3ffb1e 	bne	r3,r8,6bc4 <__alt_data_end+0x80006bc4>
    6bd8:	29400044 	addi	r5,r5,1
    6bdc:	28c00007 	ldb	r3,0(r5)
    6be0:	21020014 	ori	r4,r4,2048
    6be4:	183ffa1e 	bne	r3,zero,6bd0 <__alt_data_end+0x80006bd0>
    6be8:	22c8b03a 	or	r4,r4,r11
    6bec:	31000015 	stw	r4,0(r6)
    6bf0:	f800283a 	ret
    6bf4:	1284703a 	and	r2,r2,r10
    6bf8:	2248703a 	and	r4,r4,r9
    6bfc:	10800414 	ori	r2,r2,16
    6c00:	21000094 	ori	r4,r4,2
    6c04:	003fef06 	br	6bc4 <__alt_data_end+0x80006bc4>
    6c08:	02c18004 	movi	r11,1536
    6c0c:	01000044 	movi	r4,1
    6c10:	00800204 	movi	r2,8
    6c14:	003fe706 	br	6bb4 <__alt_data_end+0x80006bb4>
    6c18:	0017883a 	mov	r11,zero
    6c1c:	0009883a 	mov	r4,zero
    6c20:	00800104 	movi	r2,4
    6c24:	003fe306 	br	6bb4 <__alt_data_end+0x80006bb4>

00006c28 <_malloc_trim_r>:
    6c28:	defffb04 	addi	sp,sp,-20
    6c2c:	dcc00315 	stw	r19,12(sp)
    6c30:	04d00034 	movhi	r19,16384
    6c34:	dc800215 	stw	r18,8(sp)
    6c38:	dc400115 	stw	r17,4(sp)
    6c3c:	dc000015 	stw	r16,0(sp)
    6c40:	dfc00415 	stw	ra,16(sp)
    6c44:	2821883a 	mov	r16,r5
    6c48:	9cc22804 	addi	r19,r19,2208
    6c4c:	2025883a 	mov	r18,r4
    6c50:	000e6340 	call	e634 <__malloc_lock>
    6c54:	98800217 	ldw	r2,8(r19)
    6c58:	14400117 	ldw	r17,4(r2)
    6c5c:	00bfff04 	movi	r2,-4
    6c60:	88a2703a 	and	r17,r17,r2
    6c64:	8c21c83a 	sub	r16,r17,r16
    6c68:	8403fbc4 	addi	r16,r16,4079
    6c6c:	8020d33a 	srli	r16,r16,12
    6c70:	0083ffc4 	movi	r2,4095
    6c74:	843fffc4 	addi	r16,r16,-1
    6c78:	8020933a 	slli	r16,r16,12
    6c7c:	1400060e 	bge	r2,r16,6c98 <_malloc_trim_r+0x70>
    6c80:	000b883a 	mov	r5,zero
    6c84:	9009883a 	mov	r4,r18
    6c88:	00023740 	call	2374 <_sbrk_r>
    6c8c:	98c00217 	ldw	r3,8(r19)
    6c90:	1c47883a 	add	r3,r3,r17
    6c94:	10c00a26 	beq	r2,r3,6cc0 <_malloc_trim_r+0x98>
    6c98:	9009883a 	mov	r4,r18
    6c9c:	000e6580 	call	e658 <__malloc_unlock>
    6ca0:	0005883a 	mov	r2,zero
    6ca4:	dfc00417 	ldw	ra,16(sp)
    6ca8:	dcc00317 	ldw	r19,12(sp)
    6cac:	dc800217 	ldw	r18,8(sp)
    6cb0:	dc400117 	ldw	r17,4(sp)
    6cb4:	dc000017 	ldw	r16,0(sp)
    6cb8:	dec00504 	addi	sp,sp,20
    6cbc:	f800283a 	ret
    6cc0:	040bc83a 	sub	r5,zero,r16
    6cc4:	9009883a 	mov	r4,r18
    6cc8:	00023740 	call	2374 <_sbrk_r>
    6ccc:	00ffffc4 	movi	r3,-1
    6cd0:	10c00d26 	beq	r2,r3,6d08 <_malloc_trim_r+0xe0>
    6cd4:	00d00034 	movhi	r3,16384
    6cd8:	18c86f04 	addi	r3,r3,8636
    6cdc:	18800017 	ldw	r2,0(r3)
    6ce0:	99000217 	ldw	r4,8(r19)
    6ce4:	8c23c83a 	sub	r17,r17,r16
    6ce8:	8c400054 	ori	r17,r17,1
    6cec:	1421c83a 	sub	r16,r2,r16
    6cf0:	24400115 	stw	r17,4(r4)
    6cf4:	9009883a 	mov	r4,r18
    6cf8:	1c000015 	stw	r16,0(r3)
    6cfc:	000e6580 	call	e658 <__malloc_unlock>
    6d00:	00800044 	movi	r2,1
    6d04:	003fe706 	br	6ca4 <__alt_data_end+0x80006ca4>
    6d08:	000b883a 	mov	r5,zero
    6d0c:	9009883a 	mov	r4,r18
    6d10:	00023740 	call	2374 <_sbrk_r>
    6d14:	99000217 	ldw	r4,8(r19)
    6d18:	014003c4 	movi	r5,15
    6d1c:	1107c83a 	sub	r3,r2,r4
    6d20:	28ffdd0e 	bge	r5,r3,6c98 <__alt_data_end+0x80006c98>
    6d24:	01500034 	movhi	r5,16384
    6d28:	29485304 	addi	r5,r5,8524
    6d2c:	29400017 	ldw	r5,0(r5)
    6d30:	18c00054 	ori	r3,r3,1
    6d34:	20c00115 	stw	r3,4(r4)
    6d38:	00d00034 	movhi	r3,16384
    6d3c:	1145c83a 	sub	r2,r2,r5
    6d40:	18c86f04 	addi	r3,r3,8636
    6d44:	18800015 	stw	r2,0(r3)
    6d48:	003fd306 	br	6c98 <__alt_data_end+0x80006c98>

00006d4c <_free_r>:
    6d4c:	28004126 	beq	r5,zero,6e54 <_free_r+0x108>
    6d50:	defffd04 	addi	sp,sp,-12
    6d54:	dc400115 	stw	r17,4(sp)
    6d58:	dc000015 	stw	r16,0(sp)
    6d5c:	2023883a 	mov	r17,r4
    6d60:	2821883a 	mov	r16,r5
    6d64:	dfc00215 	stw	ra,8(sp)
    6d68:	000e6340 	call	e634 <__malloc_lock>
    6d6c:	81ffff17 	ldw	r7,-4(r16)
    6d70:	00bfff84 	movi	r2,-2
    6d74:	01100034 	movhi	r4,16384
    6d78:	81bffe04 	addi	r6,r16,-8
    6d7c:	3884703a 	and	r2,r7,r2
    6d80:	21022804 	addi	r4,r4,2208
    6d84:	308b883a 	add	r5,r6,r2
    6d88:	2a400117 	ldw	r9,4(r5)
    6d8c:	22000217 	ldw	r8,8(r4)
    6d90:	00ffff04 	movi	r3,-4
    6d94:	48c6703a 	and	r3,r9,r3
    6d98:	2a005726 	beq	r5,r8,6ef8 <_free_r+0x1ac>
    6d9c:	28c00115 	stw	r3,4(r5)
    6da0:	39c0004c 	andi	r7,r7,1
    6da4:	3800091e 	bne	r7,zero,6dcc <_free_r+0x80>
    6da8:	823ffe17 	ldw	r8,-8(r16)
    6dac:	22400204 	addi	r9,r4,8
    6db0:	320dc83a 	sub	r6,r6,r8
    6db4:	31c00217 	ldw	r7,8(r6)
    6db8:	1205883a 	add	r2,r2,r8
    6dbc:	3a406526 	beq	r7,r9,6f54 <_free_r+0x208>
    6dc0:	32000317 	ldw	r8,12(r6)
    6dc4:	3a000315 	stw	r8,12(r7)
    6dc8:	41c00215 	stw	r7,8(r8)
    6dcc:	28cf883a 	add	r7,r5,r3
    6dd0:	39c00117 	ldw	r7,4(r7)
    6dd4:	39c0004c 	andi	r7,r7,1
    6dd8:	38003a26 	beq	r7,zero,6ec4 <_free_r+0x178>
    6ddc:	10c00054 	ori	r3,r2,1
    6de0:	30c00115 	stw	r3,4(r6)
    6de4:	3087883a 	add	r3,r6,r2
    6de8:	18800015 	stw	r2,0(r3)
    6dec:	00c07fc4 	movi	r3,511
    6df0:	18801936 	bltu	r3,r2,6e58 <_free_r+0x10c>
    6df4:	1004d0fa 	srli	r2,r2,3
    6df8:	01c00044 	movi	r7,1
    6dfc:	21400117 	ldw	r5,4(r4)
    6e00:	10c00044 	addi	r3,r2,1
    6e04:	18c7883a 	add	r3,r3,r3
    6e08:	1005d0ba 	srai	r2,r2,2
    6e0c:	18c7883a 	add	r3,r3,r3
    6e10:	18c7883a 	add	r3,r3,r3
    6e14:	1907883a 	add	r3,r3,r4
    6e18:	3884983a 	sll	r2,r7,r2
    6e1c:	19c00017 	ldw	r7,0(r3)
    6e20:	1a3ffe04 	addi	r8,r3,-8
    6e24:	1144b03a 	or	r2,r2,r5
    6e28:	32000315 	stw	r8,12(r6)
    6e2c:	31c00215 	stw	r7,8(r6)
    6e30:	20800115 	stw	r2,4(r4)
    6e34:	19800015 	stw	r6,0(r3)
    6e38:	39800315 	stw	r6,12(r7)
    6e3c:	8809883a 	mov	r4,r17
    6e40:	dfc00217 	ldw	ra,8(sp)
    6e44:	dc400117 	ldw	r17,4(sp)
    6e48:	dc000017 	ldw	r16,0(sp)
    6e4c:	dec00304 	addi	sp,sp,12
    6e50:	000e6581 	jmpi	e658 <__malloc_unlock>
    6e54:	f800283a 	ret
    6e58:	100ad27a 	srli	r5,r2,9
    6e5c:	00c00104 	movi	r3,4
    6e60:	19404a36 	bltu	r3,r5,6f8c <_free_r+0x240>
    6e64:	100ad1ba 	srli	r5,r2,6
    6e68:	28c00e44 	addi	r3,r5,57
    6e6c:	18c7883a 	add	r3,r3,r3
    6e70:	29400e04 	addi	r5,r5,56
    6e74:	18c7883a 	add	r3,r3,r3
    6e78:	18c7883a 	add	r3,r3,r3
    6e7c:	1909883a 	add	r4,r3,r4
    6e80:	20c00017 	ldw	r3,0(r4)
    6e84:	01d00034 	movhi	r7,16384
    6e88:	213ffe04 	addi	r4,r4,-8
    6e8c:	39c22804 	addi	r7,r7,2208
    6e90:	20c04426 	beq	r4,r3,6fa4 <_free_r+0x258>
    6e94:	01ffff04 	movi	r7,-4
    6e98:	19400117 	ldw	r5,4(r3)
    6e9c:	29ca703a 	and	r5,r5,r7
    6ea0:	1140022e 	bgeu	r2,r5,6eac <_free_r+0x160>
    6ea4:	18c00217 	ldw	r3,8(r3)
    6ea8:	20fffb1e 	bne	r4,r3,6e98 <__alt_data_end+0x80006e98>
    6eac:	19000317 	ldw	r4,12(r3)
    6eb0:	31000315 	stw	r4,12(r6)
    6eb4:	30c00215 	stw	r3,8(r6)
    6eb8:	21800215 	stw	r6,8(r4)
    6ebc:	19800315 	stw	r6,12(r3)
    6ec0:	003fde06 	br	6e3c <__alt_data_end+0x80006e3c>
    6ec4:	29c00217 	ldw	r7,8(r5)
    6ec8:	10c5883a 	add	r2,r2,r3
    6ecc:	00d00034 	movhi	r3,16384
    6ed0:	18c22a04 	addi	r3,r3,2216
    6ed4:	38c03b26 	beq	r7,r3,6fc4 <_free_r+0x278>
    6ed8:	2a000317 	ldw	r8,12(r5)
    6edc:	11400054 	ori	r5,r2,1
    6ee0:	3087883a 	add	r3,r6,r2
    6ee4:	3a000315 	stw	r8,12(r7)
    6ee8:	41c00215 	stw	r7,8(r8)
    6eec:	31400115 	stw	r5,4(r6)
    6ef0:	18800015 	stw	r2,0(r3)
    6ef4:	003fbd06 	br	6dec <__alt_data_end+0x80006dec>
    6ef8:	39c0004c 	andi	r7,r7,1
    6efc:	10c5883a 	add	r2,r2,r3
    6f00:	3800071e 	bne	r7,zero,6f20 <_free_r+0x1d4>
    6f04:	81fffe17 	ldw	r7,-8(r16)
    6f08:	31cdc83a 	sub	r6,r6,r7
    6f0c:	30c00317 	ldw	r3,12(r6)
    6f10:	31400217 	ldw	r5,8(r6)
    6f14:	11c5883a 	add	r2,r2,r7
    6f18:	28c00315 	stw	r3,12(r5)
    6f1c:	19400215 	stw	r5,8(r3)
    6f20:	10c00054 	ori	r3,r2,1
    6f24:	30c00115 	stw	r3,4(r6)
    6f28:	00d00034 	movhi	r3,16384
    6f2c:	18c85404 	addi	r3,r3,8528
    6f30:	18c00017 	ldw	r3,0(r3)
    6f34:	21800215 	stw	r6,8(r4)
    6f38:	10ffc036 	bltu	r2,r3,6e3c <__alt_data_end+0x80006e3c>
    6f3c:	00900034 	movhi	r2,16384
    6f40:	10886404 	addi	r2,r2,8592
    6f44:	11400017 	ldw	r5,0(r2)
    6f48:	8809883a 	mov	r4,r17
    6f4c:	0006c280 	call	6c28 <_malloc_trim_r>
    6f50:	003fba06 	br	6e3c <__alt_data_end+0x80006e3c>
    6f54:	28c9883a 	add	r4,r5,r3
    6f58:	21000117 	ldw	r4,4(r4)
    6f5c:	2100004c 	andi	r4,r4,1
    6f60:	2000391e 	bne	r4,zero,7048 <_free_r+0x2fc>
    6f64:	29c00217 	ldw	r7,8(r5)
    6f68:	29000317 	ldw	r4,12(r5)
    6f6c:	1885883a 	add	r2,r3,r2
    6f70:	10c00054 	ori	r3,r2,1
    6f74:	39000315 	stw	r4,12(r7)
    6f78:	21c00215 	stw	r7,8(r4)
    6f7c:	30c00115 	stw	r3,4(r6)
    6f80:	308d883a 	add	r6,r6,r2
    6f84:	30800015 	stw	r2,0(r6)
    6f88:	003fac06 	br	6e3c <__alt_data_end+0x80006e3c>
    6f8c:	00c00504 	movi	r3,20
    6f90:	19401536 	bltu	r3,r5,6fe8 <_free_r+0x29c>
    6f94:	28c01704 	addi	r3,r5,92
    6f98:	18c7883a 	add	r3,r3,r3
    6f9c:	294016c4 	addi	r5,r5,91
    6fa0:	003fb406 	br	6e74 <__alt_data_end+0x80006e74>
    6fa4:	280bd0ba 	srai	r5,r5,2
    6fa8:	00c00044 	movi	r3,1
    6fac:	38800117 	ldw	r2,4(r7)
    6fb0:	194a983a 	sll	r5,r3,r5
    6fb4:	2007883a 	mov	r3,r4
    6fb8:	2884b03a 	or	r2,r5,r2
    6fbc:	38800115 	stw	r2,4(r7)
    6fc0:	003fbb06 	br	6eb0 <__alt_data_end+0x80006eb0>
    6fc4:	21800515 	stw	r6,20(r4)
    6fc8:	21800415 	stw	r6,16(r4)
    6fcc:	10c00054 	ori	r3,r2,1
    6fd0:	31c00315 	stw	r7,12(r6)
    6fd4:	31c00215 	stw	r7,8(r6)
    6fd8:	30c00115 	stw	r3,4(r6)
    6fdc:	308d883a 	add	r6,r6,r2
    6fe0:	30800015 	stw	r2,0(r6)
    6fe4:	003f9506 	br	6e3c <__alt_data_end+0x80006e3c>
    6fe8:	00c01504 	movi	r3,84
    6fec:	19400536 	bltu	r3,r5,7004 <_free_r+0x2b8>
    6ff0:	100ad33a 	srli	r5,r2,12
    6ff4:	28c01bc4 	addi	r3,r5,111
    6ff8:	18c7883a 	add	r3,r3,r3
    6ffc:	29401b84 	addi	r5,r5,110
    7000:	003f9c06 	br	6e74 <__alt_data_end+0x80006e74>
    7004:	00c05504 	movi	r3,340
    7008:	19400536 	bltu	r3,r5,7020 <_free_r+0x2d4>
    700c:	100ad3fa 	srli	r5,r2,15
    7010:	28c01e04 	addi	r3,r5,120
    7014:	18c7883a 	add	r3,r3,r3
    7018:	29401dc4 	addi	r5,r5,119
    701c:	003f9506 	br	6e74 <__alt_data_end+0x80006e74>
    7020:	00c15504 	movi	r3,1364
    7024:	19400536 	bltu	r3,r5,703c <_free_r+0x2f0>
    7028:	100ad4ba 	srli	r5,r2,18
    702c:	28c01f44 	addi	r3,r5,125
    7030:	18c7883a 	add	r3,r3,r3
    7034:	29401f04 	addi	r5,r5,124
    7038:	003f8e06 	br	6e74 <__alt_data_end+0x80006e74>
    703c:	00c03f84 	movi	r3,254
    7040:	01401f84 	movi	r5,126
    7044:	003f8b06 	br	6e74 <__alt_data_end+0x80006e74>
    7048:	10c00054 	ori	r3,r2,1
    704c:	30c00115 	stw	r3,4(r6)
    7050:	308d883a 	add	r6,r6,r2
    7054:	30800015 	stw	r2,0(r6)
    7058:	003f7806 	br	6e3c <__alt_data_end+0x80006e3c>

0000705c <__sfvwrite_r>:
    705c:	30800217 	ldw	r2,8(r6)
    7060:	10006726 	beq	r2,zero,7200 <__sfvwrite_r+0x1a4>
    7064:	28c0030b 	ldhu	r3,12(r5)
    7068:	defff404 	addi	sp,sp,-48
    706c:	dd400715 	stw	r21,28(sp)
    7070:	dd000615 	stw	r20,24(sp)
    7074:	dc000215 	stw	r16,8(sp)
    7078:	dfc00b15 	stw	ra,44(sp)
    707c:	df000a15 	stw	fp,40(sp)
    7080:	ddc00915 	stw	r23,36(sp)
    7084:	dd800815 	stw	r22,32(sp)
    7088:	dcc00515 	stw	r19,20(sp)
    708c:	dc800415 	stw	r18,16(sp)
    7090:	dc400315 	stw	r17,12(sp)
    7094:	1880020c 	andi	r2,r3,8
    7098:	2821883a 	mov	r16,r5
    709c:	202b883a 	mov	r21,r4
    70a0:	3029883a 	mov	r20,r6
    70a4:	10002726 	beq	r2,zero,7144 <__sfvwrite_r+0xe8>
    70a8:	28800417 	ldw	r2,16(r5)
    70ac:	10002526 	beq	r2,zero,7144 <__sfvwrite_r+0xe8>
    70b0:	1880008c 	andi	r2,r3,2
    70b4:	a4400017 	ldw	r17,0(r20)
    70b8:	10002a26 	beq	r2,zero,7164 <__sfvwrite_r+0x108>
    70bc:	05a00034 	movhi	r22,32768
    70c0:	0027883a 	mov	r19,zero
    70c4:	0025883a 	mov	r18,zero
    70c8:	b5bf0004 	addi	r22,r22,-1024
    70cc:	980d883a 	mov	r6,r19
    70d0:	a809883a 	mov	r4,r21
    70d4:	90004626 	beq	r18,zero,71f0 <__sfvwrite_r+0x194>
    70d8:	900f883a 	mov	r7,r18
    70dc:	b480022e 	bgeu	r22,r18,70e8 <__sfvwrite_r+0x8c>
    70e0:	01e00034 	movhi	r7,32768
    70e4:	39ff0004 	addi	r7,r7,-1024
    70e8:	80800917 	ldw	r2,36(r16)
    70ec:	81400717 	ldw	r5,28(r16)
    70f0:	103ee83a 	callr	r2
    70f4:	0080570e 	bge	zero,r2,7254 <__sfvwrite_r+0x1f8>
    70f8:	a0c00217 	ldw	r3,8(r20)
    70fc:	98a7883a 	add	r19,r19,r2
    7100:	90a5c83a 	sub	r18,r18,r2
    7104:	1885c83a 	sub	r2,r3,r2
    7108:	a0800215 	stw	r2,8(r20)
    710c:	103fef1e 	bne	r2,zero,70cc <__alt_data_end+0x800070cc>
    7110:	0005883a 	mov	r2,zero
    7114:	dfc00b17 	ldw	ra,44(sp)
    7118:	df000a17 	ldw	fp,40(sp)
    711c:	ddc00917 	ldw	r23,36(sp)
    7120:	dd800817 	ldw	r22,32(sp)
    7124:	dd400717 	ldw	r21,28(sp)
    7128:	dd000617 	ldw	r20,24(sp)
    712c:	dcc00517 	ldw	r19,20(sp)
    7130:	dc800417 	ldw	r18,16(sp)
    7134:	dc400317 	ldw	r17,12(sp)
    7138:	dc000217 	ldw	r16,8(sp)
    713c:	dec00c04 	addi	sp,sp,48
    7140:	f800283a 	ret
    7144:	800b883a 	mov	r5,r16
    7148:	a809883a 	mov	r4,r21
    714c:	0004b040 	call	4b04 <__swsetup_r>
    7150:	1000eb1e 	bne	r2,zero,7500 <__sfvwrite_r+0x4a4>
    7154:	80c0030b 	ldhu	r3,12(r16)
    7158:	a4400017 	ldw	r17,0(r20)
    715c:	1880008c 	andi	r2,r3,2
    7160:	103fd61e 	bne	r2,zero,70bc <__alt_data_end+0x800070bc>
    7164:	1880004c 	andi	r2,r3,1
    7168:	10003f1e 	bne	r2,zero,7268 <__sfvwrite_r+0x20c>
    716c:	0039883a 	mov	fp,zero
    7170:	0025883a 	mov	r18,zero
    7174:	90001a26 	beq	r18,zero,71e0 <__sfvwrite_r+0x184>
    7178:	1880800c 	andi	r2,r3,512
    717c:	84c00217 	ldw	r19,8(r16)
    7180:	10002126 	beq	r2,zero,7208 <__sfvwrite_r+0x1ac>
    7184:	982f883a 	mov	r23,r19
    7188:	94c09336 	bltu	r18,r19,73d8 <__sfvwrite_r+0x37c>
    718c:	1881200c 	andi	r2,r3,1152
    7190:	10009e1e 	bne	r2,zero,740c <__sfvwrite_r+0x3b0>
    7194:	81000017 	ldw	r4,0(r16)
    7198:	b80d883a 	mov	r6,r23
    719c:	e00b883a 	mov	r5,fp
    71a0:	0007a5c0 	call	7a5c <memmove>
    71a4:	80c00217 	ldw	r3,8(r16)
    71a8:	81000017 	ldw	r4,0(r16)
    71ac:	9005883a 	mov	r2,r18
    71b0:	1ce7c83a 	sub	r19,r3,r19
    71b4:	25cf883a 	add	r7,r4,r23
    71b8:	84c00215 	stw	r19,8(r16)
    71bc:	81c00015 	stw	r7,0(r16)
    71c0:	a0c00217 	ldw	r3,8(r20)
    71c4:	e0b9883a 	add	fp,fp,r2
    71c8:	90a5c83a 	sub	r18,r18,r2
    71cc:	18a7c83a 	sub	r19,r3,r2
    71d0:	a4c00215 	stw	r19,8(r20)
    71d4:	983fce26 	beq	r19,zero,7110 <__alt_data_end+0x80007110>
    71d8:	80c0030b 	ldhu	r3,12(r16)
    71dc:	903fe61e 	bne	r18,zero,7178 <__alt_data_end+0x80007178>
    71e0:	8f000017 	ldw	fp,0(r17)
    71e4:	8c800117 	ldw	r18,4(r17)
    71e8:	8c400204 	addi	r17,r17,8
    71ec:	003fe106 	br	7174 <__alt_data_end+0x80007174>
    71f0:	8cc00017 	ldw	r19,0(r17)
    71f4:	8c800117 	ldw	r18,4(r17)
    71f8:	8c400204 	addi	r17,r17,8
    71fc:	003fb306 	br	70cc <__alt_data_end+0x800070cc>
    7200:	0005883a 	mov	r2,zero
    7204:	f800283a 	ret
    7208:	81000017 	ldw	r4,0(r16)
    720c:	80800417 	ldw	r2,16(r16)
    7210:	11005736 	bltu	r2,r4,7370 <__sfvwrite_r+0x314>
    7214:	85c00517 	ldw	r23,20(r16)
    7218:	95c05536 	bltu	r18,r23,7370 <__sfvwrite_r+0x314>
    721c:	00a00034 	movhi	r2,32768
    7220:	10bfffc4 	addi	r2,r2,-1
    7224:	9009883a 	mov	r4,r18
    7228:	1480012e 	bgeu	r2,r18,7230 <__sfvwrite_r+0x1d4>
    722c:	1009883a 	mov	r4,r2
    7230:	b80b883a 	mov	r5,r23
    7234:	000b89c0 	call	b89c <__divsi3>
    7238:	15cf383a 	mul	r7,r2,r23
    723c:	81400717 	ldw	r5,28(r16)
    7240:	80800917 	ldw	r2,36(r16)
    7244:	e00d883a 	mov	r6,fp
    7248:	a809883a 	mov	r4,r21
    724c:	103ee83a 	callr	r2
    7250:	00bfdb16 	blt	zero,r2,71c0 <__alt_data_end+0x800071c0>
    7254:	8080030b 	ldhu	r2,12(r16)
    7258:	10801014 	ori	r2,r2,64
    725c:	8080030d 	sth	r2,12(r16)
    7260:	00bfffc4 	movi	r2,-1
    7264:	003fab06 	br	7114 <__alt_data_end+0x80007114>
    7268:	0027883a 	mov	r19,zero
    726c:	0011883a 	mov	r8,zero
    7270:	0039883a 	mov	fp,zero
    7274:	0025883a 	mov	r18,zero
    7278:	90001f26 	beq	r18,zero,72f8 <__sfvwrite_r+0x29c>
    727c:	40005a26 	beq	r8,zero,73e8 <__sfvwrite_r+0x38c>
    7280:	982d883a 	mov	r22,r19
    7284:	94c0012e 	bgeu	r18,r19,728c <__sfvwrite_r+0x230>
    7288:	902d883a 	mov	r22,r18
    728c:	81000017 	ldw	r4,0(r16)
    7290:	80800417 	ldw	r2,16(r16)
    7294:	b02f883a 	mov	r23,r22
    7298:	81c00517 	ldw	r7,20(r16)
    729c:	1100032e 	bgeu	r2,r4,72ac <__sfvwrite_r+0x250>
    72a0:	80c00217 	ldw	r3,8(r16)
    72a4:	38c7883a 	add	r3,r7,r3
    72a8:	1d801816 	blt	r3,r22,730c <__sfvwrite_r+0x2b0>
    72ac:	b1c03e16 	blt	r22,r7,73a8 <__sfvwrite_r+0x34c>
    72b0:	80800917 	ldw	r2,36(r16)
    72b4:	81400717 	ldw	r5,28(r16)
    72b8:	e00d883a 	mov	r6,fp
    72bc:	da000115 	stw	r8,4(sp)
    72c0:	a809883a 	mov	r4,r21
    72c4:	103ee83a 	callr	r2
    72c8:	102f883a 	mov	r23,r2
    72cc:	da000117 	ldw	r8,4(sp)
    72d0:	00bfe00e 	bge	zero,r2,7254 <__alt_data_end+0x80007254>
    72d4:	9de7c83a 	sub	r19,r19,r23
    72d8:	98001f26 	beq	r19,zero,7358 <__sfvwrite_r+0x2fc>
    72dc:	a0800217 	ldw	r2,8(r20)
    72e0:	e5f9883a 	add	fp,fp,r23
    72e4:	95e5c83a 	sub	r18,r18,r23
    72e8:	15efc83a 	sub	r23,r2,r23
    72ec:	a5c00215 	stw	r23,8(r20)
    72f0:	b83f8726 	beq	r23,zero,7110 <__alt_data_end+0x80007110>
    72f4:	903fe11e 	bne	r18,zero,727c <__alt_data_end+0x8000727c>
    72f8:	8f000017 	ldw	fp,0(r17)
    72fc:	8c800117 	ldw	r18,4(r17)
    7300:	0011883a 	mov	r8,zero
    7304:	8c400204 	addi	r17,r17,8
    7308:	003fdb06 	br	7278 <__alt_data_end+0x80007278>
    730c:	180d883a 	mov	r6,r3
    7310:	e00b883a 	mov	r5,fp
    7314:	da000115 	stw	r8,4(sp)
    7318:	d8c00015 	stw	r3,0(sp)
    731c:	0007a5c0 	call	7a5c <memmove>
    7320:	d8c00017 	ldw	r3,0(sp)
    7324:	80800017 	ldw	r2,0(r16)
    7328:	800b883a 	mov	r5,r16
    732c:	a809883a 	mov	r4,r21
    7330:	10c5883a 	add	r2,r2,r3
    7334:	80800015 	stw	r2,0(r16)
    7338:	d8c00015 	stw	r3,0(sp)
    733c:	00067500 	call	6750 <_fflush_r>
    7340:	d8c00017 	ldw	r3,0(sp)
    7344:	da000117 	ldw	r8,4(sp)
    7348:	103fc21e 	bne	r2,zero,7254 <__alt_data_end+0x80007254>
    734c:	182f883a 	mov	r23,r3
    7350:	9de7c83a 	sub	r19,r19,r23
    7354:	983fe11e 	bne	r19,zero,72dc <__alt_data_end+0x800072dc>
    7358:	800b883a 	mov	r5,r16
    735c:	a809883a 	mov	r4,r21
    7360:	00067500 	call	6750 <_fflush_r>
    7364:	103fbb1e 	bne	r2,zero,7254 <__alt_data_end+0x80007254>
    7368:	0011883a 	mov	r8,zero
    736c:	003fdb06 	br	72dc <__alt_data_end+0x800072dc>
    7370:	94c0012e 	bgeu	r18,r19,7378 <__sfvwrite_r+0x31c>
    7374:	9027883a 	mov	r19,r18
    7378:	980d883a 	mov	r6,r19
    737c:	e00b883a 	mov	r5,fp
    7380:	0007a5c0 	call	7a5c <memmove>
    7384:	80800217 	ldw	r2,8(r16)
    7388:	80c00017 	ldw	r3,0(r16)
    738c:	14c5c83a 	sub	r2,r2,r19
    7390:	1cc7883a 	add	r3,r3,r19
    7394:	80800215 	stw	r2,8(r16)
    7398:	80c00015 	stw	r3,0(r16)
    739c:	10004326 	beq	r2,zero,74ac <__sfvwrite_r+0x450>
    73a0:	9805883a 	mov	r2,r19
    73a4:	003f8606 	br	71c0 <__alt_data_end+0x800071c0>
    73a8:	b00d883a 	mov	r6,r22
    73ac:	e00b883a 	mov	r5,fp
    73b0:	da000115 	stw	r8,4(sp)
    73b4:	0007a5c0 	call	7a5c <memmove>
    73b8:	80800217 	ldw	r2,8(r16)
    73bc:	80c00017 	ldw	r3,0(r16)
    73c0:	da000117 	ldw	r8,4(sp)
    73c4:	1585c83a 	sub	r2,r2,r22
    73c8:	1dad883a 	add	r22,r3,r22
    73cc:	80800215 	stw	r2,8(r16)
    73d0:	85800015 	stw	r22,0(r16)
    73d4:	003fbf06 	br	72d4 <__alt_data_end+0x800072d4>
    73d8:	81000017 	ldw	r4,0(r16)
    73dc:	9027883a 	mov	r19,r18
    73e0:	902f883a 	mov	r23,r18
    73e4:	003f6c06 	br	7198 <__alt_data_end+0x80007198>
    73e8:	900d883a 	mov	r6,r18
    73ec:	01400284 	movi	r5,10
    73f0:	e009883a 	mov	r4,fp
    73f4:	00078300 	call	7830 <memchr>
    73f8:	10003e26 	beq	r2,zero,74f4 <__sfvwrite_r+0x498>
    73fc:	10800044 	addi	r2,r2,1
    7400:	1727c83a 	sub	r19,r2,fp
    7404:	02000044 	movi	r8,1
    7408:	003f9d06 	br	7280 <__alt_data_end+0x80007280>
    740c:	80800517 	ldw	r2,20(r16)
    7410:	81400417 	ldw	r5,16(r16)
    7414:	81c00017 	ldw	r7,0(r16)
    7418:	10a7883a 	add	r19,r2,r2
    741c:	9885883a 	add	r2,r19,r2
    7420:	1026d7fa 	srli	r19,r2,31
    7424:	396dc83a 	sub	r22,r7,r5
    7428:	b1000044 	addi	r4,r22,1
    742c:	9885883a 	add	r2,r19,r2
    7430:	1027d07a 	srai	r19,r2,1
    7434:	2485883a 	add	r2,r4,r18
    7438:	980d883a 	mov	r6,r19
    743c:	9880022e 	bgeu	r19,r2,7448 <__sfvwrite_r+0x3ec>
    7440:	1027883a 	mov	r19,r2
    7444:	100d883a 	mov	r6,r2
    7448:	18c1000c 	andi	r3,r3,1024
    744c:	18001c26 	beq	r3,zero,74c0 <__sfvwrite_r+0x464>
    7450:	300b883a 	mov	r5,r6
    7454:	a809883a 	mov	r4,r21
    7458:	00014a00 	call	14a0 <_malloc_r>
    745c:	102f883a 	mov	r23,r2
    7460:	10002926 	beq	r2,zero,7508 <__sfvwrite_r+0x4ac>
    7464:	81400417 	ldw	r5,16(r16)
    7468:	b00d883a 	mov	r6,r22
    746c:	1009883a 	mov	r4,r2
    7470:	00079140 	call	7914 <memcpy>
    7474:	8080030b 	ldhu	r2,12(r16)
    7478:	00fedfc4 	movi	r3,-1153
    747c:	10c4703a 	and	r2,r2,r3
    7480:	10802014 	ori	r2,r2,128
    7484:	8080030d 	sth	r2,12(r16)
    7488:	bd89883a 	add	r4,r23,r22
    748c:	9d8fc83a 	sub	r7,r19,r22
    7490:	85c00415 	stw	r23,16(r16)
    7494:	84c00515 	stw	r19,20(r16)
    7498:	81000015 	stw	r4,0(r16)
    749c:	9027883a 	mov	r19,r18
    74a0:	81c00215 	stw	r7,8(r16)
    74a4:	902f883a 	mov	r23,r18
    74a8:	003f3b06 	br	7198 <__alt_data_end+0x80007198>
    74ac:	800b883a 	mov	r5,r16
    74b0:	a809883a 	mov	r4,r21
    74b4:	00067500 	call	6750 <_fflush_r>
    74b8:	103fb926 	beq	r2,zero,73a0 <__alt_data_end+0x800073a0>
    74bc:	003f6506 	br	7254 <__alt_data_end+0x80007254>
    74c0:	a809883a 	mov	r4,r21
    74c4:	0008c140 	call	8c14 <_realloc_r>
    74c8:	102f883a 	mov	r23,r2
    74cc:	103fee1e 	bne	r2,zero,7488 <__alt_data_end+0x80007488>
    74d0:	81400417 	ldw	r5,16(r16)
    74d4:	a809883a 	mov	r4,r21
    74d8:	0006d4c0 	call	6d4c <_free_r>
    74dc:	8080030b 	ldhu	r2,12(r16)
    74e0:	00ffdfc4 	movi	r3,-129
    74e4:	1884703a 	and	r2,r3,r2
    74e8:	00c00304 	movi	r3,12
    74ec:	a8c00015 	stw	r3,0(r21)
    74f0:	003f5906 	br	7258 <__alt_data_end+0x80007258>
    74f4:	94c00044 	addi	r19,r18,1
    74f8:	02000044 	movi	r8,1
    74fc:	003f6006 	br	7280 <__alt_data_end+0x80007280>
    7500:	00bfffc4 	movi	r2,-1
    7504:	003f0306 	br	7114 <__alt_data_end+0x80007114>
    7508:	00800304 	movi	r2,12
    750c:	a8800015 	stw	r2,0(r21)
    7510:	8080030b 	ldhu	r2,12(r16)
    7514:	003f5006 	br	7258 <__alt_data_end+0x80007258>

00007518 <_fwalk>:
    7518:	defff704 	addi	sp,sp,-36
    751c:	dd000415 	stw	r20,16(sp)
    7520:	dfc00815 	stw	ra,32(sp)
    7524:	ddc00715 	stw	r23,28(sp)
    7528:	dd800615 	stw	r22,24(sp)
    752c:	dd400515 	stw	r21,20(sp)
    7530:	dcc00315 	stw	r19,12(sp)
    7534:	dc800215 	stw	r18,8(sp)
    7538:	dc400115 	stw	r17,4(sp)
    753c:	dc000015 	stw	r16,0(sp)
    7540:	2500b804 	addi	r20,r4,736
    7544:	a0002326 	beq	r20,zero,75d4 <_fwalk+0xbc>
    7548:	282b883a 	mov	r21,r5
    754c:	002f883a 	mov	r23,zero
    7550:	05800044 	movi	r22,1
    7554:	04ffffc4 	movi	r19,-1
    7558:	a4400117 	ldw	r17,4(r20)
    755c:	a4800217 	ldw	r18,8(r20)
    7560:	8c7fffc4 	addi	r17,r17,-1
    7564:	88000d16 	blt	r17,zero,759c <_fwalk+0x84>
    7568:	94000304 	addi	r16,r18,12
    756c:	94800384 	addi	r18,r18,14
    7570:	8080000b 	ldhu	r2,0(r16)
    7574:	8c7fffc4 	addi	r17,r17,-1
    7578:	813ffd04 	addi	r4,r16,-12
    757c:	b080042e 	bgeu	r22,r2,7590 <_fwalk+0x78>
    7580:	9080000f 	ldh	r2,0(r18)
    7584:	14c00226 	beq	r2,r19,7590 <_fwalk+0x78>
    7588:	a83ee83a 	callr	r21
    758c:	b8aeb03a 	or	r23,r23,r2
    7590:	84001a04 	addi	r16,r16,104
    7594:	94801a04 	addi	r18,r18,104
    7598:	8cfff51e 	bne	r17,r19,7570 <__alt_data_end+0x80007570>
    759c:	a5000017 	ldw	r20,0(r20)
    75a0:	a03fed1e 	bne	r20,zero,7558 <__alt_data_end+0x80007558>
    75a4:	b805883a 	mov	r2,r23
    75a8:	dfc00817 	ldw	ra,32(sp)
    75ac:	ddc00717 	ldw	r23,28(sp)
    75b0:	dd800617 	ldw	r22,24(sp)
    75b4:	dd400517 	ldw	r21,20(sp)
    75b8:	dd000417 	ldw	r20,16(sp)
    75bc:	dcc00317 	ldw	r19,12(sp)
    75c0:	dc800217 	ldw	r18,8(sp)
    75c4:	dc400117 	ldw	r17,4(sp)
    75c8:	dc000017 	ldw	r16,0(sp)
    75cc:	dec00904 	addi	sp,sp,36
    75d0:	f800283a 	ret
    75d4:	002f883a 	mov	r23,zero
    75d8:	003ff206 	br	75a4 <__alt_data_end+0x800075a4>

000075dc <_fwalk_reent>:
    75dc:	defff704 	addi	sp,sp,-36
    75e0:	dd000415 	stw	r20,16(sp)
    75e4:	dfc00815 	stw	ra,32(sp)
    75e8:	ddc00715 	stw	r23,28(sp)
    75ec:	dd800615 	stw	r22,24(sp)
    75f0:	dd400515 	stw	r21,20(sp)
    75f4:	dcc00315 	stw	r19,12(sp)
    75f8:	dc800215 	stw	r18,8(sp)
    75fc:	dc400115 	stw	r17,4(sp)
    7600:	dc000015 	stw	r16,0(sp)
    7604:	2500b804 	addi	r20,r4,736
    7608:	a0002326 	beq	r20,zero,7698 <_fwalk_reent+0xbc>
    760c:	282b883a 	mov	r21,r5
    7610:	2027883a 	mov	r19,r4
    7614:	002f883a 	mov	r23,zero
    7618:	05800044 	movi	r22,1
    761c:	04bfffc4 	movi	r18,-1
    7620:	a4400117 	ldw	r17,4(r20)
    7624:	a4000217 	ldw	r16,8(r20)
    7628:	8c7fffc4 	addi	r17,r17,-1
    762c:	88000c16 	blt	r17,zero,7660 <_fwalk_reent+0x84>
    7630:	84000304 	addi	r16,r16,12
    7634:	8080000b 	ldhu	r2,0(r16)
    7638:	8c7fffc4 	addi	r17,r17,-1
    763c:	817ffd04 	addi	r5,r16,-12
    7640:	b080052e 	bgeu	r22,r2,7658 <_fwalk_reent+0x7c>
    7644:	8080008f 	ldh	r2,2(r16)
    7648:	9809883a 	mov	r4,r19
    764c:	14800226 	beq	r2,r18,7658 <_fwalk_reent+0x7c>
    7650:	a83ee83a 	callr	r21
    7654:	b8aeb03a 	or	r23,r23,r2
    7658:	84001a04 	addi	r16,r16,104
    765c:	8cbff51e 	bne	r17,r18,7634 <__alt_data_end+0x80007634>
    7660:	a5000017 	ldw	r20,0(r20)
    7664:	a03fee1e 	bne	r20,zero,7620 <__alt_data_end+0x80007620>
    7668:	b805883a 	mov	r2,r23
    766c:	dfc00817 	ldw	ra,32(sp)
    7670:	ddc00717 	ldw	r23,28(sp)
    7674:	dd800617 	ldw	r22,24(sp)
    7678:	dd400517 	ldw	r21,20(sp)
    767c:	dd000417 	ldw	r20,16(sp)
    7680:	dcc00317 	ldw	r19,12(sp)
    7684:	dc800217 	ldw	r18,8(sp)
    7688:	dc400117 	ldw	r17,4(sp)
    768c:	dc000017 	ldw	r16,0(sp)
    7690:	dec00904 	addi	sp,sp,36
    7694:	f800283a 	ret
    7698:	002f883a 	mov	r23,zero
    769c:	003ff206 	br	7668 <__alt_data_end+0x80007668>

000076a0 <_isatty_r>:
    76a0:	defffd04 	addi	sp,sp,-12
    76a4:	dc000015 	stw	r16,0(sp)
    76a8:	04100034 	movhi	r16,16384
    76ac:	dc400115 	stw	r17,4(sp)
    76b0:	84086104 	addi	r16,r16,8580
    76b4:	2023883a 	mov	r17,r4
    76b8:	2809883a 	mov	r4,r5
    76bc:	dfc00215 	stw	ra,8(sp)
    76c0:	80000015 	stw	zero,0(r16)
    76c4:	000e3180 	call	e318 <isatty>
    76c8:	00ffffc4 	movi	r3,-1
    76cc:	10c00526 	beq	r2,r3,76e4 <_isatty_r+0x44>
    76d0:	dfc00217 	ldw	ra,8(sp)
    76d4:	dc400117 	ldw	r17,4(sp)
    76d8:	dc000017 	ldw	r16,0(sp)
    76dc:	dec00304 	addi	sp,sp,12
    76e0:	f800283a 	ret
    76e4:	80c00017 	ldw	r3,0(r16)
    76e8:	183ff926 	beq	r3,zero,76d0 <__alt_data_end+0x800076d0>
    76ec:	88c00015 	stw	r3,0(r17)
    76f0:	003ff706 	br	76d0 <__alt_data_end+0x800076d0>

000076f4 <_setlocale_r>:
    76f4:	30001b26 	beq	r6,zero,7764 <_setlocale_r+0x70>
    76f8:	01500034 	movhi	r5,16384
    76fc:	defffe04 	addi	sp,sp,-8
    7700:	29405104 	addi	r5,r5,324
    7704:	3009883a 	mov	r4,r6
    7708:	dc000015 	stw	r16,0(sp)
    770c:	dfc00115 	stw	ra,4(sp)
    7710:	3021883a 	mov	r16,r6
    7714:	00025040 	call	2504 <strcmp>
    7718:	1000061e 	bne	r2,zero,7734 <_setlocale_r+0x40>
    771c:	00900034 	movhi	r2,16384
    7720:	10803204 	addi	r2,r2,200
    7724:	dfc00117 	ldw	ra,4(sp)
    7728:	dc000017 	ldw	r16,0(sp)
    772c:	dec00204 	addi	sp,sp,8
    7730:	f800283a 	ret
    7734:	01500034 	movhi	r5,16384
    7738:	29403204 	addi	r5,r5,200
    773c:	8009883a 	mov	r4,r16
    7740:	00025040 	call	2504 <strcmp>
    7744:	103ff526 	beq	r2,zero,771c <__alt_data_end+0x8000771c>
    7748:	01500034 	movhi	r5,16384
    774c:	29403c04 	addi	r5,r5,240
    7750:	8009883a 	mov	r4,r16
    7754:	00025040 	call	2504 <strcmp>
    7758:	103ff026 	beq	r2,zero,771c <__alt_data_end+0x8000771c>
    775c:	0005883a 	mov	r2,zero
    7760:	003ff006 	br	7724 <__alt_data_end+0x80007724>
    7764:	00900034 	movhi	r2,16384
    7768:	10803204 	addi	r2,r2,200
    776c:	f800283a 	ret

00007770 <__locale_charset>:
    7770:	00900034 	movhi	r2,16384
    7774:	10833204 	addi	r2,r2,3272
    7778:	f800283a 	ret

0000777c <__locale_mb_cur_max>:
    777c:	00900034 	movhi	r2,16384
    7780:	10885504 	addi	r2,r2,8532
    7784:	10800017 	ldw	r2,0(r2)
    7788:	f800283a 	ret

0000778c <__locale_msgcharset>:
    778c:	00900034 	movhi	r2,16384
    7790:	10832a04 	addi	r2,r2,3240
    7794:	f800283a 	ret

00007798 <__locale_cjk_lang>:
    7798:	0005883a 	mov	r2,zero
    779c:	f800283a 	ret

000077a0 <_localeconv_r>:
    77a0:	00900034 	movhi	r2,16384
    77a4:	10833a04 	addi	r2,r2,3304
    77a8:	f800283a 	ret

000077ac <setlocale>:
    77ac:	00900034 	movhi	r2,16384
    77b0:	10885204 	addi	r2,r2,8520
    77b4:	280d883a 	mov	r6,r5
    77b8:	200b883a 	mov	r5,r4
    77bc:	11000017 	ldw	r4,0(r2)
    77c0:	00076f41 	jmpi	76f4 <_setlocale_r>

000077c4 <localeconv>:
    77c4:	00900034 	movhi	r2,16384
    77c8:	10833a04 	addi	r2,r2,3304
    77cc:	f800283a 	ret

000077d0 <_lseek_r>:
    77d0:	defffd04 	addi	sp,sp,-12
    77d4:	2805883a 	mov	r2,r5
    77d8:	dc000015 	stw	r16,0(sp)
    77dc:	04100034 	movhi	r16,16384
    77e0:	dc400115 	stw	r17,4(sp)
    77e4:	300b883a 	mov	r5,r6
    77e8:	84086104 	addi	r16,r16,8580
    77ec:	2023883a 	mov	r17,r4
    77f0:	380d883a 	mov	r6,r7
    77f4:	1009883a 	mov	r4,r2
    77f8:	dfc00215 	stw	ra,8(sp)
    77fc:	80000015 	stw	zero,0(r16)
    7800:	000e4e40 	call	e4e4 <lseek>
    7804:	00ffffc4 	movi	r3,-1
    7808:	10c00526 	beq	r2,r3,7820 <_lseek_r+0x50>
    780c:	dfc00217 	ldw	ra,8(sp)
    7810:	dc400117 	ldw	r17,4(sp)
    7814:	dc000017 	ldw	r16,0(sp)
    7818:	dec00304 	addi	sp,sp,12
    781c:	f800283a 	ret
    7820:	80c00017 	ldw	r3,0(r16)
    7824:	183ff926 	beq	r3,zero,780c <__alt_data_end+0x8000780c>
    7828:	88c00015 	stw	r3,0(r17)
    782c:	003ff706 	br	780c <__alt_data_end+0x8000780c>

00007830 <memchr>:
    7830:	208000cc 	andi	r2,r4,3
    7834:	280f883a 	mov	r7,r5
    7838:	10003426 	beq	r2,zero,790c <memchr+0xdc>
    783c:	30bfffc4 	addi	r2,r6,-1
    7840:	30001a26 	beq	r6,zero,78ac <memchr+0x7c>
    7844:	20c00003 	ldbu	r3,0(r4)
    7848:	29803fcc 	andi	r6,r5,255
    784c:	30c0051e 	bne	r6,r3,7864 <memchr+0x34>
    7850:	00001806 	br	78b4 <memchr+0x84>
    7854:	10001526 	beq	r2,zero,78ac <memchr+0x7c>
    7858:	20c00003 	ldbu	r3,0(r4)
    785c:	10bfffc4 	addi	r2,r2,-1
    7860:	30c01426 	beq	r6,r3,78b4 <memchr+0x84>
    7864:	21000044 	addi	r4,r4,1
    7868:	20c000cc 	andi	r3,r4,3
    786c:	183ff91e 	bne	r3,zero,7854 <__alt_data_end+0x80007854>
    7870:	020000c4 	movi	r8,3
    7874:	40801136 	bltu	r8,r2,78bc <memchr+0x8c>
    7878:	10000c26 	beq	r2,zero,78ac <memchr+0x7c>
    787c:	20c00003 	ldbu	r3,0(r4)
    7880:	29403fcc 	andi	r5,r5,255
    7884:	28c00b26 	beq	r5,r3,78b4 <memchr+0x84>
    7888:	20c00044 	addi	r3,r4,1
    788c:	39803fcc 	andi	r6,r7,255
    7890:	2089883a 	add	r4,r4,r2
    7894:	00000306 	br	78a4 <memchr+0x74>
    7898:	18c00044 	addi	r3,r3,1
    789c:	197fffc3 	ldbu	r5,-1(r3)
    78a0:	31400526 	beq	r6,r5,78b8 <memchr+0x88>
    78a4:	1805883a 	mov	r2,r3
    78a8:	20fffb1e 	bne	r4,r3,7898 <__alt_data_end+0x80007898>
    78ac:	0005883a 	mov	r2,zero
    78b0:	f800283a 	ret
    78b4:	2005883a 	mov	r2,r4
    78b8:	f800283a 	ret
    78bc:	28c03fcc 	andi	r3,r5,255
    78c0:	1812923a 	slli	r9,r3,8
    78c4:	02ffbff4 	movhi	r11,65279
    78c8:	02a02074 	movhi	r10,32897
    78cc:	48d2b03a 	or	r9,r9,r3
    78d0:	4806943a 	slli	r3,r9,16
    78d4:	5affbfc4 	addi	r11,r11,-257
    78d8:	52a02004 	addi	r10,r10,-32640
    78dc:	48d2b03a 	or	r9,r9,r3
    78e0:	20c00017 	ldw	r3,0(r4)
    78e4:	48c6f03a 	xor	r3,r9,r3
    78e8:	1acd883a 	add	r6,r3,r11
    78ec:	00c6303a 	nor	r3,zero,r3
    78f0:	30c6703a 	and	r3,r6,r3
    78f4:	1a86703a 	and	r3,r3,r10
    78f8:	183fe01e 	bne	r3,zero,787c <__alt_data_end+0x8000787c>
    78fc:	10bfff04 	addi	r2,r2,-4
    7900:	21000104 	addi	r4,r4,4
    7904:	40bff636 	bltu	r8,r2,78e0 <__alt_data_end+0x800078e0>
    7908:	003fdb06 	br	7878 <__alt_data_end+0x80007878>
    790c:	3005883a 	mov	r2,r6
    7910:	003fd706 	br	7870 <__alt_data_end+0x80007870>

00007914 <memcpy>:
    7914:	defffd04 	addi	sp,sp,-12
    7918:	dfc00215 	stw	ra,8(sp)
    791c:	dc400115 	stw	r17,4(sp)
    7920:	dc000015 	stw	r16,0(sp)
    7924:	00c003c4 	movi	r3,15
    7928:	2005883a 	mov	r2,r4
    792c:	1980452e 	bgeu	r3,r6,7a44 <memcpy+0x130>
    7930:	2906b03a 	or	r3,r5,r4
    7934:	18c000cc 	andi	r3,r3,3
    7938:	1800441e 	bne	r3,zero,7a4c <memcpy+0x138>
    793c:	347ffc04 	addi	r17,r6,-16
    7940:	8822d13a 	srli	r17,r17,4
    7944:	28c00104 	addi	r3,r5,4
    7948:	23400104 	addi	r13,r4,4
    794c:	8820913a 	slli	r16,r17,4
    7950:	2b000204 	addi	r12,r5,8
    7954:	22c00204 	addi	r11,r4,8
    7958:	84000504 	addi	r16,r16,20
    795c:	2a800304 	addi	r10,r5,12
    7960:	22400304 	addi	r9,r4,12
    7964:	2c21883a 	add	r16,r5,r16
    7968:	2811883a 	mov	r8,r5
    796c:	200f883a 	mov	r7,r4
    7970:	41000017 	ldw	r4,0(r8)
    7974:	1fc00017 	ldw	ra,0(r3)
    7978:	63c00017 	ldw	r15,0(r12)
    797c:	39000015 	stw	r4,0(r7)
    7980:	53800017 	ldw	r14,0(r10)
    7984:	6fc00015 	stw	ra,0(r13)
    7988:	5bc00015 	stw	r15,0(r11)
    798c:	4b800015 	stw	r14,0(r9)
    7990:	18c00404 	addi	r3,r3,16
    7994:	39c00404 	addi	r7,r7,16
    7998:	42000404 	addi	r8,r8,16
    799c:	6b400404 	addi	r13,r13,16
    79a0:	63000404 	addi	r12,r12,16
    79a4:	5ac00404 	addi	r11,r11,16
    79a8:	52800404 	addi	r10,r10,16
    79ac:	4a400404 	addi	r9,r9,16
    79b0:	1c3fef1e 	bne	r3,r16,7970 <__alt_data_end+0x80007970>
    79b4:	89c00044 	addi	r7,r17,1
    79b8:	380e913a 	slli	r7,r7,4
    79bc:	310003cc 	andi	r4,r6,15
    79c0:	02c000c4 	movi	r11,3
    79c4:	11c7883a 	add	r3,r2,r7
    79c8:	29cb883a 	add	r5,r5,r7
    79cc:	5900212e 	bgeu	r11,r4,7a54 <memcpy+0x140>
    79d0:	1813883a 	mov	r9,r3
    79d4:	2811883a 	mov	r8,r5
    79d8:	200f883a 	mov	r7,r4
    79dc:	42800017 	ldw	r10,0(r8)
    79e0:	4a400104 	addi	r9,r9,4
    79e4:	39ffff04 	addi	r7,r7,-4
    79e8:	4abfff15 	stw	r10,-4(r9)
    79ec:	42000104 	addi	r8,r8,4
    79f0:	59fffa36 	bltu	r11,r7,79dc <__alt_data_end+0x800079dc>
    79f4:	213fff04 	addi	r4,r4,-4
    79f8:	2008d0ba 	srli	r4,r4,2
    79fc:	318000cc 	andi	r6,r6,3
    7a00:	21000044 	addi	r4,r4,1
    7a04:	2109883a 	add	r4,r4,r4
    7a08:	2109883a 	add	r4,r4,r4
    7a0c:	1907883a 	add	r3,r3,r4
    7a10:	290b883a 	add	r5,r5,r4
    7a14:	30000626 	beq	r6,zero,7a30 <memcpy+0x11c>
    7a18:	198d883a 	add	r6,r3,r6
    7a1c:	29c00003 	ldbu	r7,0(r5)
    7a20:	18c00044 	addi	r3,r3,1
    7a24:	29400044 	addi	r5,r5,1
    7a28:	19ffffc5 	stb	r7,-1(r3)
    7a2c:	19bffb1e 	bne	r3,r6,7a1c <__alt_data_end+0x80007a1c>
    7a30:	dfc00217 	ldw	ra,8(sp)
    7a34:	dc400117 	ldw	r17,4(sp)
    7a38:	dc000017 	ldw	r16,0(sp)
    7a3c:	dec00304 	addi	sp,sp,12
    7a40:	f800283a 	ret
    7a44:	2007883a 	mov	r3,r4
    7a48:	003ff206 	br	7a14 <__alt_data_end+0x80007a14>
    7a4c:	2007883a 	mov	r3,r4
    7a50:	003ff106 	br	7a18 <__alt_data_end+0x80007a18>
    7a54:	200d883a 	mov	r6,r4
    7a58:	003fee06 	br	7a14 <__alt_data_end+0x80007a14>

00007a5c <memmove>:
    7a5c:	2005883a 	mov	r2,r4
    7a60:	29000b2e 	bgeu	r5,r4,7a90 <memmove+0x34>
    7a64:	298f883a 	add	r7,r5,r6
    7a68:	21c0092e 	bgeu	r4,r7,7a90 <memmove+0x34>
    7a6c:	2187883a 	add	r3,r4,r6
    7a70:	198bc83a 	sub	r5,r3,r6
    7a74:	30004826 	beq	r6,zero,7b98 <memmove+0x13c>
    7a78:	39ffffc4 	addi	r7,r7,-1
    7a7c:	39000003 	ldbu	r4,0(r7)
    7a80:	18ffffc4 	addi	r3,r3,-1
    7a84:	19000005 	stb	r4,0(r3)
    7a88:	28fffb1e 	bne	r5,r3,7a78 <__alt_data_end+0x80007a78>
    7a8c:	f800283a 	ret
    7a90:	00c003c4 	movi	r3,15
    7a94:	1980412e 	bgeu	r3,r6,7b9c <memmove+0x140>
    7a98:	2886b03a 	or	r3,r5,r2
    7a9c:	18c000cc 	andi	r3,r3,3
    7aa0:	1800401e 	bne	r3,zero,7ba4 <memmove+0x148>
    7aa4:	33fffc04 	addi	r15,r6,-16
    7aa8:	781ed13a 	srli	r15,r15,4
    7aac:	28c00104 	addi	r3,r5,4
    7ab0:	13400104 	addi	r13,r2,4
    7ab4:	781c913a 	slli	r14,r15,4
    7ab8:	2b000204 	addi	r12,r5,8
    7abc:	12c00204 	addi	r11,r2,8
    7ac0:	73800504 	addi	r14,r14,20
    7ac4:	2a800304 	addi	r10,r5,12
    7ac8:	12400304 	addi	r9,r2,12
    7acc:	2b9d883a 	add	r14,r5,r14
    7ad0:	2811883a 	mov	r8,r5
    7ad4:	100f883a 	mov	r7,r2
    7ad8:	41000017 	ldw	r4,0(r8)
    7adc:	39c00404 	addi	r7,r7,16
    7ae0:	18c00404 	addi	r3,r3,16
    7ae4:	393ffc15 	stw	r4,-16(r7)
    7ae8:	193ffc17 	ldw	r4,-16(r3)
    7aec:	6b400404 	addi	r13,r13,16
    7af0:	5ac00404 	addi	r11,r11,16
    7af4:	693ffc15 	stw	r4,-16(r13)
    7af8:	61000017 	ldw	r4,0(r12)
    7afc:	4a400404 	addi	r9,r9,16
    7b00:	42000404 	addi	r8,r8,16
    7b04:	593ffc15 	stw	r4,-16(r11)
    7b08:	51000017 	ldw	r4,0(r10)
    7b0c:	63000404 	addi	r12,r12,16
    7b10:	52800404 	addi	r10,r10,16
    7b14:	493ffc15 	stw	r4,-16(r9)
    7b18:	1bbfef1e 	bne	r3,r14,7ad8 <__alt_data_end+0x80007ad8>
    7b1c:	79000044 	addi	r4,r15,1
    7b20:	2008913a 	slli	r4,r4,4
    7b24:	328003cc 	andi	r10,r6,15
    7b28:	02c000c4 	movi	r11,3
    7b2c:	1107883a 	add	r3,r2,r4
    7b30:	290b883a 	add	r5,r5,r4
    7b34:	5a801e2e 	bgeu	r11,r10,7bb0 <memmove+0x154>
    7b38:	1813883a 	mov	r9,r3
    7b3c:	2811883a 	mov	r8,r5
    7b40:	500f883a 	mov	r7,r10
    7b44:	41000017 	ldw	r4,0(r8)
    7b48:	4a400104 	addi	r9,r9,4
    7b4c:	39ffff04 	addi	r7,r7,-4
    7b50:	493fff15 	stw	r4,-4(r9)
    7b54:	42000104 	addi	r8,r8,4
    7b58:	59fffa36 	bltu	r11,r7,7b44 <__alt_data_end+0x80007b44>
    7b5c:	513fff04 	addi	r4,r10,-4
    7b60:	2008d0ba 	srli	r4,r4,2
    7b64:	318000cc 	andi	r6,r6,3
    7b68:	21000044 	addi	r4,r4,1
    7b6c:	2109883a 	add	r4,r4,r4
    7b70:	2109883a 	add	r4,r4,r4
    7b74:	1907883a 	add	r3,r3,r4
    7b78:	290b883a 	add	r5,r5,r4
    7b7c:	30000b26 	beq	r6,zero,7bac <memmove+0x150>
    7b80:	198d883a 	add	r6,r3,r6
    7b84:	29c00003 	ldbu	r7,0(r5)
    7b88:	18c00044 	addi	r3,r3,1
    7b8c:	29400044 	addi	r5,r5,1
    7b90:	19ffffc5 	stb	r7,-1(r3)
    7b94:	19bffb1e 	bne	r3,r6,7b84 <__alt_data_end+0x80007b84>
    7b98:	f800283a 	ret
    7b9c:	1007883a 	mov	r3,r2
    7ba0:	003ff606 	br	7b7c <__alt_data_end+0x80007b7c>
    7ba4:	1007883a 	mov	r3,r2
    7ba8:	003ff506 	br	7b80 <__alt_data_end+0x80007b80>
    7bac:	f800283a 	ret
    7bb0:	500d883a 	mov	r6,r10
    7bb4:	003ff106 	br	7b7c <__alt_data_end+0x80007b7c>

00007bb8 <_Balloc>:
    7bb8:	20801317 	ldw	r2,76(r4)
    7bbc:	defffc04 	addi	sp,sp,-16
    7bc0:	dc400115 	stw	r17,4(sp)
    7bc4:	dc000015 	stw	r16,0(sp)
    7bc8:	dfc00315 	stw	ra,12(sp)
    7bcc:	dc800215 	stw	r18,8(sp)
    7bd0:	2023883a 	mov	r17,r4
    7bd4:	2821883a 	mov	r16,r5
    7bd8:	10000f26 	beq	r2,zero,7c18 <_Balloc+0x60>
    7bdc:	8407883a 	add	r3,r16,r16
    7be0:	18c7883a 	add	r3,r3,r3
    7be4:	10c7883a 	add	r3,r2,r3
    7be8:	18800017 	ldw	r2,0(r3)
    7bec:	10001126 	beq	r2,zero,7c34 <_Balloc+0x7c>
    7bf0:	11000017 	ldw	r4,0(r2)
    7bf4:	19000015 	stw	r4,0(r3)
    7bf8:	10000415 	stw	zero,16(r2)
    7bfc:	10000315 	stw	zero,12(r2)
    7c00:	dfc00317 	ldw	ra,12(sp)
    7c04:	dc800217 	ldw	r18,8(sp)
    7c08:	dc400117 	ldw	r17,4(sp)
    7c0c:	dc000017 	ldw	r16,0(sp)
    7c10:	dec00404 	addi	sp,sp,16
    7c14:	f800283a 	ret
    7c18:	01800844 	movi	r6,33
    7c1c:	01400104 	movi	r5,4
    7c20:	000a8340 	call	a834 <_calloc_r>
    7c24:	88801315 	stw	r2,76(r17)
    7c28:	103fec1e 	bne	r2,zero,7bdc <__alt_data_end+0x80007bdc>
    7c2c:	0005883a 	mov	r2,zero
    7c30:	003ff306 	br	7c00 <__alt_data_end+0x80007c00>
    7c34:	01400044 	movi	r5,1
    7c38:	2c24983a 	sll	r18,r5,r16
    7c3c:	8809883a 	mov	r4,r17
    7c40:	91800144 	addi	r6,r18,5
    7c44:	318d883a 	add	r6,r6,r6
    7c48:	318d883a 	add	r6,r6,r6
    7c4c:	000a8340 	call	a834 <_calloc_r>
    7c50:	103ff626 	beq	r2,zero,7c2c <__alt_data_end+0x80007c2c>
    7c54:	14000115 	stw	r16,4(r2)
    7c58:	14800215 	stw	r18,8(r2)
    7c5c:	003fe606 	br	7bf8 <__alt_data_end+0x80007bf8>

00007c60 <_Bfree>:
    7c60:	28000826 	beq	r5,zero,7c84 <_Bfree+0x24>
    7c64:	28c00117 	ldw	r3,4(r5)
    7c68:	20801317 	ldw	r2,76(r4)
    7c6c:	18c7883a 	add	r3,r3,r3
    7c70:	18c7883a 	add	r3,r3,r3
    7c74:	10c5883a 	add	r2,r2,r3
    7c78:	10c00017 	ldw	r3,0(r2)
    7c7c:	28c00015 	stw	r3,0(r5)
    7c80:	11400015 	stw	r5,0(r2)
    7c84:	f800283a 	ret

00007c88 <__multadd>:
    7c88:	defffa04 	addi	sp,sp,-24
    7c8c:	dc800315 	stw	r18,12(sp)
    7c90:	dc400215 	stw	r17,8(sp)
    7c94:	dc000115 	stw	r16,4(sp)
    7c98:	2823883a 	mov	r17,r5
    7c9c:	2c000417 	ldw	r16,16(r5)
    7ca0:	dfc00515 	stw	ra,20(sp)
    7ca4:	dcc00415 	stw	r19,16(sp)
    7ca8:	2025883a 	mov	r18,r4
    7cac:	29400504 	addi	r5,r5,20
    7cb0:	0011883a 	mov	r8,zero
    7cb4:	28c00017 	ldw	r3,0(r5)
    7cb8:	29400104 	addi	r5,r5,4
    7cbc:	42000044 	addi	r8,r8,1
    7cc0:	18bfffcc 	andi	r2,r3,65535
    7cc4:	1185383a 	mul	r2,r2,r6
    7cc8:	1806d43a 	srli	r3,r3,16
    7ccc:	11cf883a 	add	r7,r2,r7
    7cd0:	3808d43a 	srli	r4,r7,16
    7cd4:	1987383a 	mul	r3,r3,r6
    7cd8:	38bfffcc 	andi	r2,r7,65535
    7cdc:	1907883a 	add	r3,r3,r4
    7ce0:	1808943a 	slli	r4,r3,16
    7ce4:	180ed43a 	srli	r7,r3,16
    7ce8:	2085883a 	add	r2,r4,r2
    7cec:	28bfff15 	stw	r2,-4(r5)
    7cf0:	443ff016 	blt	r8,r16,7cb4 <__alt_data_end+0x80007cb4>
    7cf4:	38000926 	beq	r7,zero,7d1c <__multadd+0x94>
    7cf8:	88800217 	ldw	r2,8(r17)
    7cfc:	80800f0e 	bge	r16,r2,7d3c <__multadd+0xb4>
    7d00:	80800144 	addi	r2,r16,5
    7d04:	1085883a 	add	r2,r2,r2
    7d08:	1085883a 	add	r2,r2,r2
    7d0c:	8885883a 	add	r2,r17,r2
    7d10:	11c00015 	stw	r7,0(r2)
    7d14:	84000044 	addi	r16,r16,1
    7d18:	8c000415 	stw	r16,16(r17)
    7d1c:	8805883a 	mov	r2,r17
    7d20:	dfc00517 	ldw	ra,20(sp)
    7d24:	dcc00417 	ldw	r19,16(sp)
    7d28:	dc800317 	ldw	r18,12(sp)
    7d2c:	dc400217 	ldw	r17,8(sp)
    7d30:	dc000117 	ldw	r16,4(sp)
    7d34:	dec00604 	addi	sp,sp,24
    7d38:	f800283a 	ret
    7d3c:	89400117 	ldw	r5,4(r17)
    7d40:	9009883a 	mov	r4,r18
    7d44:	d9c00015 	stw	r7,0(sp)
    7d48:	29400044 	addi	r5,r5,1
    7d4c:	0007bb80 	call	7bb8 <_Balloc>
    7d50:	89800417 	ldw	r6,16(r17)
    7d54:	89400304 	addi	r5,r17,12
    7d58:	11000304 	addi	r4,r2,12
    7d5c:	31800084 	addi	r6,r6,2
    7d60:	318d883a 	add	r6,r6,r6
    7d64:	318d883a 	add	r6,r6,r6
    7d68:	1027883a 	mov	r19,r2
    7d6c:	00079140 	call	7914 <memcpy>
    7d70:	d9c00017 	ldw	r7,0(sp)
    7d74:	88000a26 	beq	r17,zero,7da0 <__multadd+0x118>
    7d78:	88c00117 	ldw	r3,4(r17)
    7d7c:	90801317 	ldw	r2,76(r18)
    7d80:	18c7883a 	add	r3,r3,r3
    7d84:	18c7883a 	add	r3,r3,r3
    7d88:	10c5883a 	add	r2,r2,r3
    7d8c:	10c00017 	ldw	r3,0(r2)
    7d90:	88c00015 	stw	r3,0(r17)
    7d94:	14400015 	stw	r17,0(r2)
    7d98:	9823883a 	mov	r17,r19
    7d9c:	003fd806 	br	7d00 <__alt_data_end+0x80007d00>
    7da0:	9823883a 	mov	r17,r19
    7da4:	003fd606 	br	7d00 <__alt_data_end+0x80007d00>

00007da8 <__s2b>:
    7da8:	defff904 	addi	sp,sp,-28
    7dac:	dc400115 	stw	r17,4(sp)
    7db0:	dc000015 	stw	r16,0(sp)
    7db4:	2023883a 	mov	r17,r4
    7db8:	2821883a 	mov	r16,r5
    7dbc:	39000204 	addi	r4,r7,8
    7dc0:	01400244 	movi	r5,9
    7dc4:	dcc00315 	stw	r19,12(sp)
    7dc8:	dc800215 	stw	r18,8(sp)
    7dcc:	dfc00615 	stw	ra,24(sp)
    7dd0:	dd400515 	stw	r21,20(sp)
    7dd4:	dd000415 	stw	r20,16(sp)
    7dd8:	3825883a 	mov	r18,r7
    7ddc:	3027883a 	mov	r19,r6
    7de0:	000b89c0 	call	b89c <__divsi3>
    7de4:	00c00044 	movi	r3,1
    7de8:	000b883a 	mov	r5,zero
    7dec:	1880030e 	bge	r3,r2,7dfc <__s2b+0x54>
    7df0:	18c7883a 	add	r3,r3,r3
    7df4:	29400044 	addi	r5,r5,1
    7df8:	18bffd16 	blt	r3,r2,7df0 <__alt_data_end+0x80007df0>
    7dfc:	8809883a 	mov	r4,r17
    7e00:	0007bb80 	call	7bb8 <_Balloc>
    7e04:	d8c00717 	ldw	r3,28(sp)
    7e08:	10c00515 	stw	r3,20(r2)
    7e0c:	00c00044 	movi	r3,1
    7e10:	10c00415 	stw	r3,16(r2)
    7e14:	00c00244 	movi	r3,9
    7e18:	1cc0210e 	bge	r3,r19,7ea0 <__s2b+0xf8>
    7e1c:	80eb883a 	add	r21,r16,r3
    7e20:	a829883a 	mov	r20,r21
    7e24:	84e1883a 	add	r16,r16,r19
    7e28:	a1c00007 	ldb	r7,0(r20)
    7e2c:	01800284 	movi	r6,10
    7e30:	a5000044 	addi	r20,r20,1
    7e34:	100b883a 	mov	r5,r2
    7e38:	39fff404 	addi	r7,r7,-48
    7e3c:	8809883a 	mov	r4,r17
    7e40:	0007c880 	call	7c88 <__multadd>
    7e44:	a43ff81e 	bne	r20,r16,7e28 <__alt_data_end+0x80007e28>
    7e48:	ace1883a 	add	r16,r21,r19
    7e4c:	843ffe04 	addi	r16,r16,-8
    7e50:	9c800a0e 	bge	r19,r18,7e7c <__s2b+0xd4>
    7e54:	94e5c83a 	sub	r18,r18,r19
    7e58:	84a5883a 	add	r18,r16,r18
    7e5c:	81c00007 	ldb	r7,0(r16)
    7e60:	01800284 	movi	r6,10
    7e64:	84000044 	addi	r16,r16,1
    7e68:	100b883a 	mov	r5,r2
    7e6c:	39fff404 	addi	r7,r7,-48
    7e70:	8809883a 	mov	r4,r17
    7e74:	0007c880 	call	7c88 <__multadd>
    7e78:	84bff81e 	bne	r16,r18,7e5c <__alt_data_end+0x80007e5c>
    7e7c:	dfc00617 	ldw	ra,24(sp)
    7e80:	dd400517 	ldw	r21,20(sp)
    7e84:	dd000417 	ldw	r20,16(sp)
    7e88:	dcc00317 	ldw	r19,12(sp)
    7e8c:	dc800217 	ldw	r18,8(sp)
    7e90:	dc400117 	ldw	r17,4(sp)
    7e94:	dc000017 	ldw	r16,0(sp)
    7e98:	dec00704 	addi	sp,sp,28
    7e9c:	f800283a 	ret
    7ea0:	84000284 	addi	r16,r16,10
    7ea4:	1827883a 	mov	r19,r3
    7ea8:	003fe906 	br	7e50 <__alt_data_end+0x80007e50>

00007eac <__hi0bits>:
    7eac:	20bfffec 	andhi	r2,r4,65535
    7eb0:	1000141e 	bne	r2,zero,7f04 <__hi0bits+0x58>
    7eb4:	2008943a 	slli	r4,r4,16
    7eb8:	00800404 	movi	r2,16
    7ebc:	20ffc02c 	andhi	r3,r4,65280
    7ec0:	1800021e 	bne	r3,zero,7ecc <__hi0bits+0x20>
    7ec4:	2008923a 	slli	r4,r4,8
    7ec8:	10800204 	addi	r2,r2,8
    7ecc:	20fc002c 	andhi	r3,r4,61440
    7ed0:	1800021e 	bne	r3,zero,7edc <__hi0bits+0x30>
    7ed4:	2008913a 	slli	r4,r4,4
    7ed8:	10800104 	addi	r2,r2,4
    7edc:	20f0002c 	andhi	r3,r4,49152
    7ee0:	1800031e 	bne	r3,zero,7ef0 <__hi0bits+0x44>
    7ee4:	2109883a 	add	r4,r4,r4
    7ee8:	10800084 	addi	r2,r2,2
    7eec:	2109883a 	add	r4,r4,r4
    7ef0:	20000316 	blt	r4,zero,7f00 <__hi0bits+0x54>
    7ef4:	2110002c 	andhi	r4,r4,16384
    7ef8:	2000041e 	bne	r4,zero,7f0c <__hi0bits+0x60>
    7efc:	00800804 	movi	r2,32
    7f00:	f800283a 	ret
    7f04:	0005883a 	mov	r2,zero
    7f08:	003fec06 	br	7ebc <__alt_data_end+0x80007ebc>
    7f0c:	10800044 	addi	r2,r2,1
    7f10:	f800283a 	ret

00007f14 <__lo0bits>:
    7f14:	20c00017 	ldw	r3,0(r4)
    7f18:	188001cc 	andi	r2,r3,7
    7f1c:	10000826 	beq	r2,zero,7f40 <__lo0bits+0x2c>
    7f20:	1880004c 	andi	r2,r3,1
    7f24:	1000211e 	bne	r2,zero,7fac <__lo0bits+0x98>
    7f28:	1880008c 	andi	r2,r3,2
    7f2c:	1000211e 	bne	r2,zero,7fb4 <__lo0bits+0xa0>
    7f30:	1806d0ba 	srli	r3,r3,2
    7f34:	00800084 	movi	r2,2
    7f38:	20c00015 	stw	r3,0(r4)
    7f3c:	f800283a 	ret
    7f40:	18bfffcc 	andi	r2,r3,65535
    7f44:	10001326 	beq	r2,zero,7f94 <__lo0bits+0x80>
    7f48:	0005883a 	mov	r2,zero
    7f4c:	19403fcc 	andi	r5,r3,255
    7f50:	2800021e 	bne	r5,zero,7f5c <__lo0bits+0x48>
    7f54:	1806d23a 	srli	r3,r3,8
    7f58:	10800204 	addi	r2,r2,8
    7f5c:	194003cc 	andi	r5,r3,15
    7f60:	2800021e 	bne	r5,zero,7f6c <__lo0bits+0x58>
    7f64:	1806d13a 	srli	r3,r3,4
    7f68:	10800104 	addi	r2,r2,4
    7f6c:	194000cc 	andi	r5,r3,3
    7f70:	2800021e 	bne	r5,zero,7f7c <__lo0bits+0x68>
    7f74:	1806d0ba 	srli	r3,r3,2
    7f78:	10800084 	addi	r2,r2,2
    7f7c:	1940004c 	andi	r5,r3,1
    7f80:	2800081e 	bne	r5,zero,7fa4 <__lo0bits+0x90>
    7f84:	1806d07a 	srli	r3,r3,1
    7f88:	1800051e 	bne	r3,zero,7fa0 <__lo0bits+0x8c>
    7f8c:	00800804 	movi	r2,32
    7f90:	f800283a 	ret
    7f94:	1806d43a 	srli	r3,r3,16
    7f98:	00800404 	movi	r2,16
    7f9c:	003feb06 	br	7f4c <__alt_data_end+0x80007f4c>
    7fa0:	10800044 	addi	r2,r2,1
    7fa4:	20c00015 	stw	r3,0(r4)
    7fa8:	f800283a 	ret
    7fac:	0005883a 	mov	r2,zero
    7fb0:	f800283a 	ret
    7fb4:	1806d07a 	srli	r3,r3,1
    7fb8:	00800044 	movi	r2,1
    7fbc:	20c00015 	stw	r3,0(r4)
    7fc0:	f800283a 	ret

00007fc4 <__i2b>:
    7fc4:	defffd04 	addi	sp,sp,-12
    7fc8:	dc000015 	stw	r16,0(sp)
    7fcc:	04000044 	movi	r16,1
    7fd0:	dc400115 	stw	r17,4(sp)
    7fd4:	2823883a 	mov	r17,r5
    7fd8:	800b883a 	mov	r5,r16
    7fdc:	dfc00215 	stw	ra,8(sp)
    7fe0:	0007bb80 	call	7bb8 <_Balloc>
    7fe4:	14400515 	stw	r17,20(r2)
    7fe8:	14000415 	stw	r16,16(r2)
    7fec:	dfc00217 	ldw	ra,8(sp)
    7ff0:	dc400117 	ldw	r17,4(sp)
    7ff4:	dc000017 	ldw	r16,0(sp)
    7ff8:	dec00304 	addi	sp,sp,12
    7ffc:	f800283a 	ret

00008000 <__multiply>:
    8000:	defffa04 	addi	sp,sp,-24
    8004:	dcc00315 	stw	r19,12(sp)
    8008:	dc800215 	stw	r18,8(sp)
    800c:	34c00417 	ldw	r19,16(r6)
    8010:	2c800417 	ldw	r18,16(r5)
    8014:	dd000415 	stw	r20,16(sp)
    8018:	dc400115 	stw	r17,4(sp)
    801c:	dfc00515 	stw	ra,20(sp)
    8020:	dc000015 	stw	r16,0(sp)
    8024:	2829883a 	mov	r20,r5
    8028:	3023883a 	mov	r17,r6
    802c:	94c0050e 	bge	r18,r19,8044 <__multiply+0x44>
    8030:	9007883a 	mov	r3,r18
    8034:	3029883a 	mov	r20,r6
    8038:	9825883a 	mov	r18,r19
    803c:	2823883a 	mov	r17,r5
    8040:	1827883a 	mov	r19,r3
    8044:	a0800217 	ldw	r2,8(r20)
    8048:	94e1883a 	add	r16,r18,r19
    804c:	a1400117 	ldw	r5,4(r20)
    8050:	1400010e 	bge	r2,r16,8058 <__multiply+0x58>
    8054:	29400044 	addi	r5,r5,1
    8058:	0007bb80 	call	7bb8 <_Balloc>
    805c:	8415883a 	add	r10,r16,r16
    8060:	12c00504 	addi	r11,r2,20
    8064:	5295883a 	add	r10,r10,r10
    8068:	5a95883a 	add	r10,r11,r10
    806c:	5807883a 	mov	r3,r11
    8070:	5a80032e 	bgeu	r11,r10,8080 <__multiply+0x80>
    8074:	18000015 	stw	zero,0(r3)
    8078:	18c00104 	addi	r3,r3,4
    807c:	1abffd36 	bltu	r3,r10,8074 <__alt_data_end+0x80008074>
    8080:	9ce7883a 	add	r19,r19,r19
    8084:	94a5883a 	add	r18,r18,r18
    8088:	89800504 	addi	r6,r17,20
    808c:	9ce7883a 	add	r19,r19,r19
    8090:	a3400504 	addi	r13,r20,20
    8094:	94a5883a 	add	r18,r18,r18
    8098:	34d9883a 	add	r12,r6,r19
    809c:	6c93883a 	add	r9,r13,r18
    80a0:	3300422e 	bgeu	r6,r12,81ac <__multiply+0x1ac>
    80a4:	37c00017 	ldw	ra,0(r6)
    80a8:	fbffffcc 	andi	r15,ra,65535
    80ac:	78001b26 	beq	r15,zero,811c <__multiply+0x11c>
    80b0:	5811883a 	mov	r8,r11
    80b4:	681d883a 	mov	r14,r13
    80b8:	000f883a 	mov	r7,zero
    80bc:	71000017 	ldw	r4,0(r14)
    80c0:	40c00017 	ldw	r3,0(r8)
    80c4:	73800104 	addi	r14,r14,4
    80c8:	217fffcc 	andi	r5,r4,65535
    80cc:	2bcb383a 	mul	r5,r5,r15
    80d0:	2008d43a 	srli	r4,r4,16
    80d4:	1c7fffcc 	andi	r17,r3,65535
    80d8:	2c4b883a 	add	r5,r5,r17
    80dc:	29cb883a 	add	r5,r5,r7
    80e0:	23c9383a 	mul	r4,r4,r15
    80e4:	1806d43a 	srli	r3,r3,16
    80e8:	280ed43a 	srli	r7,r5,16
    80ec:	297fffcc 	andi	r5,r5,65535
    80f0:	20c7883a 	add	r3,r4,r3
    80f4:	19c7883a 	add	r3,r3,r7
    80f8:	1808943a 	slli	r4,r3,16
    80fc:	4023883a 	mov	r17,r8
    8100:	180ed43a 	srli	r7,r3,16
    8104:	214ab03a 	or	r5,r4,r5
    8108:	41400015 	stw	r5,0(r8)
    810c:	42000104 	addi	r8,r8,4
    8110:	727fea36 	bltu	r14,r9,80bc <__alt_data_end+0x800080bc>
    8114:	89c00115 	stw	r7,4(r17)
    8118:	37c00017 	ldw	ra,0(r6)
    811c:	f83ed43a 	srli	ra,ra,16
    8120:	f8001f26 	beq	ra,zero,81a0 <__multiply+0x1a0>
    8124:	58c00017 	ldw	r3,0(r11)
    8128:	681d883a 	mov	r14,r13
    812c:	581f883a 	mov	r15,r11
    8130:	1811883a 	mov	r8,r3
    8134:	5825883a 	mov	r18,r11
    8138:	000f883a 	mov	r7,zero
    813c:	00000106 	br	8144 <__multiply+0x144>
    8140:	8825883a 	mov	r18,r17
    8144:	7140000b 	ldhu	r5,0(r14)
    8148:	4010d43a 	srli	r8,r8,16
    814c:	193fffcc 	andi	r4,r3,65535
    8150:	2fcb383a 	mul	r5,r5,ra
    8154:	7bc00104 	addi	r15,r15,4
    8158:	73800104 	addi	r14,r14,4
    815c:	2a0b883a 	add	r5,r5,r8
    8160:	29cb883a 	add	r5,r5,r7
    8164:	2806943a 	slli	r3,r5,16
    8168:	94400104 	addi	r17,r18,4
    816c:	280ad43a 	srli	r5,r5,16
    8170:	1908b03a 	or	r4,r3,r4
    8174:	793fff15 	stw	r4,-4(r15)
    8178:	70ffff17 	ldw	r3,-4(r14)
    817c:	8a000017 	ldw	r8,0(r17)
    8180:	1806d43a 	srli	r3,r3,16
    8184:	413fffcc 	andi	r4,r8,65535
    8188:	1fc7383a 	mul	r3,r3,ra
    818c:	1907883a 	add	r3,r3,r4
    8190:	1947883a 	add	r3,r3,r5
    8194:	180ed43a 	srli	r7,r3,16
    8198:	727fe936 	bltu	r14,r9,8140 <__alt_data_end+0x80008140>
    819c:	90c00115 	stw	r3,4(r18)
    81a0:	31800104 	addi	r6,r6,4
    81a4:	5ac00104 	addi	r11,r11,4
    81a8:	333fbe36 	bltu	r6,r12,80a4 <__alt_data_end+0x800080a4>
    81ac:	0400090e 	bge	zero,r16,81d4 <__multiply+0x1d4>
    81b0:	50ffff17 	ldw	r3,-4(r10)
    81b4:	52bfff04 	addi	r10,r10,-4
    81b8:	18000326 	beq	r3,zero,81c8 <__multiply+0x1c8>
    81bc:	00000506 	br	81d4 <__multiply+0x1d4>
    81c0:	50c00017 	ldw	r3,0(r10)
    81c4:	1800031e 	bne	r3,zero,81d4 <__multiply+0x1d4>
    81c8:	843fffc4 	addi	r16,r16,-1
    81cc:	52bfff04 	addi	r10,r10,-4
    81d0:	803ffb1e 	bne	r16,zero,81c0 <__alt_data_end+0x800081c0>
    81d4:	14000415 	stw	r16,16(r2)
    81d8:	dfc00517 	ldw	ra,20(sp)
    81dc:	dd000417 	ldw	r20,16(sp)
    81e0:	dcc00317 	ldw	r19,12(sp)
    81e4:	dc800217 	ldw	r18,8(sp)
    81e8:	dc400117 	ldw	r17,4(sp)
    81ec:	dc000017 	ldw	r16,0(sp)
    81f0:	dec00604 	addi	sp,sp,24
    81f4:	f800283a 	ret

000081f8 <__pow5mult>:
    81f8:	defffa04 	addi	sp,sp,-24
    81fc:	dcc00315 	stw	r19,12(sp)
    8200:	dc000015 	stw	r16,0(sp)
    8204:	dfc00515 	stw	ra,20(sp)
    8208:	dd000415 	stw	r20,16(sp)
    820c:	dc800215 	stw	r18,8(sp)
    8210:	dc400115 	stw	r17,4(sp)
    8214:	308000cc 	andi	r2,r6,3
    8218:	3021883a 	mov	r16,r6
    821c:	2027883a 	mov	r19,r4
    8220:	10002f1e 	bne	r2,zero,82e0 <__pow5mult+0xe8>
    8224:	2825883a 	mov	r18,r5
    8228:	8021d0ba 	srai	r16,r16,2
    822c:	80001a26 	beq	r16,zero,8298 <__pow5mult+0xa0>
    8230:	9c401217 	ldw	r17,72(r19)
    8234:	8800061e 	bne	r17,zero,8250 <__pow5mult+0x58>
    8238:	00003406 	br	830c <__pow5mult+0x114>
    823c:	8021d07a 	srai	r16,r16,1
    8240:	80001526 	beq	r16,zero,8298 <__pow5mult+0xa0>
    8244:	88800017 	ldw	r2,0(r17)
    8248:	10001c26 	beq	r2,zero,82bc <__pow5mult+0xc4>
    824c:	1023883a 	mov	r17,r2
    8250:	8080004c 	andi	r2,r16,1
    8254:	103ff926 	beq	r2,zero,823c <__alt_data_end+0x8000823c>
    8258:	880d883a 	mov	r6,r17
    825c:	900b883a 	mov	r5,r18
    8260:	9809883a 	mov	r4,r19
    8264:	00080000 	call	8000 <__multiply>
    8268:	90001b26 	beq	r18,zero,82d8 <__pow5mult+0xe0>
    826c:	91000117 	ldw	r4,4(r18)
    8270:	98c01317 	ldw	r3,76(r19)
    8274:	8021d07a 	srai	r16,r16,1
    8278:	2109883a 	add	r4,r4,r4
    827c:	2109883a 	add	r4,r4,r4
    8280:	1907883a 	add	r3,r3,r4
    8284:	19000017 	ldw	r4,0(r3)
    8288:	91000015 	stw	r4,0(r18)
    828c:	1c800015 	stw	r18,0(r3)
    8290:	1025883a 	mov	r18,r2
    8294:	803feb1e 	bne	r16,zero,8244 <__alt_data_end+0x80008244>
    8298:	9005883a 	mov	r2,r18
    829c:	dfc00517 	ldw	ra,20(sp)
    82a0:	dd000417 	ldw	r20,16(sp)
    82a4:	dcc00317 	ldw	r19,12(sp)
    82a8:	dc800217 	ldw	r18,8(sp)
    82ac:	dc400117 	ldw	r17,4(sp)
    82b0:	dc000017 	ldw	r16,0(sp)
    82b4:	dec00604 	addi	sp,sp,24
    82b8:	f800283a 	ret
    82bc:	880d883a 	mov	r6,r17
    82c0:	880b883a 	mov	r5,r17
    82c4:	9809883a 	mov	r4,r19
    82c8:	00080000 	call	8000 <__multiply>
    82cc:	88800015 	stw	r2,0(r17)
    82d0:	10000015 	stw	zero,0(r2)
    82d4:	003fdd06 	br	824c <__alt_data_end+0x8000824c>
    82d8:	1025883a 	mov	r18,r2
    82dc:	003fd706 	br	823c <__alt_data_end+0x8000823c>
    82e0:	10bfffc4 	addi	r2,r2,-1
    82e4:	1085883a 	add	r2,r2,r2
    82e8:	00d00034 	movhi	r3,16384
    82ec:	18c05404 	addi	r3,r3,336
    82f0:	1085883a 	add	r2,r2,r2
    82f4:	1885883a 	add	r2,r3,r2
    82f8:	11800017 	ldw	r6,0(r2)
    82fc:	000f883a 	mov	r7,zero
    8300:	0007c880 	call	7c88 <__multadd>
    8304:	1025883a 	mov	r18,r2
    8308:	003fc706 	br	8228 <__alt_data_end+0x80008228>
    830c:	05000044 	movi	r20,1
    8310:	a00b883a 	mov	r5,r20
    8314:	9809883a 	mov	r4,r19
    8318:	0007bb80 	call	7bb8 <_Balloc>
    831c:	1023883a 	mov	r17,r2
    8320:	00809c44 	movi	r2,625
    8324:	88800515 	stw	r2,20(r17)
    8328:	8d000415 	stw	r20,16(r17)
    832c:	9c401215 	stw	r17,72(r19)
    8330:	88000015 	stw	zero,0(r17)
    8334:	003fc606 	br	8250 <__alt_data_end+0x80008250>

00008338 <__lshift>:
    8338:	defff904 	addi	sp,sp,-28
    833c:	dd400515 	stw	r21,20(sp)
    8340:	dcc00315 	stw	r19,12(sp)
    8344:	302bd17a 	srai	r21,r6,5
    8348:	2cc00417 	ldw	r19,16(r5)
    834c:	28800217 	ldw	r2,8(r5)
    8350:	dd000415 	stw	r20,16(sp)
    8354:	ace7883a 	add	r19,r21,r19
    8358:	dc800215 	stw	r18,8(sp)
    835c:	dc400115 	stw	r17,4(sp)
    8360:	dc000015 	stw	r16,0(sp)
    8364:	dfc00615 	stw	ra,24(sp)
    8368:	9c000044 	addi	r16,r19,1
    836c:	2823883a 	mov	r17,r5
    8370:	3029883a 	mov	r20,r6
    8374:	2025883a 	mov	r18,r4
    8378:	29400117 	ldw	r5,4(r5)
    837c:	1400030e 	bge	r2,r16,838c <__lshift+0x54>
    8380:	1085883a 	add	r2,r2,r2
    8384:	29400044 	addi	r5,r5,1
    8388:	143ffd16 	blt	r2,r16,8380 <__alt_data_end+0x80008380>
    838c:	9009883a 	mov	r4,r18
    8390:	0007bb80 	call	7bb8 <_Balloc>
    8394:	10c00504 	addi	r3,r2,20
    8398:	0540070e 	bge	zero,r21,83b8 <__lshift+0x80>
    839c:	ad6b883a 	add	r21,r21,r21
    83a0:	ad6b883a 	add	r21,r21,r21
    83a4:	1809883a 	mov	r4,r3
    83a8:	1d47883a 	add	r3,r3,r21
    83ac:	20000015 	stw	zero,0(r4)
    83b0:	21000104 	addi	r4,r4,4
    83b4:	193ffd1e 	bne	r3,r4,83ac <__alt_data_end+0x800083ac>
    83b8:	8a000417 	ldw	r8,16(r17)
    83bc:	89000504 	addi	r4,r17,20
    83c0:	a18007cc 	andi	r6,r20,31
    83c4:	4211883a 	add	r8,r8,r8
    83c8:	4211883a 	add	r8,r8,r8
    83cc:	2211883a 	add	r8,r4,r8
    83d0:	30002326 	beq	r6,zero,8460 <__lshift+0x128>
    83d4:	02400804 	movi	r9,32
    83d8:	4993c83a 	sub	r9,r9,r6
    83dc:	000b883a 	mov	r5,zero
    83e0:	21c00017 	ldw	r7,0(r4)
    83e4:	1815883a 	mov	r10,r3
    83e8:	18c00104 	addi	r3,r3,4
    83ec:	398e983a 	sll	r7,r7,r6
    83f0:	21000104 	addi	r4,r4,4
    83f4:	394ab03a 	or	r5,r7,r5
    83f8:	197fff15 	stw	r5,-4(r3)
    83fc:	217fff17 	ldw	r5,-4(r4)
    8400:	2a4ad83a 	srl	r5,r5,r9
    8404:	223ff636 	bltu	r4,r8,83e0 <__alt_data_end+0x800083e0>
    8408:	51400115 	stw	r5,4(r10)
    840c:	28001a1e 	bne	r5,zero,8478 <__lshift+0x140>
    8410:	843fffc4 	addi	r16,r16,-1
    8414:	14000415 	stw	r16,16(r2)
    8418:	88000826 	beq	r17,zero,843c <__lshift+0x104>
    841c:	89000117 	ldw	r4,4(r17)
    8420:	90c01317 	ldw	r3,76(r18)
    8424:	2109883a 	add	r4,r4,r4
    8428:	2109883a 	add	r4,r4,r4
    842c:	1907883a 	add	r3,r3,r4
    8430:	19000017 	ldw	r4,0(r3)
    8434:	89000015 	stw	r4,0(r17)
    8438:	1c400015 	stw	r17,0(r3)
    843c:	dfc00617 	ldw	ra,24(sp)
    8440:	dd400517 	ldw	r21,20(sp)
    8444:	dd000417 	ldw	r20,16(sp)
    8448:	dcc00317 	ldw	r19,12(sp)
    844c:	dc800217 	ldw	r18,8(sp)
    8450:	dc400117 	ldw	r17,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00704 	addi	sp,sp,28
    845c:	f800283a 	ret
    8460:	21400017 	ldw	r5,0(r4)
    8464:	18c00104 	addi	r3,r3,4
    8468:	21000104 	addi	r4,r4,4
    846c:	197fff15 	stw	r5,-4(r3)
    8470:	223ffb36 	bltu	r4,r8,8460 <__alt_data_end+0x80008460>
    8474:	003fe606 	br	8410 <__alt_data_end+0x80008410>
    8478:	9c000084 	addi	r16,r19,2
    847c:	003fe406 	br	8410 <__alt_data_end+0x80008410>

00008480 <__mcmp>:
    8480:	20800417 	ldw	r2,16(r4)
    8484:	28c00417 	ldw	r3,16(r5)
    8488:	10c5c83a 	sub	r2,r2,r3
    848c:	1000111e 	bne	r2,zero,84d4 <__mcmp+0x54>
    8490:	18c7883a 	add	r3,r3,r3
    8494:	18c7883a 	add	r3,r3,r3
    8498:	21000504 	addi	r4,r4,20
    849c:	29400504 	addi	r5,r5,20
    84a0:	20c5883a 	add	r2,r4,r3
    84a4:	28cb883a 	add	r5,r5,r3
    84a8:	00000106 	br	84b0 <__mcmp+0x30>
    84ac:	20800a2e 	bgeu	r4,r2,84d8 <__mcmp+0x58>
    84b0:	10bfff04 	addi	r2,r2,-4
    84b4:	297fff04 	addi	r5,r5,-4
    84b8:	11800017 	ldw	r6,0(r2)
    84bc:	28c00017 	ldw	r3,0(r5)
    84c0:	30fffa26 	beq	r6,r3,84ac <__alt_data_end+0x800084ac>
    84c4:	30c00236 	bltu	r6,r3,84d0 <__mcmp+0x50>
    84c8:	00800044 	movi	r2,1
    84cc:	f800283a 	ret
    84d0:	00bfffc4 	movi	r2,-1
    84d4:	f800283a 	ret
    84d8:	0005883a 	mov	r2,zero
    84dc:	f800283a 	ret

000084e0 <__mdiff>:
    84e0:	28c00417 	ldw	r3,16(r5)
    84e4:	30800417 	ldw	r2,16(r6)
    84e8:	defffa04 	addi	sp,sp,-24
    84ec:	dcc00315 	stw	r19,12(sp)
    84f0:	dc800215 	stw	r18,8(sp)
    84f4:	dfc00515 	stw	ra,20(sp)
    84f8:	dd000415 	stw	r20,16(sp)
    84fc:	dc400115 	stw	r17,4(sp)
    8500:	dc000015 	stw	r16,0(sp)
    8504:	1887c83a 	sub	r3,r3,r2
    8508:	2825883a 	mov	r18,r5
    850c:	3027883a 	mov	r19,r6
    8510:	1800141e 	bne	r3,zero,8564 <__mdiff+0x84>
    8514:	1085883a 	add	r2,r2,r2
    8518:	1085883a 	add	r2,r2,r2
    851c:	2a000504 	addi	r8,r5,20
    8520:	34000504 	addi	r16,r6,20
    8524:	4087883a 	add	r3,r8,r2
    8528:	8085883a 	add	r2,r16,r2
    852c:	00000106 	br	8534 <__mdiff+0x54>
    8530:	40c0592e 	bgeu	r8,r3,8698 <__mdiff+0x1b8>
    8534:	18ffff04 	addi	r3,r3,-4
    8538:	10bfff04 	addi	r2,r2,-4
    853c:	19c00017 	ldw	r7,0(r3)
    8540:	11400017 	ldw	r5,0(r2)
    8544:	397ffa26 	beq	r7,r5,8530 <__alt_data_end+0x80008530>
    8548:	3940592e 	bgeu	r7,r5,86b0 <__mdiff+0x1d0>
    854c:	9005883a 	mov	r2,r18
    8550:	4023883a 	mov	r17,r8
    8554:	9825883a 	mov	r18,r19
    8558:	05000044 	movi	r20,1
    855c:	1027883a 	mov	r19,r2
    8560:	00000406 	br	8574 <__mdiff+0x94>
    8564:	18005616 	blt	r3,zero,86c0 <__mdiff+0x1e0>
    8568:	34400504 	addi	r17,r6,20
    856c:	2c000504 	addi	r16,r5,20
    8570:	0029883a 	mov	r20,zero
    8574:	91400117 	ldw	r5,4(r18)
    8578:	0007bb80 	call	7bb8 <_Balloc>
    857c:	92400417 	ldw	r9,16(r18)
    8580:	9b000417 	ldw	r12,16(r19)
    8584:	12c00504 	addi	r11,r2,20
    8588:	4a51883a 	add	r8,r9,r9
    858c:	6319883a 	add	r12,r12,r12
    8590:	4211883a 	add	r8,r8,r8
    8594:	6319883a 	add	r12,r12,r12
    8598:	15000315 	stw	r20,12(r2)
    859c:	8211883a 	add	r8,r16,r8
    85a0:	8b19883a 	add	r12,r17,r12
    85a4:	0007883a 	mov	r3,zero
    85a8:	81400017 	ldw	r5,0(r16)
    85ac:	89c00017 	ldw	r7,0(r17)
    85b0:	59800104 	addi	r6,r11,4
    85b4:	293fffcc 	andi	r4,r5,65535
    85b8:	20c7883a 	add	r3,r4,r3
    85bc:	393fffcc 	andi	r4,r7,65535
    85c0:	1909c83a 	sub	r4,r3,r4
    85c4:	280ad43a 	srli	r5,r5,16
    85c8:	380ed43a 	srli	r7,r7,16
    85cc:	2007d43a 	srai	r3,r4,16
    85d0:	213fffcc 	andi	r4,r4,65535
    85d4:	29cbc83a 	sub	r5,r5,r7
    85d8:	28c7883a 	add	r3,r5,r3
    85dc:	180a943a 	slli	r5,r3,16
    85e0:	8c400104 	addi	r17,r17,4
    85e4:	84000104 	addi	r16,r16,4
    85e8:	2908b03a 	or	r4,r5,r4
    85ec:	59000015 	stw	r4,0(r11)
    85f0:	1807d43a 	srai	r3,r3,16
    85f4:	3015883a 	mov	r10,r6
    85f8:	3017883a 	mov	r11,r6
    85fc:	8b3fea36 	bltu	r17,r12,85a8 <__alt_data_end+0x800085a8>
    8600:	8200162e 	bgeu	r16,r8,865c <__mdiff+0x17c>
    8604:	8017883a 	mov	r11,r16
    8608:	59400017 	ldw	r5,0(r11)
    860c:	31800104 	addi	r6,r6,4
    8610:	5ac00104 	addi	r11,r11,4
    8614:	293fffcc 	andi	r4,r5,65535
    8618:	20c7883a 	add	r3,r4,r3
    861c:	280ed43a 	srli	r7,r5,16
    8620:	180bd43a 	srai	r5,r3,16
    8624:	193fffcc 	andi	r4,r3,65535
    8628:	3947883a 	add	r3,r7,r5
    862c:	180a943a 	slli	r5,r3,16
    8630:	1807d43a 	srai	r3,r3,16
    8634:	2908b03a 	or	r4,r5,r4
    8638:	313fff15 	stw	r4,-4(r6)
    863c:	5a3ff236 	bltu	r11,r8,8608 <__alt_data_end+0x80008608>
    8640:	0406303a 	nor	r3,zero,r16
    8644:	1a07883a 	add	r3,r3,r8
    8648:	1806d0ba 	srli	r3,r3,2
    864c:	18c00044 	addi	r3,r3,1
    8650:	18c7883a 	add	r3,r3,r3
    8654:	18c7883a 	add	r3,r3,r3
    8658:	50d5883a 	add	r10,r10,r3
    865c:	50ffff04 	addi	r3,r10,-4
    8660:	2000041e 	bne	r4,zero,8674 <__mdiff+0x194>
    8664:	18ffff04 	addi	r3,r3,-4
    8668:	19000017 	ldw	r4,0(r3)
    866c:	4a7fffc4 	addi	r9,r9,-1
    8670:	203ffc26 	beq	r4,zero,8664 <__alt_data_end+0x80008664>
    8674:	12400415 	stw	r9,16(r2)
    8678:	dfc00517 	ldw	ra,20(sp)
    867c:	dd000417 	ldw	r20,16(sp)
    8680:	dcc00317 	ldw	r19,12(sp)
    8684:	dc800217 	ldw	r18,8(sp)
    8688:	dc400117 	ldw	r17,4(sp)
    868c:	dc000017 	ldw	r16,0(sp)
    8690:	dec00604 	addi	sp,sp,24
    8694:	f800283a 	ret
    8698:	000b883a 	mov	r5,zero
    869c:	0007bb80 	call	7bb8 <_Balloc>
    86a0:	00c00044 	movi	r3,1
    86a4:	10c00415 	stw	r3,16(r2)
    86a8:	10000515 	stw	zero,20(r2)
    86ac:	003ff206 	br	8678 <__alt_data_end+0x80008678>
    86b0:	8023883a 	mov	r17,r16
    86b4:	0029883a 	mov	r20,zero
    86b8:	4021883a 	mov	r16,r8
    86bc:	003fad06 	br	8574 <__alt_data_end+0x80008574>
    86c0:	9005883a 	mov	r2,r18
    86c4:	94400504 	addi	r17,r18,20
    86c8:	9c000504 	addi	r16,r19,20
    86cc:	9825883a 	mov	r18,r19
    86d0:	05000044 	movi	r20,1
    86d4:	1027883a 	mov	r19,r2
    86d8:	003fa606 	br	8574 <__alt_data_end+0x80008574>

000086dc <__ulp>:
    86dc:	295ffc2c 	andhi	r5,r5,32752
    86e0:	00bf3034 	movhi	r2,64704
    86e4:	2887883a 	add	r3,r5,r2
    86e8:	00c0020e 	bge	zero,r3,86f4 <__ulp+0x18>
    86ec:	0005883a 	mov	r2,zero
    86f0:	f800283a 	ret
    86f4:	00c7c83a 	sub	r3,zero,r3
    86f8:	1807d53a 	srai	r3,r3,20
    86fc:	008004c4 	movi	r2,19
    8700:	10c00b0e 	bge	r2,r3,8730 <__ulp+0x54>
    8704:	18bffb04 	addi	r2,r3,-20
    8708:	01000784 	movi	r4,30
    870c:	0007883a 	mov	r3,zero
    8710:	20800516 	blt	r4,r2,8728 <__ulp+0x4c>
    8714:	010007c4 	movi	r4,31
    8718:	2089c83a 	sub	r4,r4,r2
    871c:	00800044 	movi	r2,1
    8720:	1104983a 	sll	r2,r2,r4
    8724:	f800283a 	ret
    8728:	00800044 	movi	r2,1
    872c:	f800283a 	ret
    8730:	01400234 	movhi	r5,8
    8734:	28c7d83a 	sra	r3,r5,r3
    8738:	0005883a 	mov	r2,zero
    873c:	f800283a 	ret

00008740 <__b2d>:
    8740:	defffa04 	addi	sp,sp,-24
    8744:	dc000015 	stw	r16,0(sp)
    8748:	24000417 	ldw	r16,16(r4)
    874c:	dc400115 	stw	r17,4(sp)
    8750:	24400504 	addi	r17,r4,20
    8754:	8421883a 	add	r16,r16,r16
    8758:	8421883a 	add	r16,r16,r16
    875c:	8c21883a 	add	r16,r17,r16
    8760:	dc800215 	stw	r18,8(sp)
    8764:	84bfff17 	ldw	r18,-4(r16)
    8768:	dd000415 	stw	r20,16(sp)
    876c:	dcc00315 	stw	r19,12(sp)
    8770:	9009883a 	mov	r4,r18
    8774:	2829883a 	mov	r20,r5
    8778:	dfc00515 	stw	ra,20(sp)
    877c:	0007eac0 	call	7eac <__hi0bits>
    8780:	00c00804 	movi	r3,32
    8784:	1889c83a 	sub	r4,r3,r2
    8788:	a1000015 	stw	r4,0(r20)
    878c:	01000284 	movi	r4,10
    8790:	84ffff04 	addi	r19,r16,-4
    8794:	20801216 	blt	r4,r2,87e0 <__b2d+0xa0>
    8798:	018002c4 	movi	r6,11
    879c:	308dc83a 	sub	r6,r6,r2
    87a0:	9186d83a 	srl	r3,r18,r6
    87a4:	18cffc34 	orhi	r3,r3,16368
    87a8:	8cc0212e 	bgeu	r17,r19,8830 <__b2d+0xf0>
    87ac:	813ffe17 	ldw	r4,-8(r16)
    87b0:	218cd83a 	srl	r6,r4,r6
    87b4:	10800544 	addi	r2,r2,21
    87b8:	9084983a 	sll	r2,r18,r2
    87bc:	1184b03a 	or	r2,r2,r6
    87c0:	dfc00517 	ldw	ra,20(sp)
    87c4:	dd000417 	ldw	r20,16(sp)
    87c8:	dcc00317 	ldw	r19,12(sp)
    87cc:	dc800217 	ldw	r18,8(sp)
    87d0:	dc400117 	ldw	r17,4(sp)
    87d4:	dc000017 	ldw	r16,0(sp)
    87d8:	dec00604 	addi	sp,sp,24
    87dc:	f800283a 	ret
    87e0:	8cc00f2e 	bgeu	r17,r19,8820 <__b2d+0xe0>
    87e4:	117ffd44 	addi	r5,r2,-11
    87e8:	80bffe17 	ldw	r2,-8(r16)
    87ec:	28000e26 	beq	r5,zero,8828 <__b2d+0xe8>
    87f0:	1949c83a 	sub	r4,r3,r5
    87f4:	9164983a 	sll	r18,r18,r5
    87f8:	1106d83a 	srl	r3,r2,r4
    87fc:	81bffe04 	addi	r6,r16,-8
    8800:	948ffc34 	orhi	r18,r18,16368
    8804:	90c6b03a 	or	r3,r18,r3
    8808:	89800e2e 	bgeu	r17,r6,8844 <__b2d+0x104>
    880c:	81bffd17 	ldw	r6,-12(r16)
    8810:	1144983a 	sll	r2,r2,r5
    8814:	310ad83a 	srl	r5,r6,r4
    8818:	2884b03a 	or	r2,r5,r2
    881c:	003fe806 	br	87c0 <__alt_data_end+0x800087c0>
    8820:	10bffd44 	addi	r2,r2,-11
    8824:	1000041e 	bne	r2,zero,8838 <__b2d+0xf8>
    8828:	90cffc34 	orhi	r3,r18,16368
    882c:	003fe406 	br	87c0 <__alt_data_end+0x800087c0>
    8830:	000d883a 	mov	r6,zero
    8834:	003fdf06 	br	87b4 <__alt_data_end+0x800087b4>
    8838:	90a4983a 	sll	r18,r18,r2
    883c:	0005883a 	mov	r2,zero
    8840:	003ff906 	br	8828 <__alt_data_end+0x80008828>
    8844:	1144983a 	sll	r2,r2,r5
    8848:	003fdd06 	br	87c0 <__alt_data_end+0x800087c0>

0000884c <__d2b>:
    884c:	defff804 	addi	sp,sp,-32
    8850:	dc000215 	stw	r16,8(sp)
    8854:	3021883a 	mov	r16,r6
    8858:	dc400315 	stw	r17,12(sp)
    885c:	8022907a 	slli	r17,r16,1
    8860:	dd000615 	stw	r20,24(sp)
    8864:	2829883a 	mov	r20,r5
    8868:	01400044 	movi	r5,1
    886c:	dcc00515 	stw	r19,20(sp)
    8870:	dc800415 	stw	r18,16(sp)
    8874:	dfc00715 	stw	ra,28(sp)
    8878:	3825883a 	mov	r18,r7
    887c:	8822d57a 	srli	r17,r17,21
    8880:	0007bb80 	call	7bb8 <_Balloc>
    8884:	1027883a 	mov	r19,r2
    8888:	00800434 	movhi	r2,16
    888c:	10bfffc4 	addi	r2,r2,-1
    8890:	808c703a 	and	r6,r16,r2
    8894:	88000126 	beq	r17,zero,889c <__d2b+0x50>
    8898:	31800434 	orhi	r6,r6,16
    889c:	d9800015 	stw	r6,0(sp)
    88a0:	a0002426 	beq	r20,zero,8934 <__d2b+0xe8>
    88a4:	d9000104 	addi	r4,sp,4
    88a8:	dd000115 	stw	r20,4(sp)
    88ac:	0007f140 	call	7f14 <__lo0bits>
    88b0:	d8c00017 	ldw	r3,0(sp)
    88b4:	10002f1e 	bne	r2,zero,8974 <__d2b+0x128>
    88b8:	d9000117 	ldw	r4,4(sp)
    88bc:	99000515 	stw	r4,20(r19)
    88c0:	1821003a 	cmpeq	r16,r3,zero
    88c4:	01000084 	movi	r4,2
    88c8:	2421c83a 	sub	r16,r4,r16
    88cc:	98c00615 	stw	r3,24(r19)
    88d0:	9c000415 	stw	r16,16(r19)
    88d4:	88001f1e 	bne	r17,zero,8954 <__d2b+0x108>
    88d8:	10bef384 	addi	r2,r2,-1074
    88dc:	90800015 	stw	r2,0(r18)
    88e0:	00900034 	movhi	r2,16384
    88e4:	10bfffc4 	addi	r2,r2,-1
    88e8:	8085883a 	add	r2,r16,r2
    88ec:	1085883a 	add	r2,r2,r2
    88f0:	1085883a 	add	r2,r2,r2
    88f4:	9885883a 	add	r2,r19,r2
    88f8:	11000517 	ldw	r4,20(r2)
    88fc:	8020917a 	slli	r16,r16,5
    8900:	0007eac0 	call	7eac <__hi0bits>
    8904:	d8c00817 	ldw	r3,32(sp)
    8908:	8085c83a 	sub	r2,r16,r2
    890c:	18800015 	stw	r2,0(r3)
    8910:	9805883a 	mov	r2,r19
    8914:	dfc00717 	ldw	ra,28(sp)
    8918:	dd000617 	ldw	r20,24(sp)
    891c:	dcc00517 	ldw	r19,20(sp)
    8920:	dc800417 	ldw	r18,16(sp)
    8924:	dc400317 	ldw	r17,12(sp)
    8928:	dc000217 	ldw	r16,8(sp)
    892c:	dec00804 	addi	sp,sp,32
    8930:	f800283a 	ret
    8934:	d809883a 	mov	r4,sp
    8938:	0007f140 	call	7f14 <__lo0bits>
    893c:	d8c00017 	ldw	r3,0(sp)
    8940:	04000044 	movi	r16,1
    8944:	9c000415 	stw	r16,16(r19)
    8948:	98c00515 	stw	r3,20(r19)
    894c:	10800804 	addi	r2,r2,32
    8950:	883fe126 	beq	r17,zero,88d8 <__alt_data_end+0x800088d8>
    8954:	00c00d44 	movi	r3,53
    8958:	8c7ef344 	addi	r17,r17,-1075
    895c:	88a3883a 	add	r17,r17,r2
    8960:	1885c83a 	sub	r2,r3,r2
    8964:	d8c00817 	ldw	r3,32(sp)
    8968:	94400015 	stw	r17,0(r18)
    896c:	18800015 	stw	r2,0(r3)
    8970:	003fe706 	br	8910 <__alt_data_end+0x80008910>
    8974:	01000804 	movi	r4,32
    8978:	2089c83a 	sub	r4,r4,r2
    897c:	1908983a 	sll	r4,r3,r4
    8980:	d9400117 	ldw	r5,4(sp)
    8984:	1886d83a 	srl	r3,r3,r2
    8988:	2148b03a 	or	r4,r4,r5
    898c:	99000515 	stw	r4,20(r19)
    8990:	d8c00015 	stw	r3,0(sp)
    8994:	003fca06 	br	88c0 <__alt_data_end+0x800088c0>

00008998 <__ratio>:
    8998:	defff904 	addi	sp,sp,-28
    899c:	dc400315 	stw	r17,12(sp)
    89a0:	2823883a 	mov	r17,r5
    89a4:	d9400104 	addi	r5,sp,4
    89a8:	dfc00615 	stw	ra,24(sp)
    89ac:	dcc00515 	stw	r19,20(sp)
    89b0:	dc800415 	stw	r18,16(sp)
    89b4:	2027883a 	mov	r19,r4
    89b8:	dc000215 	stw	r16,8(sp)
    89bc:	00087400 	call	8740 <__b2d>
    89c0:	d80b883a 	mov	r5,sp
    89c4:	8809883a 	mov	r4,r17
    89c8:	1025883a 	mov	r18,r2
    89cc:	1821883a 	mov	r16,r3
    89d0:	00087400 	call	8740 <__b2d>
    89d4:	8a000417 	ldw	r8,16(r17)
    89d8:	99000417 	ldw	r4,16(r19)
    89dc:	d9400117 	ldw	r5,4(sp)
    89e0:	2209c83a 	sub	r4,r4,r8
    89e4:	2010917a 	slli	r8,r4,5
    89e8:	d9000017 	ldw	r4,0(sp)
    89ec:	2909c83a 	sub	r4,r5,r4
    89f0:	4109883a 	add	r4,r8,r4
    89f4:	01000e0e 	bge	zero,r4,8a30 <__ratio+0x98>
    89f8:	2008953a 	slli	r4,r4,20
    89fc:	2421883a 	add	r16,r4,r16
    8a00:	100d883a 	mov	r6,r2
    8a04:	180f883a 	mov	r7,r3
    8a08:	9009883a 	mov	r4,r18
    8a0c:	800b883a 	mov	r5,r16
    8a10:	000c2fc0 	call	c2fc <__divdf3>
    8a14:	dfc00617 	ldw	ra,24(sp)
    8a18:	dcc00517 	ldw	r19,20(sp)
    8a1c:	dc800417 	ldw	r18,16(sp)
    8a20:	dc400317 	ldw	r17,12(sp)
    8a24:	dc000217 	ldw	r16,8(sp)
    8a28:	dec00704 	addi	sp,sp,28
    8a2c:	f800283a 	ret
    8a30:	2008953a 	slli	r4,r4,20
    8a34:	1907c83a 	sub	r3,r3,r4
    8a38:	003ff106 	br	8a00 <__alt_data_end+0x80008a00>

00008a3c <_mprec_log10>:
    8a3c:	defffe04 	addi	sp,sp,-8
    8a40:	dc000015 	stw	r16,0(sp)
    8a44:	dfc00115 	stw	ra,4(sp)
    8a48:	008005c4 	movi	r2,23
    8a4c:	2021883a 	mov	r16,r4
    8a50:	11000d0e 	bge	r2,r4,8a88 <_mprec_log10+0x4c>
    8a54:	0005883a 	mov	r2,zero
    8a58:	00cffc34 	movhi	r3,16368
    8a5c:	843fffc4 	addi	r16,r16,-1
    8a60:	000d883a 	mov	r6,zero
    8a64:	01d00934 	movhi	r7,16420
    8a68:	1009883a 	mov	r4,r2
    8a6c:	180b883a 	mov	r5,r3
    8a70:	000ce3c0 	call	ce3c <__muldf3>
    8a74:	803ff91e 	bne	r16,zero,8a5c <__alt_data_end+0x80008a5c>
    8a78:	dfc00117 	ldw	ra,4(sp)
    8a7c:	dc000017 	ldw	r16,0(sp)
    8a80:	dec00204 	addi	sp,sp,8
    8a84:	f800283a 	ret
    8a88:	202090fa 	slli	r16,r4,3
    8a8c:	00900034 	movhi	r2,16384
    8a90:	10806b04 	addi	r2,r2,428
    8a94:	1421883a 	add	r16,r2,r16
    8a98:	80800017 	ldw	r2,0(r16)
    8a9c:	80c00117 	ldw	r3,4(r16)
    8aa0:	dfc00117 	ldw	ra,4(sp)
    8aa4:	dc000017 	ldw	r16,0(sp)
    8aa8:	dec00204 	addi	sp,sp,8
    8aac:	f800283a 	ret

00008ab0 <__copybits>:
    8ab0:	297fffc4 	addi	r5,r5,-1
    8ab4:	280fd17a 	srai	r7,r5,5
    8ab8:	30c00417 	ldw	r3,16(r6)
    8abc:	30800504 	addi	r2,r6,20
    8ac0:	39c00044 	addi	r7,r7,1
    8ac4:	18c7883a 	add	r3,r3,r3
    8ac8:	39cf883a 	add	r7,r7,r7
    8acc:	18c7883a 	add	r3,r3,r3
    8ad0:	39cf883a 	add	r7,r7,r7
    8ad4:	10c7883a 	add	r3,r2,r3
    8ad8:	21cf883a 	add	r7,r4,r7
    8adc:	10c00d2e 	bgeu	r2,r3,8b14 <__copybits+0x64>
    8ae0:	200b883a 	mov	r5,r4
    8ae4:	12000017 	ldw	r8,0(r2)
    8ae8:	29400104 	addi	r5,r5,4
    8aec:	10800104 	addi	r2,r2,4
    8af0:	2a3fff15 	stw	r8,-4(r5)
    8af4:	10fffb36 	bltu	r2,r3,8ae4 <__alt_data_end+0x80008ae4>
    8af8:	1985c83a 	sub	r2,r3,r6
    8afc:	10bffac4 	addi	r2,r2,-21
    8b00:	1004d0ba 	srli	r2,r2,2
    8b04:	10800044 	addi	r2,r2,1
    8b08:	1085883a 	add	r2,r2,r2
    8b0c:	1085883a 	add	r2,r2,r2
    8b10:	2089883a 	add	r4,r4,r2
    8b14:	21c0032e 	bgeu	r4,r7,8b24 <__copybits+0x74>
    8b18:	20000015 	stw	zero,0(r4)
    8b1c:	21000104 	addi	r4,r4,4
    8b20:	21fffd36 	bltu	r4,r7,8b18 <__alt_data_end+0x80008b18>
    8b24:	f800283a 	ret

00008b28 <__any_on>:
    8b28:	20c00417 	ldw	r3,16(r4)
    8b2c:	2805d17a 	srai	r2,r5,5
    8b30:	21000504 	addi	r4,r4,20
    8b34:	18800d0e 	bge	r3,r2,8b6c <__any_on+0x44>
    8b38:	18c7883a 	add	r3,r3,r3
    8b3c:	18c7883a 	add	r3,r3,r3
    8b40:	20c7883a 	add	r3,r4,r3
    8b44:	20c0192e 	bgeu	r4,r3,8bac <__any_on+0x84>
    8b48:	18bfff17 	ldw	r2,-4(r3)
    8b4c:	18ffff04 	addi	r3,r3,-4
    8b50:	1000041e 	bne	r2,zero,8b64 <__any_on+0x3c>
    8b54:	20c0142e 	bgeu	r4,r3,8ba8 <__any_on+0x80>
    8b58:	18ffff04 	addi	r3,r3,-4
    8b5c:	19400017 	ldw	r5,0(r3)
    8b60:	283ffc26 	beq	r5,zero,8b54 <__alt_data_end+0x80008b54>
    8b64:	00800044 	movi	r2,1
    8b68:	f800283a 	ret
    8b6c:	10c00a0e 	bge	r2,r3,8b98 <__any_on+0x70>
    8b70:	1085883a 	add	r2,r2,r2
    8b74:	1085883a 	add	r2,r2,r2
    8b78:	294007cc 	andi	r5,r5,31
    8b7c:	2087883a 	add	r3,r4,r2
    8b80:	283ff026 	beq	r5,zero,8b44 <__alt_data_end+0x80008b44>
    8b84:	19800017 	ldw	r6,0(r3)
    8b88:	3144d83a 	srl	r2,r6,r5
    8b8c:	114a983a 	sll	r5,r2,r5
    8b90:	317ff41e 	bne	r6,r5,8b64 <__alt_data_end+0x80008b64>
    8b94:	003feb06 	br	8b44 <__alt_data_end+0x80008b44>
    8b98:	1085883a 	add	r2,r2,r2
    8b9c:	1085883a 	add	r2,r2,r2
    8ba0:	2087883a 	add	r3,r4,r2
    8ba4:	003fe706 	br	8b44 <__alt_data_end+0x80008b44>
    8ba8:	f800283a 	ret
    8bac:	0005883a 	mov	r2,zero
    8bb0:	f800283a 	ret

00008bb4 <_read_r>:
    8bb4:	defffd04 	addi	sp,sp,-12
    8bb8:	2805883a 	mov	r2,r5
    8bbc:	dc000015 	stw	r16,0(sp)
    8bc0:	04100034 	movhi	r16,16384
    8bc4:	dc400115 	stw	r17,4(sp)
    8bc8:	300b883a 	mov	r5,r6
    8bcc:	84086104 	addi	r16,r16,8580
    8bd0:	2023883a 	mov	r17,r4
    8bd4:	380d883a 	mov	r6,r7
    8bd8:	1009883a 	mov	r4,r2
    8bdc:	dfc00215 	stw	ra,8(sp)
    8be0:	80000015 	stw	zero,0(r16)
    8be4:	000e90c0 	call	e90c <read>
    8be8:	00ffffc4 	movi	r3,-1
    8bec:	10c00526 	beq	r2,r3,8c04 <_read_r+0x50>
    8bf0:	dfc00217 	ldw	ra,8(sp)
    8bf4:	dc400117 	ldw	r17,4(sp)
    8bf8:	dc000017 	ldw	r16,0(sp)
    8bfc:	dec00304 	addi	sp,sp,12
    8c00:	f800283a 	ret
    8c04:	80c00017 	ldw	r3,0(r16)
    8c08:	183ff926 	beq	r3,zero,8bf0 <__alt_data_end+0x80008bf0>
    8c0c:	88c00015 	stw	r3,0(r17)
    8c10:	003ff706 	br	8bf0 <__alt_data_end+0x80008bf0>

00008c14 <_realloc_r>:
    8c14:	defff604 	addi	sp,sp,-40
    8c18:	dc800215 	stw	r18,8(sp)
    8c1c:	dfc00915 	stw	ra,36(sp)
    8c20:	df000815 	stw	fp,32(sp)
    8c24:	ddc00715 	stw	r23,28(sp)
    8c28:	dd800615 	stw	r22,24(sp)
    8c2c:	dd400515 	stw	r21,20(sp)
    8c30:	dd000415 	stw	r20,16(sp)
    8c34:	dcc00315 	stw	r19,12(sp)
    8c38:	dc400115 	stw	r17,4(sp)
    8c3c:	dc000015 	stw	r16,0(sp)
    8c40:	3025883a 	mov	r18,r6
    8c44:	2800b726 	beq	r5,zero,8f24 <_realloc_r+0x310>
    8c48:	282b883a 	mov	r21,r5
    8c4c:	2029883a 	mov	r20,r4
    8c50:	000e6340 	call	e634 <__malloc_lock>
    8c54:	a8bfff17 	ldw	r2,-4(r21)
    8c58:	043fff04 	movi	r16,-4
    8c5c:	90c002c4 	addi	r3,r18,11
    8c60:	01000584 	movi	r4,22
    8c64:	acfffe04 	addi	r19,r21,-8
    8c68:	1420703a 	and	r16,r2,r16
    8c6c:	20c0332e 	bgeu	r4,r3,8d3c <_realloc_r+0x128>
    8c70:	047ffe04 	movi	r17,-8
    8c74:	1c62703a 	and	r17,r3,r17
    8c78:	8807883a 	mov	r3,r17
    8c7c:	88005816 	blt	r17,zero,8de0 <_realloc_r+0x1cc>
    8c80:	8c805736 	bltu	r17,r18,8de0 <_realloc_r+0x1cc>
    8c84:	80c0300e 	bge	r16,r3,8d48 <_realloc_r+0x134>
    8c88:	07100034 	movhi	fp,16384
    8c8c:	e7022804 	addi	fp,fp,2208
    8c90:	e1c00217 	ldw	r7,8(fp)
    8c94:	9c09883a 	add	r4,r19,r16
    8c98:	22000117 	ldw	r8,4(r4)
    8c9c:	21c06326 	beq	r4,r7,8e2c <_realloc_r+0x218>
    8ca0:	017fff84 	movi	r5,-2
    8ca4:	414a703a 	and	r5,r8,r5
    8ca8:	214b883a 	add	r5,r4,r5
    8cac:	29800117 	ldw	r6,4(r5)
    8cb0:	3180004c 	andi	r6,r6,1
    8cb4:	30003f26 	beq	r6,zero,8db4 <_realloc_r+0x1a0>
    8cb8:	1080004c 	andi	r2,r2,1
    8cbc:	10008326 	beq	r2,zero,8ecc <_realloc_r+0x2b8>
    8cc0:	900b883a 	mov	r5,r18
    8cc4:	a009883a 	mov	r4,r20
    8cc8:	00014a00 	call	14a0 <_malloc_r>
    8ccc:	1025883a 	mov	r18,r2
    8cd0:	10011e26 	beq	r2,zero,914c <_realloc_r+0x538>
    8cd4:	a93fff17 	ldw	r4,-4(r21)
    8cd8:	10fffe04 	addi	r3,r2,-8
    8cdc:	00bfff84 	movi	r2,-2
    8ce0:	2084703a 	and	r2,r4,r2
    8ce4:	9885883a 	add	r2,r19,r2
    8ce8:	1880ee26 	beq	r3,r2,90a4 <_realloc_r+0x490>
    8cec:	81bfff04 	addi	r6,r16,-4
    8cf0:	00800904 	movi	r2,36
    8cf4:	1180b836 	bltu	r2,r6,8fd8 <_realloc_r+0x3c4>
    8cf8:	00c004c4 	movi	r3,19
    8cfc:	19809636 	bltu	r3,r6,8f58 <_realloc_r+0x344>
    8d00:	9005883a 	mov	r2,r18
    8d04:	a807883a 	mov	r3,r21
    8d08:	19000017 	ldw	r4,0(r3)
    8d0c:	11000015 	stw	r4,0(r2)
    8d10:	19000117 	ldw	r4,4(r3)
    8d14:	11000115 	stw	r4,4(r2)
    8d18:	18c00217 	ldw	r3,8(r3)
    8d1c:	10c00215 	stw	r3,8(r2)
    8d20:	a80b883a 	mov	r5,r21
    8d24:	a009883a 	mov	r4,r20
    8d28:	0006d4c0 	call	6d4c <_free_r>
    8d2c:	a009883a 	mov	r4,r20
    8d30:	000e6580 	call	e658 <__malloc_unlock>
    8d34:	9005883a 	mov	r2,r18
    8d38:	00001206 	br	8d84 <_realloc_r+0x170>
    8d3c:	00c00404 	movi	r3,16
    8d40:	1823883a 	mov	r17,r3
    8d44:	003fce06 	br	8c80 <__alt_data_end+0x80008c80>
    8d48:	a825883a 	mov	r18,r21
    8d4c:	8445c83a 	sub	r2,r16,r17
    8d50:	00c003c4 	movi	r3,15
    8d54:	18802636 	bltu	r3,r2,8df0 <_realloc_r+0x1dc>
    8d58:	99800117 	ldw	r6,4(r19)
    8d5c:	9c07883a 	add	r3,r19,r16
    8d60:	3180004c 	andi	r6,r6,1
    8d64:	3420b03a 	or	r16,r6,r16
    8d68:	9c000115 	stw	r16,4(r19)
    8d6c:	18800117 	ldw	r2,4(r3)
    8d70:	10800054 	ori	r2,r2,1
    8d74:	18800115 	stw	r2,4(r3)
    8d78:	a009883a 	mov	r4,r20
    8d7c:	000e6580 	call	e658 <__malloc_unlock>
    8d80:	9005883a 	mov	r2,r18
    8d84:	dfc00917 	ldw	ra,36(sp)
    8d88:	df000817 	ldw	fp,32(sp)
    8d8c:	ddc00717 	ldw	r23,28(sp)
    8d90:	dd800617 	ldw	r22,24(sp)
    8d94:	dd400517 	ldw	r21,20(sp)
    8d98:	dd000417 	ldw	r20,16(sp)
    8d9c:	dcc00317 	ldw	r19,12(sp)
    8da0:	dc800217 	ldw	r18,8(sp)
    8da4:	dc400117 	ldw	r17,4(sp)
    8da8:	dc000017 	ldw	r16,0(sp)
    8dac:	dec00a04 	addi	sp,sp,40
    8db0:	f800283a 	ret
    8db4:	017fff04 	movi	r5,-4
    8db8:	414a703a 	and	r5,r8,r5
    8dbc:	814d883a 	add	r6,r16,r5
    8dc0:	30c01f16 	blt	r6,r3,8e40 <_realloc_r+0x22c>
    8dc4:	20800317 	ldw	r2,12(r4)
    8dc8:	20c00217 	ldw	r3,8(r4)
    8dcc:	a825883a 	mov	r18,r21
    8dd0:	3021883a 	mov	r16,r6
    8dd4:	18800315 	stw	r2,12(r3)
    8dd8:	10c00215 	stw	r3,8(r2)
    8ddc:	003fdb06 	br	8d4c <__alt_data_end+0x80008d4c>
    8de0:	00800304 	movi	r2,12
    8de4:	a0800015 	stw	r2,0(r20)
    8de8:	0005883a 	mov	r2,zero
    8dec:	003fe506 	br	8d84 <__alt_data_end+0x80008d84>
    8df0:	98c00117 	ldw	r3,4(r19)
    8df4:	9c4b883a 	add	r5,r19,r17
    8df8:	11000054 	ori	r4,r2,1
    8dfc:	18c0004c 	andi	r3,r3,1
    8e00:	1c62b03a 	or	r17,r3,r17
    8e04:	9c400115 	stw	r17,4(r19)
    8e08:	29000115 	stw	r4,4(r5)
    8e0c:	2885883a 	add	r2,r5,r2
    8e10:	10c00117 	ldw	r3,4(r2)
    8e14:	29400204 	addi	r5,r5,8
    8e18:	a009883a 	mov	r4,r20
    8e1c:	18c00054 	ori	r3,r3,1
    8e20:	10c00115 	stw	r3,4(r2)
    8e24:	0006d4c0 	call	6d4c <_free_r>
    8e28:	003fd306 	br	8d78 <__alt_data_end+0x80008d78>
    8e2c:	017fff04 	movi	r5,-4
    8e30:	414a703a 	and	r5,r8,r5
    8e34:	89800404 	addi	r6,r17,16
    8e38:	8151883a 	add	r8,r16,r5
    8e3c:	4180590e 	bge	r8,r6,8fa4 <_realloc_r+0x390>
    8e40:	1080004c 	andi	r2,r2,1
    8e44:	103f9e1e 	bne	r2,zero,8cc0 <__alt_data_end+0x80008cc0>
    8e48:	adbffe17 	ldw	r22,-8(r21)
    8e4c:	00bfff04 	movi	r2,-4
    8e50:	9dadc83a 	sub	r22,r19,r22
    8e54:	b1800117 	ldw	r6,4(r22)
    8e58:	3084703a 	and	r2,r6,r2
    8e5c:	20002026 	beq	r4,zero,8ee0 <_realloc_r+0x2cc>
    8e60:	80af883a 	add	r23,r16,r2
    8e64:	b96f883a 	add	r23,r23,r5
    8e68:	21c05f26 	beq	r4,r7,8fe8 <_realloc_r+0x3d4>
    8e6c:	b8c01c16 	blt	r23,r3,8ee0 <_realloc_r+0x2cc>
    8e70:	20800317 	ldw	r2,12(r4)
    8e74:	20c00217 	ldw	r3,8(r4)
    8e78:	81bfff04 	addi	r6,r16,-4
    8e7c:	01000904 	movi	r4,36
    8e80:	18800315 	stw	r2,12(r3)
    8e84:	10c00215 	stw	r3,8(r2)
    8e88:	b0c00217 	ldw	r3,8(r22)
    8e8c:	b0800317 	ldw	r2,12(r22)
    8e90:	b4800204 	addi	r18,r22,8
    8e94:	18800315 	stw	r2,12(r3)
    8e98:	10c00215 	stw	r3,8(r2)
    8e9c:	21801b36 	bltu	r4,r6,8f0c <_realloc_r+0x2f8>
    8ea0:	008004c4 	movi	r2,19
    8ea4:	1180352e 	bgeu	r2,r6,8f7c <_realloc_r+0x368>
    8ea8:	a8800017 	ldw	r2,0(r21)
    8eac:	b0800215 	stw	r2,8(r22)
    8eb0:	a8800117 	ldw	r2,4(r21)
    8eb4:	b0800315 	stw	r2,12(r22)
    8eb8:	008006c4 	movi	r2,27
    8ebc:	11807f36 	bltu	r2,r6,90bc <_realloc_r+0x4a8>
    8ec0:	b0800404 	addi	r2,r22,16
    8ec4:	ad400204 	addi	r21,r21,8
    8ec8:	00002d06 	br	8f80 <_realloc_r+0x36c>
    8ecc:	adbffe17 	ldw	r22,-8(r21)
    8ed0:	00bfff04 	movi	r2,-4
    8ed4:	9dadc83a 	sub	r22,r19,r22
    8ed8:	b1000117 	ldw	r4,4(r22)
    8edc:	2084703a 	and	r2,r4,r2
    8ee0:	b03f7726 	beq	r22,zero,8cc0 <__alt_data_end+0x80008cc0>
    8ee4:	80af883a 	add	r23,r16,r2
    8ee8:	b8ff7516 	blt	r23,r3,8cc0 <__alt_data_end+0x80008cc0>
    8eec:	b0800317 	ldw	r2,12(r22)
    8ef0:	b0c00217 	ldw	r3,8(r22)
    8ef4:	81bfff04 	addi	r6,r16,-4
    8ef8:	01000904 	movi	r4,36
    8efc:	18800315 	stw	r2,12(r3)
    8f00:	10c00215 	stw	r3,8(r2)
    8f04:	b4800204 	addi	r18,r22,8
    8f08:	21bfe52e 	bgeu	r4,r6,8ea0 <__alt_data_end+0x80008ea0>
    8f0c:	a80b883a 	mov	r5,r21
    8f10:	9009883a 	mov	r4,r18
    8f14:	0007a5c0 	call	7a5c <memmove>
    8f18:	b821883a 	mov	r16,r23
    8f1c:	b027883a 	mov	r19,r22
    8f20:	003f8a06 	br	8d4c <__alt_data_end+0x80008d4c>
    8f24:	300b883a 	mov	r5,r6
    8f28:	dfc00917 	ldw	ra,36(sp)
    8f2c:	df000817 	ldw	fp,32(sp)
    8f30:	ddc00717 	ldw	r23,28(sp)
    8f34:	dd800617 	ldw	r22,24(sp)
    8f38:	dd400517 	ldw	r21,20(sp)
    8f3c:	dd000417 	ldw	r20,16(sp)
    8f40:	dcc00317 	ldw	r19,12(sp)
    8f44:	dc800217 	ldw	r18,8(sp)
    8f48:	dc400117 	ldw	r17,4(sp)
    8f4c:	dc000017 	ldw	r16,0(sp)
    8f50:	dec00a04 	addi	sp,sp,40
    8f54:	00014a01 	jmpi	14a0 <_malloc_r>
    8f58:	a8c00017 	ldw	r3,0(r21)
    8f5c:	90c00015 	stw	r3,0(r18)
    8f60:	a8c00117 	ldw	r3,4(r21)
    8f64:	90c00115 	stw	r3,4(r18)
    8f68:	00c006c4 	movi	r3,27
    8f6c:	19804536 	bltu	r3,r6,9084 <_realloc_r+0x470>
    8f70:	90800204 	addi	r2,r18,8
    8f74:	a8c00204 	addi	r3,r21,8
    8f78:	003f6306 	br	8d08 <__alt_data_end+0x80008d08>
    8f7c:	9005883a 	mov	r2,r18
    8f80:	a8c00017 	ldw	r3,0(r21)
    8f84:	b821883a 	mov	r16,r23
    8f88:	b027883a 	mov	r19,r22
    8f8c:	10c00015 	stw	r3,0(r2)
    8f90:	a8c00117 	ldw	r3,4(r21)
    8f94:	10c00115 	stw	r3,4(r2)
    8f98:	a8c00217 	ldw	r3,8(r21)
    8f9c:	10c00215 	stw	r3,8(r2)
    8fa0:	003f6a06 	br	8d4c <__alt_data_end+0x80008d4c>
    8fa4:	9c67883a 	add	r19,r19,r17
    8fa8:	4445c83a 	sub	r2,r8,r17
    8fac:	e4c00215 	stw	r19,8(fp)
    8fb0:	10800054 	ori	r2,r2,1
    8fb4:	98800115 	stw	r2,4(r19)
    8fb8:	a8bfff17 	ldw	r2,-4(r21)
    8fbc:	a009883a 	mov	r4,r20
    8fc0:	1080004c 	andi	r2,r2,1
    8fc4:	1462b03a 	or	r17,r2,r17
    8fc8:	ac7fff15 	stw	r17,-4(r21)
    8fcc:	000e6580 	call	e658 <__malloc_unlock>
    8fd0:	a805883a 	mov	r2,r21
    8fd4:	003f6b06 	br	8d84 <__alt_data_end+0x80008d84>
    8fd8:	a80b883a 	mov	r5,r21
    8fdc:	9009883a 	mov	r4,r18
    8fe0:	0007a5c0 	call	7a5c <memmove>
    8fe4:	003f4e06 	br	8d20 <__alt_data_end+0x80008d20>
    8fe8:	89000404 	addi	r4,r17,16
    8fec:	b93fbc16 	blt	r23,r4,8ee0 <__alt_data_end+0x80008ee0>
    8ff0:	b0800317 	ldw	r2,12(r22)
    8ff4:	b0c00217 	ldw	r3,8(r22)
    8ff8:	81bfff04 	addi	r6,r16,-4
    8ffc:	01000904 	movi	r4,36
    9000:	18800315 	stw	r2,12(r3)
    9004:	10c00215 	stw	r3,8(r2)
    9008:	b4800204 	addi	r18,r22,8
    900c:	21804336 	bltu	r4,r6,911c <_realloc_r+0x508>
    9010:	008004c4 	movi	r2,19
    9014:	11803f2e 	bgeu	r2,r6,9114 <_realloc_r+0x500>
    9018:	a8800017 	ldw	r2,0(r21)
    901c:	b0800215 	stw	r2,8(r22)
    9020:	a8800117 	ldw	r2,4(r21)
    9024:	b0800315 	stw	r2,12(r22)
    9028:	008006c4 	movi	r2,27
    902c:	11803f36 	bltu	r2,r6,912c <_realloc_r+0x518>
    9030:	b0800404 	addi	r2,r22,16
    9034:	ad400204 	addi	r21,r21,8
    9038:	a8c00017 	ldw	r3,0(r21)
    903c:	10c00015 	stw	r3,0(r2)
    9040:	a8c00117 	ldw	r3,4(r21)
    9044:	10c00115 	stw	r3,4(r2)
    9048:	a8c00217 	ldw	r3,8(r21)
    904c:	10c00215 	stw	r3,8(r2)
    9050:	b447883a 	add	r3,r22,r17
    9054:	bc45c83a 	sub	r2,r23,r17
    9058:	e0c00215 	stw	r3,8(fp)
    905c:	10800054 	ori	r2,r2,1
    9060:	18800115 	stw	r2,4(r3)
    9064:	b0800117 	ldw	r2,4(r22)
    9068:	a009883a 	mov	r4,r20
    906c:	1080004c 	andi	r2,r2,1
    9070:	1462b03a 	or	r17,r2,r17
    9074:	b4400115 	stw	r17,4(r22)
    9078:	000e6580 	call	e658 <__malloc_unlock>
    907c:	9005883a 	mov	r2,r18
    9080:	003f4006 	br	8d84 <__alt_data_end+0x80008d84>
    9084:	a8c00217 	ldw	r3,8(r21)
    9088:	90c00215 	stw	r3,8(r18)
    908c:	a8c00317 	ldw	r3,12(r21)
    9090:	90c00315 	stw	r3,12(r18)
    9094:	30801126 	beq	r6,r2,90dc <_realloc_r+0x4c8>
    9098:	90800404 	addi	r2,r18,16
    909c:	a8c00404 	addi	r3,r21,16
    90a0:	003f1906 	br	8d08 <__alt_data_end+0x80008d08>
    90a4:	90ffff17 	ldw	r3,-4(r18)
    90a8:	00bfff04 	movi	r2,-4
    90ac:	a825883a 	mov	r18,r21
    90b0:	1884703a 	and	r2,r3,r2
    90b4:	80a1883a 	add	r16,r16,r2
    90b8:	003f2406 	br	8d4c <__alt_data_end+0x80008d4c>
    90bc:	a8800217 	ldw	r2,8(r21)
    90c0:	b0800415 	stw	r2,16(r22)
    90c4:	a8800317 	ldw	r2,12(r21)
    90c8:	b0800515 	stw	r2,20(r22)
    90cc:	31000a26 	beq	r6,r4,90f8 <_realloc_r+0x4e4>
    90d0:	b0800604 	addi	r2,r22,24
    90d4:	ad400404 	addi	r21,r21,16
    90d8:	003fa906 	br	8f80 <__alt_data_end+0x80008f80>
    90dc:	a9000417 	ldw	r4,16(r21)
    90e0:	90800604 	addi	r2,r18,24
    90e4:	a8c00604 	addi	r3,r21,24
    90e8:	91000415 	stw	r4,16(r18)
    90ec:	a9000517 	ldw	r4,20(r21)
    90f0:	91000515 	stw	r4,20(r18)
    90f4:	003f0406 	br	8d08 <__alt_data_end+0x80008d08>
    90f8:	a8c00417 	ldw	r3,16(r21)
    90fc:	ad400604 	addi	r21,r21,24
    9100:	b0800804 	addi	r2,r22,32
    9104:	b0c00615 	stw	r3,24(r22)
    9108:	a8ffff17 	ldw	r3,-4(r21)
    910c:	b0c00715 	stw	r3,28(r22)
    9110:	003f9b06 	br	8f80 <__alt_data_end+0x80008f80>
    9114:	9005883a 	mov	r2,r18
    9118:	003fc706 	br	9038 <__alt_data_end+0x80009038>
    911c:	a80b883a 	mov	r5,r21
    9120:	9009883a 	mov	r4,r18
    9124:	0007a5c0 	call	7a5c <memmove>
    9128:	003fc906 	br	9050 <__alt_data_end+0x80009050>
    912c:	a8800217 	ldw	r2,8(r21)
    9130:	b0800415 	stw	r2,16(r22)
    9134:	a8800317 	ldw	r2,12(r21)
    9138:	b0800515 	stw	r2,20(r22)
    913c:	31000726 	beq	r6,r4,915c <_realloc_r+0x548>
    9140:	b0800604 	addi	r2,r22,24
    9144:	ad400404 	addi	r21,r21,16
    9148:	003fbb06 	br	9038 <__alt_data_end+0x80009038>
    914c:	a009883a 	mov	r4,r20
    9150:	000e6580 	call	e658 <__malloc_unlock>
    9154:	0005883a 	mov	r2,zero
    9158:	003f0a06 	br	8d84 <__alt_data_end+0x80008d84>
    915c:	a8c00417 	ldw	r3,16(r21)
    9160:	ad400604 	addi	r21,r21,24
    9164:	b0800804 	addi	r2,r22,32
    9168:	b0c00615 	stw	r3,24(r22)
    916c:	a8ffff17 	ldw	r3,-4(r21)
    9170:	b0c00715 	stw	r3,28(r22)
    9174:	003fb006 	br	9038 <__alt_data_end+0x80009038>

00009178 <__fpclassifyd>:
    9178:	00a00034 	movhi	r2,32768
    917c:	10bfffc4 	addi	r2,r2,-1
    9180:	2884703a 	and	r2,r5,r2
    9184:	10000726 	beq	r2,zero,91a4 <__fpclassifyd+0x2c>
    9188:	00fffc34 	movhi	r3,65520
    918c:	019ff834 	movhi	r6,32736
    9190:	28c7883a 	add	r3,r5,r3
    9194:	31bfffc4 	addi	r6,r6,-1
    9198:	30c00536 	bltu	r6,r3,91b0 <__fpclassifyd+0x38>
    919c:	00800104 	movi	r2,4
    91a0:	f800283a 	ret
    91a4:	2000021e 	bne	r4,zero,91b0 <__fpclassifyd+0x38>
    91a8:	00800084 	movi	r2,2
    91ac:	f800283a 	ret
    91b0:	00dffc34 	movhi	r3,32752
    91b4:	019ff834 	movhi	r6,32736
    91b8:	28cb883a 	add	r5,r5,r3
    91bc:	31bfffc4 	addi	r6,r6,-1
    91c0:	317ff62e 	bgeu	r6,r5,919c <__alt_data_end+0x8000919c>
    91c4:	01400434 	movhi	r5,16
    91c8:	297fffc4 	addi	r5,r5,-1
    91cc:	28800236 	bltu	r5,r2,91d8 <__fpclassifyd+0x60>
    91d0:	008000c4 	movi	r2,3
    91d4:	f800283a 	ret
    91d8:	10c00226 	beq	r2,r3,91e4 <__fpclassifyd+0x6c>
    91dc:	0005883a 	mov	r2,zero
    91e0:	f800283a 	ret
    91e4:	2005003a 	cmpeq	r2,r4,zero
    91e8:	f800283a 	ret

000091ec <__sprint_r.part.0>:
    91ec:	28801917 	ldw	r2,100(r5)
    91f0:	defff604 	addi	sp,sp,-40
    91f4:	dd400515 	stw	r21,20(sp)
    91f8:	dfc00915 	stw	ra,36(sp)
    91fc:	df000815 	stw	fp,32(sp)
    9200:	ddc00715 	stw	r23,28(sp)
    9204:	dd800615 	stw	r22,24(sp)
    9208:	dd000415 	stw	r20,16(sp)
    920c:	dcc00315 	stw	r19,12(sp)
    9210:	dc800215 	stw	r18,8(sp)
    9214:	dc400115 	stw	r17,4(sp)
    9218:	dc000015 	stw	r16,0(sp)
    921c:	1088000c 	andi	r2,r2,8192
    9220:	302b883a 	mov	r21,r6
    9224:	10002e26 	beq	r2,zero,92e0 <__sprint_r.part.0+0xf4>
    9228:	30800217 	ldw	r2,8(r6)
    922c:	35800017 	ldw	r22,0(r6)
    9230:	10002926 	beq	r2,zero,92d8 <__sprint_r.part.0+0xec>
    9234:	2827883a 	mov	r19,r5
    9238:	2029883a 	mov	r20,r4
    923c:	b5c00104 	addi	r23,r22,4
    9240:	04bfffc4 	movi	r18,-1
    9244:	bc400017 	ldw	r17,0(r23)
    9248:	b4000017 	ldw	r16,0(r22)
    924c:	0039883a 	mov	fp,zero
    9250:	8822d0ba 	srli	r17,r17,2
    9254:	8800031e 	bne	r17,zero,9264 <__sprint_r.part.0+0x78>
    9258:	00001806 	br	92bc <__sprint_r.part.0+0xd0>
    925c:	84000104 	addi	r16,r16,4
    9260:	8f001526 	beq	r17,fp,92b8 <__sprint_r.part.0+0xcc>
    9264:	81400017 	ldw	r5,0(r16)
    9268:	980d883a 	mov	r6,r19
    926c:	a009883a 	mov	r4,r20
    9270:	000ab600 	call	ab60 <_fputwc_r>
    9274:	e7000044 	addi	fp,fp,1
    9278:	14bff81e 	bne	r2,r18,925c <__alt_data_end+0x8000925c>
    927c:	9005883a 	mov	r2,r18
    9280:	a8000215 	stw	zero,8(r21)
    9284:	a8000115 	stw	zero,4(r21)
    9288:	dfc00917 	ldw	ra,36(sp)
    928c:	df000817 	ldw	fp,32(sp)
    9290:	ddc00717 	ldw	r23,28(sp)
    9294:	dd800617 	ldw	r22,24(sp)
    9298:	dd400517 	ldw	r21,20(sp)
    929c:	dd000417 	ldw	r20,16(sp)
    92a0:	dcc00317 	ldw	r19,12(sp)
    92a4:	dc800217 	ldw	r18,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00a04 	addi	sp,sp,40
    92b4:	f800283a 	ret
    92b8:	a8800217 	ldw	r2,8(r21)
    92bc:	8c63883a 	add	r17,r17,r17
    92c0:	8c63883a 	add	r17,r17,r17
    92c4:	1445c83a 	sub	r2,r2,r17
    92c8:	a8800215 	stw	r2,8(r21)
    92cc:	b5800204 	addi	r22,r22,8
    92d0:	bdc00204 	addi	r23,r23,8
    92d4:	103fdb1e 	bne	r2,zero,9244 <__alt_data_end+0x80009244>
    92d8:	0005883a 	mov	r2,zero
    92dc:	003fe806 	br	9280 <__alt_data_end+0x80009280>
    92e0:	000705c0 	call	705c <__sfvwrite_r>
    92e4:	003fe606 	br	9280 <__alt_data_end+0x80009280>

000092e8 <__sprint_r>:
    92e8:	30c00217 	ldw	r3,8(r6)
    92ec:	18000126 	beq	r3,zero,92f4 <__sprint_r+0xc>
    92f0:	00091ec1 	jmpi	91ec <__sprint_r.part.0>
    92f4:	30000115 	stw	zero,4(r6)
    92f8:	0005883a 	mov	r2,zero
    92fc:	f800283a 	ret

00009300 <___vfiprintf_internal_r>:
    9300:	deffc904 	addi	sp,sp,-220
    9304:	df003515 	stw	fp,212(sp)
    9308:	dd003115 	stw	r20,196(sp)
    930c:	dfc03615 	stw	ra,216(sp)
    9310:	ddc03415 	stw	r23,208(sp)
    9314:	dd803315 	stw	r22,204(sp)
    9318:	dd403215 	stw	r21,200(sp)
    931c:	dcc03015 	stw	r19,192(sp)
    9320:	dc802f15 	stw	r18,188(sp)
    9324:	dc402e15 	stw	r17,184(sp)
    9328:	dc002d15 	stw	r16,180(sp)
    932c:	d9002015 	stw	r4,128(sp)
    9330:	d9c02215 	stw	r7,136(sp)
    9334:	2829883a 	mov	r20,r5
    9338:	3039883a 	mov	fp,r6
    933c:	20000226 	beq	r4,zero,9348 <___vfiprintf_internal_r+0x48>
    9340:	20800e17 	ldw	r2,56(r4)
    9344:	1000cf26 	beq	r2,zero,9684 <___vfiprintf_internal_r+0x384>
    9348:	a080030b 	ldhu	r2,12(r20)
    934c:	10c8000c 	andi	r3,r2,8192
    9350:	1800061e 	bne	r3,zero,936c <___vfiprintf_internal_r+0x6c>
    9354:	a1001917 	ldw	r4,100(r20)
    9358:	00f7ffc4 	movi	r3,-8193
    935c:	10880014 	ori	r2,r2,8192
    9360:	20c6703a 	and	r3,r4,r3
    9364:	a080030d 	sth	r2,12(r20)
    9368:	a0c01915 	stw	r3,100(r20)
    936c:	10c0020c 	andi	r3,r2,8
    9370:	1800a926 	beq	r3,zero,9618 <___vfiprintf_internal_r+0x318>
    9374:	a0c00417 	ldw	r3,16(r20)
    9378:	1800a726 	beq	r3,zero,9618 <___vfiprintf_internal_r+0x318>
    937c:	1080068c 	andi	r2,r2,26
    9380:	00c00284 	movi	r3,10
    9384:	10c0ac26 	beq	r2,r3,9638 <___vfiprintf_internal_r+0x338>
    9388:	da801a04 	addi	r10,sp,104
    938c:	da801e15 	stw	r10,120(sp)
    9390:	d8801e17 	ldw	r2,120(sp)
    9394:	da8019c4 	addi	r10,sp,103
    9398:	05900034 	movhi	r22,16384
    939c:	05d00034 	movhi	r23,16384
    93a0:	da801f15 	stw	r10,124(sp)
    93a4:	1295c83a 	sub	r10,r2,r10
    93a8:	b580a104 	addi	r22,r22,644
    93ac:	bdc09d04 	addi	r23,r23,628
    93b0:	dec01a15 	stw	sp,104(sp)
    93b4:	d8001c15 	stw	zero,112(sp)
    93b8:	d8001b15 	stw	zero,108(sp)
    93bc:	d8002615 	stw	zero,152(sp)
    93c0:	d8002315 	stw	zero,140(sp)
    93c4:	da802715 	stw	r10,156(sp)
    93c8:	d811883a 	mov	r8,sp
    93cc:	dd002115 	stw	r20,132(sp)
    93d0:	e021883a 	mov	r16,fp
    93d4:	80800007 	ldb	r2,0(r16)
    93d8:	1003ea26 	beq	r2,zero,a384 <___vfiprintf_internal_r+0x1084>
    93dc:	00c00944 	movi	r3,37
    93e0:	8025883a 	mov	r18,r16
    93e4:	10c0021e 	bne	r2,r3,93f0 <___vfiprintf_internal_r+0xf0>
    93e8:	00001606 	br	9444 <___vfiprintf_internal_r+0x144>
    93ec:	10c00326 	beq	r2,r3,93fc <___vfiprintf_internal_r+0xfc>
    93f0:	94800044 	addi	r18,r18,1
    93f4:	90800007 	ldb	r2,0(r18)
    93f8:	103ffc1e 	bne	r2,zero,93ec <__alt_data_end+0x800093ec>
    93fc:	9423c83a 	sub	r17,r18,r16
    9400:	88001026 	beq	r17,zero,9444 <___vfiprintf_internal_r+0x144>
    9404:	d8c01c17 	ldw	r3,112(sp)
    9408:	d8801b17 	ldw	r2,108(sp)
    940c:	44000015 	stw	r16,0(r8)
    9410:	88c7883a 	add	r3,r17,r3
    9414:	10800044 	addi	r2,r2,1
    9418:	44400115 	stw	r17,4(r8)
    941c:	d8c01c15 	stw	r3,112(sp)
    9420:	d8801b15 	stw	r2,108(sp)
    9424:	010001c4 	movi	r4,7
    9428:	2080760e 	bge	r4,r2,9604 <___vfiprintf_internal_r+0x304>
    942c:	1803821e 	bne	r3,zero,a238 <___vfiprintf_internal_r+0xf38>
    9430:	da802317 	ldw	r10,140(sp)
    9434:	d8001b15 	stw	zero,108(sp)
    9438:	d811883a 	mov	r8,sp
    943c:	5455883a 	add	r10,r10,r17
    9440:	da802315 	stw	r10,140(sp)
    9444:	90800007 	ldb	r2,0(r18)
    9448:	10044626 	beq	r2,zero,a564 <___vfiprintf_internal_r+0x1264>
    944c:	90c00047 	ldb	r3,1(r18)
    9450:	94000044 	addi	r16,r18,1
    9454:	d8001d85 	stb	zero,118(sp)
    9458:	0009883a 	mov	r4,zero
    945c:	000f883a 	mov	r7,zero
    9460:	027fffc4 	movi	r9,-1
    9464:	0023883a 	mov	r17,zero
    9468:	0029883a 	mov	r20,zero
    946c:	01401604 	movi	r5,88
    9470:	01800244 	movi	r6,9
    9474:	03400a84 	movi	r13,42
    9478:	03001b04 	movi	r12,108
    947c:	84000044 	addi	r16,r16,1
    9480:	18bff804 	addi	r2,r3,-32
    9484:	28827336 	bltu	r5,r2,9e54 <___vfiprintf_internal_r+0xb54>
    9488:	100490ba 	slli	r2,r2,2
    948c:	02800074 	movhi	r10,1
    9490:	52a52804 	addi	r10,r10,-27488
    9494:	1285883a 	add	r2,r2,r10
    9498:	10800017 	ldw	r2,0(r2)
    949c:	1000683a 	jmp	r2
    94a0:	00009b88 	cmpgei	zero,zero,622
    94a4:	00009e54 	movui	zero,633
    94a8:	00009e54 	movui	zero,633
    94ac:	00009ba8 	cmpgeui	zero,zero,622
    94b0:	00009e54 	movui	zero,633
    94b4:	00009e54 	movui	zero,633
    94b8:	00009e54 	movui	zero,633
    94bc:	00009e54 	movui	zero,633
    94c0:	00009e54 	movui	zero,633
    94c4:	00009e54 	movui	zero,633
    94c8:	00009d90 	cmplti	zero,zero,630
    94cc:	00009dac 	andhi	zero,zero,630
    94d0:	00009e54 	movui	zero,633
    94d4:	00009694 	movui	zero,602
    94d8:	00009dbc 	xorhi	zero,zero,630
    94dc:	00009e54 	movui	zero,633
    94e0:	00009bb4 	movhi	zero,622
    94e4:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    94e8:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    94ec:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    94f0:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    94f4:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    94f8:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    94fc:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    9500:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    9504:	00009bc0 	call	9bc <NMEA_parse+0xa8>
    9508:	00009e54 	movui	zero,633
    950c:	00009e54 	movui	zero,633
    9510:	00009e54 	movui	zero,633
    9514:	00009e54 	movui	zero,633
    9518:	00009e54 	movui	zero,633
    951c:	00009e54 	movui	zero,633
    9520:	00009e54 	movui	zero,633
    9524:	00009e54 	movui	zero,633
    9528:	00009e54 	movui	zero,633
    952c:	00009e54 	movui	zero,633
    9530:	00009bec 	andhi	zero,zero,623
    9534:	00009e54 	movui	zero,633
    9538:	00009e54 	movui	zero,633
    953c:	00009e54 	movui	zero,633
    9540:	00009e54 	movui	zero,633
    9544:	00009e54 	movui	zero,633
    9548:	00009e54 	movui	zero,633
    954c:	00009e54 	movui	zero,633
    9550:	00009e54 	movui	zero,633
    9554:	00009e54 	movui	zero,633
    9558:	00009e54 	movui	zero,633
    955c:	00009c24 	muli	zero,zero,624
    9560:	00009e54 	movui	zero,633
    9564:	00009e54 	movui	zero,633
    9568:	00009e54 	movui	zero,633
    956c:	00009e54 	movui	zero,633
    9570:	00009e54 	movui	zero,633
    9574:	00009c7c 	xorhi	zero,zero,625
    9578:	00009e54 	movui	zero,633
    957c:	00009e54 	movui	zero,633
    9580:	00009cec 	andhi	zero,zero,627
    9584:	00009e54 	movui	zero,633
    9588:	00009e54 	movui	zero,633
    958c:	00009e54 	movui	zero,633
    9590:	00009e54 	movui	zero,633
    9594:	00009e54 	movui	zero,633
    9598:	00009e54 	movui	zero,633
    959c:	00009e54 	movui	zero,633
    95a0:	00009e54 	movui	zero,633
    95a4:	00009e54 	movui	zero,633
    95a8:	00009e54 	movui	zero,633
    95ac:	00009a98 	cmpnei	zero,zero,618
    95b0:	00009ac4 	movi	zero,619
    95b4:	00009e54 	movui	zero,633
    95b8:	00009e54 	movui	zero,633
    95bc:	00009e54 	movui	zero,633
    95c0:	00009dfc 	xorhi	zero,zero,631
    95c4:	00009ac4 	movi	zero,619
    95c8:	00009e54 	movui	zero,633
    95cc:	00009e54 	movui	zero,633
    95d0:	00009958 	cmpnei	zero,zero,613
    95d4:	00009e54 	movui	zero,633
    95d8:	00009968 	cmpgeui	zero,zero,613
    95dc:	000099a4 	muli	zero,zero,614
    95e0:	000096a0 	cmpeqi	zero,zero,602
    95e4:	0000994c 	andi	zero,zero,613
    95e8:	00009e54 	movui	zero,633
    95ec:	00009d28 	cmpgeui	zero,zero,628
    95f0:	00009e54 	movui	zero,633
    95f4:	00009d80 	call	9d8 <NMEA_parse+0xc4>
    95f8:	00009e54 	movui	zero,633
    95fc:	00009e54 	movui	zero,633
    9600:	00009a44 	movi	zero,617
    9604:	42000204 	addi	r8,r8,8
    9608:	da802317 	ldw	r10,140(sp)
    960c:	5455883a 	add	r10,r10,r17
    9610:	da802315 	stw	r10,140(sp)
    9614:	003f8b06 	br	9444 <__alt_data_end+0x80009444>
    9618:	d9002017 	ldw	r4,128(sp)
    961c:	a00b883a 	mov	r5,r20
    9620:	0004b040 	call	4b04 <__swsetup_r>
    9624:	1003b11e 	bne	r2,zero,a4ec <___vfiprintf_internal_r+0x11ec>
    9628:	a080030b 	ldhu	r2,12(r20)
    962c:	00c00284 	movi	r3,10
    9630:	1080068c 	andi	r2,r2,26
    9634:	10ff541e 	bne	r2,r3,9388 <__alt_data_end+0x80009388>
    9638:	a080038f 	ldh	r2,14(r20)
    963c:	103f5216 	blt	r2,zero,9388 <__alt_data_end+0x80009388>
    9640:	d9c02217 	ldw	r7,136(sp)
    9644:	d9002017 	ldw	r4,128(sp)
    9648:	e00d883a 	mov	r6,fp
    964c:	a00b883a 	mov	r5,r20
    9650:	000a7780 	call	a778 <__sbprintf>
    9654:	dfc03617 	ldw	ra,216(sp)
    9658:	df003517 	ldw	fp,212(sp)
    965c:	ddc03417 	ldw	r23,208(sp)
    9660:	dd803317 	ldw	r22,204(sp)
    9664:	dd403217 	ldw	r21,200(sp)
    9668:	dd003117 	ldw	r20,196(sp)
    966c:	dcc03017 	ldw	r19,192(sp)
    9670:	dc802f17 	ldw	r18,188(sp)
    9674:	dc402e17 	ldw	r17,184(sp)
    9678:	dc002d17 	ldw	r16,180(sp)
    967c:	dec03704 	addi	sp,sp,220
    9680:	f800283a 	ret
    9684:	0006b2c0 	call	6b2c <__sinit>
    9688:	003f2f06 	br	9348 <__alt_data_end+0x80009348>
    968c:	0463c83a 	sub	r17,zero,r17
    9690:	d8802215 	stw	r2,136(sp)
    9694:	a5000114 	ori	r20,r20,4
    9698:	80c00007 	ldb	r3,0(r16)
    969c:	003f7706 	br	947c <__alt_data_end+0x8000947c>
    96a0:	00800c04 	movi	r2,48
    96a4:	da802217 	ldw	r10,136(sp)
    96a8:	d8801d05 	stb	r2,116(sp)
    96ac:	00801e04 	movi	r2,120
    96b0:	d8801d45 	stb	r2,117(sp)
    96b4:	d8001d85 	stb	zero,118(sp)
    96b8:	50c00104 	addi	r3,r10,4
    96bc:	54800017 	ldw	r18,0(r10)
    96c0:	0027883a 	mov	r19,zero
    96c4:	a0800094 	ori	r2,r20,2
    96c8:	48030b16 	blt	r9,zero,a2f8 <___vfiprintf_internal_r+0xff8>
    96cc:	00bfdfc4 	movi	r2,-129
    96d0:	a096703a 	and	r11,r20,r2
    96d4:	d8c02215 	stw	r3,136(sp)
    96d8:	5d000094 	ori	r20,r11,2
    96dc:	90032b1e 	bne	r18,zero,a38c <___vfiprintf_internal_r+0x108c>
    96e0:	00900034 	movhi	r2,16384
    96e4:	10803d04 	addi	r2,r2,244
    96e8:	d8802615 	stw	r2,152(sp)
    96ec:	0039883a 	mov	fp,zero
    96f0:	48017b1e 	bne	r9,zero,9ce0 <___vfiprintf_internal_r+0x9e0>
    96f4:	0013883a 	mov	r9,zero
    96f8:	0027883a 	mov	r19,zero
    96fc:	dd401a04 	addi	r21,sp,104
    9700:	4825883a 	mov	r18,r9
    9704:	4cc0010e 	bge	r9,r19,970c <___vfiprintf_internal_r+0x40c>
    9708:	9825883a 	mov	r18,r19
    970c:	e7003fcc 	andi	fp,fp,255
    9710:	e700201c 	xori	fp,fp,128
    9714:	e73fe004 	addi	fp,fp,-128
    9718:	e0000126 	beq	fp,zero,9720 <___vfiprintf_internal_r+0x420>
    971c:	94800044 	addi	r18,r18,1
    9720:	a380008c 	andi	r14,r20,2
    9724:	70000126 	beq	r14,zero,972c <___vfiprintf_internal_r+0x42c>
    9728:	94800084 	addi	r18,r18,2
    972c:	a700210c 	andi	fp,r20,132
    9730:	e001df1e 	bne	fp,zero,9eb0 <___vfiprintf_internal_r+0xbb0>
    9734:	8c87c83a 	sub	r3,r17,r18
    9738:	00c1dd0e 	bge	zero,r3,9eb0 <___vfiprintf_internal_r+0xbb0>
    973c:	01c00404 	movi	r7,16
    9740:	d8801c17 	ldw	r2,112(sp)
    9744:	38c3ad0e 	bge	r7,r3,a5fc <___vfiprintf_internal_r+0x12fc>
    9748:	02900034 	movhi	r10,16384
    974c:	5280a104 	addi	r10,r10,644
    9750:	dc002915 	stw	r16,164(sp)
    9754:	d9801b17 	ldw	r6,108(sp)
    9758:	da802415 	stw	r10,144(sp)
    975c:	03c001c4 	movi	r15,7
    9760:	da402515 	stw	r9,148(sp)
    9764:	db802815 	stw	r14,160(sp)
    9768:	1821883a 	mov	r16,r3
    976c:	00000506 	br	9784 <___vfiprintf_internal_r+0x484>
    9770:	31400084 	addi	r5,r6,2
    9774:	42000204 	addi	r8,r8,8
    9778:	200d883a 	mov	r6,r4
    977c:	843ffc04 	addi	r16,r16,-16
    9780:	3c000d0e 	bge	r7,r16,97b8 <___vfiprintf_internal_r+0x4b8>
    9784:	10800404 	addi	r2,r2,16
    9788:	31000044 	addi	r4,r6,1
    978c:	45800015 	stw	r22,0(r8)
    9790:	41c00115 	stw	r7,4(r8)
    9794:	d8801c15 	stw	r2,112(sp)
    9798:	d9001b15 	stw	r4,108(sp)
    979c:	793ff40e 	bge	r15,r4,9770 <__alt_data_end+0x80009770>
    97a0:	1001b51e 	bne	r2,zero,9e78 <___vfiprintf_internal_r+0xb78>
    97a4:	843ffc04 	addi	r16,r16,-16
    97a8:	000d883a 	mov	r6,zero
    97ac:	01400044 	movi	r5,1
    97b0:	d811883a 	mov	r8,sp
    97b4:	3c3ff316 	blt	r7,r16,9784 <__alt_data_end+0x80009784>
    97b8:	8007883a 	mov	r3,r16
    97bc:	da402517 	ldw	r9,148(sp)
    97c0:	db802817 	ldw	r14,160(sp)
    97c4:	dc002917 	ldw	r16,164(sp)
    97c8:	da802417 	ldw	r10,144(sp)
    97cc:	1885883a 	add	r2,r3,r2
    97d0:	40c00115 	stw	r3,4(r8)
    97d4:	42800015 	stw	r10,0(r8)
    97d8:	d8801c15 	stw	r2,112(sp)
    97dc:	d9401b15 	stw	r5,108(sp)
    97e0:	00c001c4 	movi	r3,7
    97e4:	19426016 	blt	r3,r5,a168 <___vfiprintf_internal_r+0xe68>
    97e8:	d8c01d87 	ldb	r3,118(sp)
    97ec:	42000204 	addi	r8,r8,8
    97f0:	29000044 	addi	r4,r5,1
    97f4:	1801b31e 	bne	r3,zero,9ec4 <___vfiprintf_internal_r+0xbc4>
    97f8:	7001c026 	beq	r14,zero,9efc <___vfiprintf_internal_r+0xbfc>
    97fc:	d8c01d04 	addi	r3,sp,116
    9800:	10800084 	addi	r2,r2,2
    9804:	40c00015 	stw	r3,0(r8)
    9808:	00c00084 	movi	r3,2
    980c:	40c00115 	stw	r3,4(r8)
    9810:	d8801c15 	stw	r2,112(sp)
    9814:	d9001b15 	stw	r4,108(sp)
    9818:	00c001c4 	movi	r3,7
    981c:	1902650e 	bge	r3,r4,a1b4 <___vfiprintf_internal_r+0xeb4>
    9820:	10029a1e 	bne	r2,zero,a28c <___vfiprintf_internal_r+0xf8c>
    9824:	00c02004 	movi	r3,128
    9828:	01000044 	movi	r4,1
    982c:	000b883a 	mov	r5,zero
    9830:	d811883a 	mov	r8,sp
    9834:	e0c1b31e 	bne	fp,r3,9f04 <___vfiprintf_internal_r+0xc04>
    9838:	8cb9c83a 	sub	fp,r17,r18
    983c:	0701b10e 	bge	zero,fp,9f04 <___vfiprintf_internal_r+0xc04>
    9840:	01c00404 	movi	r7,16
    9844:	3f03890e 	bge	r7,fp,a66c <___vfiprintf_internal_r+0x136c>
    9848:	00d00034 	movhi	r3,16384
    984c:	18c09d04 	addi	r3,r3,628
    9850:	d8c02415 	stw	r3,144(sp)
    9854:	8007883a 	mov	r3,r16
    9858:	034001c4 	movi	r13,7
    985c:	e021883a 	mov	r16,fp
    9860:	da402515 	stw	r9,148(sp)
    9864:	1839883a 	mov	fp,r3
    9868:	00000506 	br	9880 <___vfiprintf_internal_r+0x580>
    986c:	29800084 	addi	r6,r5,2
    9870:	42000204 	addi	r8,r8,8
    9874:	180b883a 	mov	r5,r3
    9878:	843ffc04 	addi	r16,r16,-16
    987c:	3c000d0e 	bge	r7,r16,98b4 <___vfiprintf_internal_r+0x5b4>
    9880:	10800404 	addi	r2,r2,16
    9884:	28c00044 	addi	r3,r5,1
    9888:	45c00015 	stw	r23,0(r8)
    988c:	41c00115 	stw	r7,4(r8)
    9890:	d8801c15 	stw	r2,112(sp)
    9894:	d8c01b15 	stw	r3,108(sp)
    9898:	68fff40e 	bge	r13,r3,986c <__alt_data_end+0x8000986c>
    989c:	1002241e 	bne	r2,zero,a130 <___vfiprintf_internal_r+0xe30>
    98a0:	843ffc04 	addi	r16,r16,-16
    98a4:	01800044 	movi	r6,1
    98a8:	000b883a 	mov	r5,zero
    98ac:	d811883a 	mov	r8,sp
    98b0:	3c3ff316 	blt	r7,r16,9880 <__alt_data_end+0x80009880>
    98b4:	da402517 	ldw	r9,148(sp)
    98b8:	e007883a 	mov	r3,fp
    98bc:	8039883a 	mov	fp,r16
    98c0:	1821883a 	mov	r16,r3
    98c4:	d8c02417 	ldw	r3,144(sp)
    98c8:	1705883a 	add	r2,r2,fp
    98cc:	47000115 	stw	fp,4(r8)
    98d0:	40c00015 	stw	r3,0(r8)
    98d4:	d8801c15 	stw	r2,112(sp)
    98d8:	d9801b15 	stw	r6,108(sp)
    98dc:	00c001c4 	movi	r3,7
    98e0:	19827616 	blt	r3,r6,a2bc <___vfiprintf_internal_r+0xfbc>
    98e4:	4cf9c83a 	sub	fp,r9,r19
    98e8:	42000204 	addi	r8,r8,8
    98ec:	31000044 	addi	r4,r6,1
    98f0:	300b883a 	mov	r5,r6
    98f4:	07018516 	blt	zero,fp,9f0c <___vfiprintf_internal_r+0xc0c>
    98f8:	9885883a 	add	r2,r19,r2
    98fc:	45400015 	stw	r21,0(r8)
    9900:	44c00115 	stw	r19,4(r8)
    9904:	d8801c15 	stw	r2,112(sp)
    9908:	d9001b15 	stw	r4,108(sp)
    990c:	00c001c4 	movi	r3,7
    9910:	1901dd0e 	bge	r3,r4,a088 <___vfiprintf_internal_r+0xd88>
    9914:	1002401e 	bne	r2,zero,a218 <___vfiprintf_internal_r+0xf18>
    9918:	d8001b15 	stw	zero,108(sp)
    991c:	a2c0010c 	andi	r11,r20,4
    9920:	58000226 	beq	r11,zero,992c <___vfiprintf_internal_r+0x62c>
    9924:	8ca7c83a 	sub	r19,r17,r18
    9928:	04c2f216 	blt	zero,r19,a4f4 <___vfiprintf_internal_r+0x11f4>
    992c:	8c80010e 	bge	r17,r18,9934 <___vfiprintf_internal_r+0x634>
    9930:	9023883a 	mov	r17,r18
    9934:	da802317 	ldw	r10,140(sp)
    9938:	5455883a 	add	r10,r10,r17
    993c:	da802315 	stw	r10,140(sp)
    9940:	d8001b15 	stw	zero,108(sp)
    9944:	d811883a 	mov	r8,sp
    9948:	003ea206 	br	93d4 <__alt_data_end+0x800093d4>
    994c:	a5000814 	ori	r20,r20,32
    9950:	80c00007 	ldb	r3,0(r16)
    9954:	003ec906 	br	947c <__alt_data_end+0x8000947c>
    9958:	80c00007 	ldb	r3,0(r16)
    995c:	1b030926 	beq	r3,r12,a584 <___vfiprintf_internal_r+0x1284>
    9960:	a5000414 	ori	r20,r20,16
    9964:	003ec506 	br	947c <__alt_data_end+0x8000947c>
    9968:	21003fcc 	andi	r4,r4,255
    996c:	20035e1e 	bne	r4,zero,a6e8 <___vfiprintf_internal_r+0x13e8>
    9970:	a080080c 	andi	r2,r20,32
    9974:	1002a526 	beq	r2,zero,a40c <___vfiprintf_internal_r+0x110c>
    9978:	da802217 	ldw	r10,136(sp)
    997c:	50800017 	ldw	r2,0(r10)
    9980:	da802317 	ldw	r10,140(sp)
    9984:	5007d7fa 	srai	r3,r10,31
    9988:	da802217 	ldw	r10,136(sp)
    998c:	10c00115 	stw	r3,4(r2)
    9990:	52800104 	addi	r10,r10,4
    9994:	da802215 	stw	r10,136(sp)
    9998:	da802317 	ldw	r10,140(sp)
    999c:	12800015 	stw	r10,0(r2)
    99a0:	003e8c06 	br	93d4 <__alt_data_end+0x800093d4>
    99a4:	21003fcc 	andi	r4,r4,255
    99a8:	2003511e 	bne	r4,zero,a6f0 <___vfiprintf_internal_r+0x13f0>
    99ac:	a080080c 	andi	r2,r20,32
    99b0:	1000a126 	beq	r2,zero,9c38 <___vfiprintf_internal_r+0x938>
    99b4:	da802217 	ldw	r10,136(sp)
    99b8:	d8001d85 	stb	zero,118(sp)
    99bc:	50800204 	addi	r2,r10,8
    99c0:	54800017 	ldw	r18,0(r10)
    99c4:	54c00117 	ldw	r19,4(r10)
    99c8:	4802b416 	blt	r9,zero,a49c <___vfiprintf_internal_r+0x119c>
    99cc:	013fdfc4 	movi	r4,-129
    99d0:	94c6b03a 	or	r3,r18,r19
    99d4:	d8802215 	stw	r2,136(sp)
    99d8:	a128703a 	and	r20,r20,r4
    99dc:	1800a226 	beq	r3,zero,9c68 <___vfiprintf_internal_r+0x968>
    99e0:	0039883a 	mov	fp,zero
    99e4:	dd401a04 	addi	r21,sp,104
    99e8:	9006d0fa 	srli	r3,r18,3
    99ec:	9808977a 	slli	r4,r19,29
    99f0:	9826d0fa 	srli	r19,r19,3
    99f4:	948001cc 	andi	r18,r18,7
    99f8:	90800c04 	addi	r2,r18,48
    99fc:	ad7fffc4 	addi	r21,r21,-1
    9a00:	20e4b03a 	or	r18,r4,r3
    9a04:	a8800005 	stb	r2,0(r21)
    9a08:	94c6b03a 	or	r3,r18,r19
    9a0c:	183ff61e 	bne	r3,zero,99e8 <__alt_data_end+0x800099e8>
    9a10:	a0c0004c 	andi	r3,r20,1
    9a14:	18005926 	beq	r3,zero,9b7c <___vfiprintf_internal_r+0x87c>
    9a18:	10803fcc 	andi	r2,r2,255
    9a1c:	1080201c 	xori	r2,r2,128
    9a20:	10bfe004 	addi	r2,r2,-128
    9a24:	00c00c04 	movi	r3,48
    9a28:	10c05426 	beq	r2,r3,9b7c <___vfiprintf_internal_r+0x87c>
    9a2c:	da801e17 	ldw	r10,120(sp)
    9a30:	a8bfffc4 	addi	r2,r21,-1
    9a34:	a8ffffc5 	stb	r3,-1(r21)
    9a38:	50a7c83a 	sub	r19,r10,r2
    9a3c:	102b883a 	mov	r21,r2
    9a40:	003f2f06 	br	9700 <__alt_data_end+0x80009700>
    9a44:	21003fcc 	andi	r4,r4,255
    9a48:	2003421e 	bne	r4,zero,a754 <___vfiprintf_internal_r+0x1454>
    9a4c:	00900034 	movhi	r2,16384
    9a50:	10803d04 	addi	r2,r2,244
    9a54:	d8802615 	stw	r2,152(sp)
    9a58:	a080080c 	andi	r2,r20,32
    9a5c:	1000aa26 	beq	r2,zero,9d08 <___vfiprintf_internal_r+0xa08>
    9a60:	da802217 	ldw	r10,136(sp)
    9a64:	54800017 	ldw	r18,0(r10)
    9a68:	54c00117 	ldw	r19,4(r10)
    9a6c:	52800204 	addi	r10,r10,8
    9a70:	da802215 	stw	r10,136(sp)
    9a74:	a080004c 	andi	r2,r20,1
    9a78:	1001d226 	beq	r2,zero,a1c4 <___vfiprintf_internal_r+0xec4>
    9a7c:	94c4b03a 	or	r2,r18,r19
    9a80:	1002351e 	bne	r2,zero,a358 <___vfiprintf_internal_r+0x1058>
    9a84:	d8001d85 	stb	zero,118(sp)
    9a88:	48022216 	blt	r9,zero,a314 <___vfiprintf_internal_r+0x1014>
    9a8c:	00bfdfc4 	movi	r2,-129
    9a90:	a0a8703a 	and	r20,r20,r2
    9a94:	003f1506 	br	96ec <__alt_data_end+0x800096ec>
    9a98:	da802217 	ldw	r10,136(sp)
    9a9c:	04800044 	movi	r18,1
    9aa0:	d8001d85 	stb	zero,118(sp)
    9aa4:	50800017 	ldw	r2,0(r10)
    9aa8:	52800104 	addi	r10,r10,4
    9aac:	da802215 	stw	r10,136(sp)
    9ab0:	d8801005 	stb	r2,64(sp)
    9ab4:	9027883a 	mov	r19,r18
    9ab8:	dd401004 	addi	r21,sp,64
    9abc:	0013883a 	mov	r9,zero
    9ac0:	003f1706 	br	9720 <__alt_data_end+0x80009720>
    9ac4:	21003fcc 	andi	r4,r4,255
    9ac8:	2003201e 	bne	r4,zero,a74c <___vfiprintf_internal_r+0x144c>
    9acc:	a080080c 	andi	r2,r20,32
    9ad0:	10004b26 	beq	r2,zero,9c00 <___vfiprintf_internal_r+0x900>
    9ad4:	da802217 	ldw	r10,136(sp)
    9ad8:	50800117 	ldw	r2,4(r10)
    9adc:	54800017 	ldw	r18,0(r10)
    9ae0:	52800204 	addi	r10,r10,8
    9ae4:	da802215 	stw	r10,136(sp)
    9ae8:	1027883a 	mov	r19,r2
    9aec:	10022c16 	blt	r2,zero,a3a0 <___vfiprintf_internal_r+0x10a0>
    9af0:	df001d83 	ldbu	fp,118(sp)
    9af4:	48007216 	blt	r9,zero,9cc0 <___vfiprintf_internal_r+0x9c0>
    9af8:	00ffdfc4 	movi	r3,-129
    9afc:	94c4b03a 	or	r2,r18,r19
    9b00:	a0e8703a 	and	r20,r20,r3
    9b04:	1000cc26 	beq	r2,zero,9e38 <___vfiprintf_internal_r+0xb38>
    9b08:	98021026 	beq	r19,zero,a34c <___vfiprintf_internal_r+0x104c>
    9b0c:	dc402415 	stw	r17,144(sp)
    9b10:	dc002515 	stw	r16,148(sp)
    9b14:	9823883a 	mov	r17,r19
    9b18:	9021883a 	mov	r16,r18
    9b1c:	dd401a04 	addi	r21,sp,104
    9b20:	4825883a 	mov	r18,r9
    9b24:	4027883a 	mov	r19,r8
    9b28:	8009883a 	mov	r4,r16
    9b2c:	880b883a 	mov	r5,r17
    9b30:	01800284 	movi	r6,10
    9b34:	000f883a 	mov	r7,zero
    9b38:	000b3640 	call	b364 <__umoddi3>
    9b3c:	10800c04 	addi	r2,r2,48
    9b40:	ad7fffc4 	addi	r21,r21,-1
    9b44:	8009883a 	mov	r4,r16
    9b48:	880b883a 	mov	r5,r17
    9b4c:	a8800005 	stb	r2,0(r21)
    9b50:	01800284 	movi	r6,10
    9b54:	000f883a 	mov	r7,zero
    9b58:	000adec0 	call	adec <__udivdi3>
    9b5c:	1021883a 	mov	r16,r2
    9b60:	10c4b03a 	or	r2,r2,r3
    9b64:	1823883a 	mov	r17,r3
    9b68:	103fef1e 	bne	r2,zero,9b28 <__alt_data_end+0x80009b28>
    9b6c:	dc402417 	ldw	r17,144(sp)
    9b70:	dc002517 	ldw	r16,148(sp)
    9b74:	9013883a 	mov	r9,r18
    9b78:	9811883a 	mov	r8,r19
    9b7c:	da801e17 	ldw	r10,120(sp)
    9b80:	5567c83a 	sub	r19,r10,r21
    9b84:	003ede06 	br	9700 <__alt_data_end+0x80009700>
    9b88:	38803fcc 	andi	r2,r7,255
    9b8c:	1080201c 	xori	r2,r2,128
    9b90:	10bfe004 	addi	r2,r2,-128
    9b94:	1002371e 	bne	r2,zero,a474 <___vfiprintf_internal_r+0x1174>
    9b98:	01000044 	movi	r4,1
    9b9c:	01c00804 	movi	r7,32
    9ba0:	80c00007 	ldb	r3,0(r16)
    9ba4:	003e3506 	br	947c <__alt_data_end+0x8000947c>
    9ba8:	a5000054 	ori	r20,r20,1
    9bac:	80c00007 	ldb	r3,0(r16)
    9bb0:	003e3206 	br	947c <__alt_data_end+0x8000947c>
    9bb4:	a5002014 	ori	r20,r20,128
    9bb8:	80c00007 	ldb	r3,0(r16)
    9bbc:	003e2f06 	br	947c <__alt_data_end+0x8000947c>
    9bc0:	8015883a 	mov	r10,r16
    9bc4:	0023883a 	mov	r17,zero
    9bc8:	18bff404 	addi	r2,r3,-48
    9bcc:	50c00007 	ldb	r3,0(r10)
    9bd0:	8c4002a4 	muli	r17,r17,10
    9bd4:	84000044 	addi	r16,r16,1
    9bd8:	8015883a 	mov	r10,r16
    9bdc:	1463883a 	add	r17,r2,r17
    9be0:	18bff404 	addi	r2,r3,-48
    9be4:	30bff92e 	bgeu	r6,r2,9bcc <__alt_data_end+0x80009bcc>
    9be8:	003e2506 	br	9480 <__alt_data_end+0x80009480>
    9bec:	21003fcc 	andi	r4,r4,255
    9bf0:	2002d41e 	bne	r4,zero,a744 <___vfiprintf_internal_r+0x1444>
    9bf4:	a5000414 	ori	r20,r20,16
    9bf8:	a080080c 	andi	r2,r20,32
    9bfc:	103fb51e 	bne	r2,zero,9ad4 <__alt_data_end+0x80009ad4>
    9c00:	a080040c 	andi	r2,r20,16
    9c04:	1001f826 	beq	r2,zero,a3e8 <___vfiprintf_internal_r+0x10e8>
    9c08:	da802217 	ldw	r10,136(sp)
    9c0c:	54800017 	ldw	r18,0(r10)
    9c10:	52800104 	addi	r10,r10,4
    9c14:	da802215 	stw	r10,136(sp)
    9c18:	9027d7fa 	srai	r19,r18,31
    9c1c:	9805883a 	mov	r2,r19
    9c20:	003fb206 	br	9aec <__alt_data_end+0x80009aec>
    9c24:	21003fcc 	andi	r4,r4,255
    9c28:	2002c41e 	bne	r4,zero,a73c <___vfiprintf_internal_r+0x143c>
    9c2c:	a5000414 	ori	r20,r20,16
    9c30:	a080080c 	andi	r2,r20,32
    9c34:	103f5f1e 	bne	r2,zero,99b4 <__alt_data_end+0x800099b4>
    9c38:	a080040c 	andi	r2,r20,16
    9c3c:	10020f26 	beq	r2,zero,a47c <___vfiprintf_internal_r+0x117c>
    9c40:	da802217 	ldw	r10,136(sp)
    9c44:	d8001d85 	stb	zero,118(sp)
    9c48:	0027883a 	mov	r19,zero
    9c4c:	50800104 	addi	r2,r10,4
    9c50:	54800017 	ldw	r18,0(r10)
    9c54:	48021116 	blt	r9,zero,a49c <___vfiprintf_internal_r+0x119c>
    9c58:	00ffdfc4 	movi	r3,-129
    9c5c:	d8802215 	stw	r2,136(sp)
    9c60:	a0e8703a 	and	r20,r20,r3
    9c64:	903f5e1e 	bne	r18,zero,99e0 <__alt_data_end+0x800099e0>
    9c68:	0039883a 	mov	fp,zero
    9c6c:	4802a626 	beq	r9,zero,a708 <___vfiprintf_internal_r+0x1408>
    9c70:	0025883a 	mov	r18,zero
    9c74:	0027883a 	mov	r19,zero
    9c78:	003f5a06 	br	99e4 <__alt_data_end+0x800099e4>
    9c7c:	21003fcc 	andi	r4,r4,255
    9c80:	20029f1e 	bne	r4,zero,a700 <___vfiprintf_internal_r+0x1400>
    9c84:	a5000414 	ori	r20,r20,16
    9c88:	a080080c 	andi	r2,r20,32
    9c8c:	10005e1e 	bne	r2,zero,9e08 <___vfiprintf_internal_r+0xb08>
    9c90:	a080040c 	andi	r2,r20,16
    9c94:	1001a21e 	bne	r2,zero,a320 <___vfiprintf_internal_r+0x1020>
    9c98:	a080100c 	andi	r2,r20,64
    9c9c:	d8001d85 	stb	zero,118(sp)
    9ca0:	da802217 	ldw	r10,136(sp)
    9ca4:	1002231e 	bne	r2,zero,a534 <___vfiprintf_internal_r+0x1234>
    9ca8:	50800104 	addi	r2,r10,4
    9cac:	54800017 	ldw	r18,0(r10)
    9cb0:	0027883a 	mov	r19,zero
    9cb4:	4801a00e 	bge	r9,zero,a338 <___vfiprintf_internal_r+0x1038>
    9cb8:	d8802215 	stw	r2,136(sp)
    9cbc:	0039883a 	mov	fp,zero
    9cc0:	94c4b03a 	or	r2,r18,r19
    9cc4:	103f901e 	bne	r2,zero,9b08 <__alt_data_end+0x80009b08>
    9cc8:	00800044 	movi	r2,1
    9ccc:	10803fcc 	andi	r2,r2,255
    9cd0:	00c00044 	movi	r3,1
    9cd4:	10c05926 	beq	r2,r3,9e3c <___vfiprintf_internal_r+0xb3c>
    9cd8:	00c00084 	movi	r3,2
    9cdc:	10ffe41e 	bne	r2,r3,9c70 <__alt_data_end+0x80009c70>
    9ce0:	0025883a 	mov	r18,zero
    9ce4:	0027883a 	mov	r19,zero
    9ce8:	00013d06 	br	a1e0 <___vfiprintf_internal_r+0xee0>
    9cec:	21003fcc 	andi	r4,r4,255
    9cf0:	2002811e 	bne	r4,zero,a6f8 <___vfiprintf_internal_r+0x13f8>
    9cf4:	00900034 	movhi	r2,16384
    9cf8:	10803804 	addi	r2,r2,224
    9cfc:	d8802615 	stw	r2,152(sp)
    9d00:	a080080c 	andi	r2,r20,32
    9d04:	103f561e 	bne	r2,zero,9a60 <__alt_data_end+0x80009a60>
    9d08:	a080040c 	andi	r2,r20,16
    9d0c:	1001d126 	beq	r2,zero,a454 <___vfiprintf_internal_r+0x1154>
    9d10:	da802217 	ldw	r10,136(sp)
    9d14:	0027883a 	mov	r19,zero
    9d18:	54800017 	ldw	r18,0(r10)
    9d1c:	52800104 	addi	r10,r10,4
    9d20:	da802215 	stw	r10,136(sp)
    9d24:	003f5306 	br	9a74 <__alt_data_end+0x80009a74>
    9d28:	da802217 	ldw	r10,136(sp)
    9d2c:	d8001d85 	stb	zero,118(sp)
    9d30:	55400017 	ldw	r21,0(r10)
    9d34:	50c00104 	addi	r3,r10,4
    9d38:	a8024226 	beq	r21,zero,a644 <___vfiprintf_internal_r+0x1344>
    9d3c:	48021816 	blt	r9,zero,a5a0 <___vfiprintf_internal_r+0x12a0>
    9d40:	480d883a 	mov	r6,r9
    9d44:	000b883a 	mov	r5,zero
    9d48:	a809883a 	mov	r4,r21
    9d4c:	d8c02a15 	stw	r3,168(sp)
    9d50:	da002b15 	stw	r8,172(sp)
    9d54:	da402c15 	stw	r9,176(sp)
    9d58:	00078300 	call	7830 <memchr>
    9d5c:	d8c02a17 	ldw	r3,168(sp)
    9d60:	da002b17 	ldw	r8,172(sp)
    9d64:	da402c17 	ldw	r9,176(sp)
    9d68:	10024826 	beq	r2,zero,a68c <___vfiprintf_internal_r+0x138c>
    9d6c:	1567c83a 	sub	r19,r2,r21
    9d70:	df001d83 	ldbu	fp,118(sp)
    9d74:	d8c02215 	stw	r3,136(sp)
    9d78:	0013883a 	mov	r9,zero
    9d7c:	003e6006 	br	9700 <__alt_data_end+0x80009700>
    9d80:	21003fcc 	andi	r4,r4,255
    9d84:	203fc026 	beq	r4,zero,9c88 <__alt_data_end+0x80009c88>
    9d88:	d9c01d85 	stb	r7,118(sp)
    9d8c:	003fbe06 	br	9c88 <__alt_data_end+0x80009c88>
    9d90:	da802217 	ldw	r10,136(sp)
    9d94:	54400017 	ldw	r17,0(r10)
    9d98:	50800104 	addi	r2,r10,4
    9d9c:	883e3b16 	blt	r17,zero,968c <__alt_data_end+0x8000968c>
    9da0:	d8802215 	stw	r2,136(sp)
    9da4:	80c00007 	ldb	r3,0(r16)
    9da8:	003db406 	br	947c <__alt_data_end+0x8000947c>
    9dac:	01000044 	movi	r4,1
    9db0:	01c00ac4 	movi	r7,43
    9db4:	80c00007 	ldb	r3,0(r16)
    9db8:	003db006 	br	947c <__alt_data_end+0x8000947c>
    9dbc:	80c00007 	ldb	r3,0(r16)
    9dc0:	82800044 	addi	r10,r16,1
    9dc4:	1b423c26 	beq	r3,r13,a6b8 <___vfiprintf_internal_r+0x13b8>
    9dc8:	18bff404 	addi	r2,r3,-48
    9dcc:	0013883a 	mov	r9,zero
    9dd0:	30822b36 	bltu	r6,r2,a680 <___vfiprintf_internal_r+0x1380>
    9dd4:	50c00007 	ldb	r3,0(r10)
    9dd8:	4a4002a4 	muli	r9,r9,10
    9ddc:	54000044 	addi	r16,r10,1
    9de0:	8015883a 	mov	r10,r16
    9de4:	4893883a 	add	r9,r9,r2
    9de8:	18bff404 	addi	r2,r3,-48
    9dec:	30bff92e 	bgeu	r6,r2,9dd4 <__alt_data_end+0x80009dd4>
    9df0:	483da30e 	bge	r9,zero,9480 <__alt_data_end+0x80009480>
    9df4:	027fffc4 	movi	r9,-1
    9df8:	003da106 	br	9480 <__alt_data_end+0x80009480>
    9dfc:	a5001014 	ori	r20,r20,64
    9e00:	80c00007 	ldb	r3,0(r16)
    9e04:	003d9d06 	br	947c <__alt_data_end+0x8000947c>
    9e08:	da802217 	ldw	r10,136(sp)
    9e0c:	d8001d85 	stb	zero,118(sp)
    9e10:	50c00204 	addi	r3,r10,8
    9e14:	54800017 	ldw	r18,0(r10)
    9e18:	54c00117 	ldw	r19,4(r10)
    9e1c:	4801ca16 	blt	r9,zero,a548 <___vfiprintf_internal_r+0x1248>
    9e20:	013fdfc4 	movi	r4,-129
    9e24:	94c4b03a 	or	r2,r18,r19
    9e28:	d8c02215 	stw	r3,136(sp)
    9e2c:	a128703a 	and	r20,r20,r4
    9e30:	0039883a 	mov	fp,zero
    9e34:	103f341e 	bne	r2,zero,9b08 <__alt_data_end+0x80009b08>
    9e38:	483e2e26 	beq	r9,zero,96f4 <__alt_data_end+0x800096f4>
    9e3c:	0025883a 	mov	r18,zero
    9e40:	94800c04 	addi	r18,r18,48
    9e44:	dc8019c5 	stb	r18,103(sp)
    9e48:	dcc02717 	ldw	r19,156(sp)
    9e4c:	dd4019c4 	addi	r21,sp,103
    9e50:	003e2b06 	br	9700 <__alt_data_end+0x80009700>
    9e54:	21003fcc 	andi	r4,r4,255
    9e58:	2002361e 	bne	r4,zero,a734 <___vfiprintf_internal_r+0x1434>
    9e5c:	1801c126 	beq	r3,zero,a564 <___vfiprintf_internal_r+0x1264>
    9e60:	04800044 	movi	r18,1
    9e64:	d8c01005 	stb	r3,64(sp)
    9e68:	d8001d85 	stb	zero,118(sp)
    9e6c:	9027883a 	mov	r19,r18
    9e70:	dd401004 	addi	r21,sp,64
    9e74:	003f1106 	br	9abc <__alt_data_end+0x80009abc>
    9e78:	d9402117 	ldw	r5,132(sp)
    9e7c:	d9002017 	ldw	r4,128(sp)
    9e80:	d9801a04 	addi	r6,sp,104
    9e84:	d9c02b15 	stw	r7,172(sp)
    9e88:	dbc02a15 	stw	r15,168(sp)
    9e8c:	00091ec0 	call	91ec <__sprint_r.part.0>
    9e90:	d9c02b17 	ldw	r7,172(sp)
    9e94:	dbc02a17 	ldw	r15,168(sp)
    9e98:	10006d1e 	bne	r2,zero,a050 <___vfiprintf_internal_r+0xd50>
    9e9c:	d9801b17 	ldw	r6,108(sp)
    9ea0:	d8801c17 	ldw	r2,112(sp)
    9ea4:	d811883a 	mov	r8,sp
    9ea8:	31400044 	addi	r5,r6,1
    9eac:	003e3306 	br	977c <__alt_data_end+0x8000977c>
    9eb0:	d9401b17 	ldw	r5,108(sp)
    9eb4:	d8801c17 	ldw	r2,112(sp)
    9eb8:	29000044 	addi	r4,r5,1
    9ebc:	d8c01d87 	ldb	r3,118(sp)
    9ec0:	183e4d26 	beq	r3,zero,97f8 <__alt_data_end+0x800097f8>
    9ec4:	00c00044 	movi	r3,1
    9ec8:	d9401d84 	addi	r5,sp,118
    9ecc:	10c5883a 	add	r2,r2,r3
    9ed0:	41400015 	stw	r5,0(r8)
    9ed4:	40c00115 	stw	r3,4(r8)
    9ed8:	d8801c15 	stw	r2,112(sp)
    9edc:	d9001b15 	stw	r4,108(sp)
    9ee0:	014001c4 	movi	r5,7
    9ee4:	2900a90e 	bge	r5,r4,a18c <___vfiprintf_internal_r+0xe8c>
    9ee8:	1000da1e 	bne	r2,zero,a254 <___vfiprintf_internal_r+0xf54>
    9eec:	7000ab1e 	bne	r14,zero,a19c <___vfiprintf_internal_r+0xe9c>
    9ef0:	000b883a 	mov	r5,zero
    9ef4:	1809883a 	mov	r4,r3
    9ef8:	d811883a 	mov	r8,sp
    9efc:	00c02004 	movi	r3,128
    9f00:	e0fe4d26 	beq	fp,r3,9838 <__alt_data_end+0x80009838>
    9f04:	4cf9c83a 	sub	fp,r9,r19
    9f08:	073e7b0e 	bge	zero,fp,98f8 <__alt_data_end+0x800098f8>
    9f0c:	01c00404 	movi	r7,16
    9f10:	3f01900e 	bge	r7,fp,a554 <___vfiprintf_internal_r+0x1254>
    9f14:	00d00034 	movhi	r3,16384
    9f18:	18c09d04 	addi	r3,r3,628
    9f1c:	d8c02415 	stw	r3,144(sp)
    9f20:	034001c4 	movi	r13,7
    9f24:	00000506 	br	9f3c <___vfiprintf_internal_r+0xc3c>
    9f28:	29000084 	addi	r4,r5,2
    9f2c:	42000204 	addi	r8,r8,8
    9f30:	180b883a 	mov	r5,r3
    9f34:	e73ffc04 	addi	fp,fp,-16
    9f38:	3f000d0e 	bge	r7,fp,9f70 <___vfiprintf_internal_r+0xc70>
    9f3c:	10800404 	addi	r2,r2,16
    9f40:	28c00044 	addi	r3,r5,1
    9f44:	45c00015 	stw	r23,0(r8)
    9f48:	41c00115 	stw	r7,4(r8)
    9f4c:	d8801c15 	stw	r2,112(sp)
    9f50:	d8c01b15 	stw	r3,108(sp)
    9f54:	68fff40e 	bge	r13,r3,9f28 <__alt_data_end+0x80009f28>
    9f58:	1000101e 	bne	r2,zero,9f9c <___vfiprintf_internal_r+0xc9c>
    9f5c:	e73ffc04 	addi	fp,fp,-16
    9f60:	01000044 	movi	r4,1
    9f64:	000b883a 	mov	r5,zero
    9f68:	d811883a 	mov	r8,sp
    9f6c:	3f3ff316 	blt	r7,fp,9f3c <__alt_data_end+0x80009f3c>
    9f70:	da802417 	ldw	r10,144(sp)
    9f74:	1705883a 	add	r2,r2,fp
    9f78:	47000115 	stw	fp,4(r8)
    9f7c:	42800015 	stw	r10,0(r8)
    9f80:	d8801c15 	stw	r2,112(sp)
    9f84:	d9001b15 	stw	r4,108(sp)
    9f88:	00c001c4 	movi	r3,7
    9f8c:	19003616 	blt	r3,r4,a068 <___vfiprintf_internal_r+0xd68>
    9f90:	42000204 	addi	r8,r8,8
    9f94:	21000044 	addi	r4,r4,1
    9f98:	003e5706 	br	98f8 <__alt_data_end+0x800098f8>
    9f9c:	d9402117 	ldw	r5,132(sp)
    9fa0:	d9002017 	ldw	r4,128(sp)
    9fa4:	d9801a04 	addi	r6,sp,104
    9fa8:	d9c02b15 	stw	r7,172(sp)
    9fac:	db402a15 	stw	r13,168(sp)
    9fb0:	00091ec0 	call	91ec <__sprint_r.part.0>
    9fb4:	d9c02b17 	ldw	r7,172(sp)
    9fb8:	db402a17 	ldw	r13,168(sp)
    9fbc:	1000241e 	bne	r2,zero,a050 <___vfiprintf_internal_r+0xd50>
    9fc0:	d9401b17 	ldw	r5,108(sp)
    9fc4:	d8801c17 	ldw	r2,112(sp)
    9fc8:	d811883a 	mov	r8,sp
    9fcc:	29000044 	addi	r4,r5,1
    9fd0:	003fd806 	br	9f34 <__alt_data_end+0x80009f34>
    9fd4:	d9401b17 	ldw	r5,108(sp)
    9fd8:	00d00034 	movhi	r3,16384
    9fdc:	18c0a104 	addi	r3,r3,644
    9fe0:	d8c02415 	stw	r3,144(sp)
    9fe4:	29400044 	addi	r5,r5,1
    9fe8:	d8c02417 	ldw	r3,144(sp)
    9fec:	14c5883a 	add	r2,r2,r19
    9ff0:	44c00115 	stw	r19,4(r8)
    9ff4:	40c00015 	stw	r3,0(r8)
    9ff8:	d8801c15 	stw	r2,112(sp)
    9ffc:	d9401b15 	stw	r5,108(sp)
    a000:	00c001c4 	movi	r3,7
    a004:	1940070e 	bge	r3,r5,a024 <___vfiprintf_internal_r+0xd24>
    a008:	103e4826 	beq	r2,zero,992c <__alt_data_end+0x8000992c>
    a00c:	d9402117 	ldw	r5,132(sp)
    a010:	d9002017 	ldw	r4,128(sp)
    a014:	d9801a04 	addi	r6,sp,104
    a018:	00091ec0 	call	91ec <__sprint_r.part.0>
    a01c:	10000c1e 	bne	r2,zero,a050 <___vfiprintf_internal_r+0xd50>
    a020:	d8801c17 	ldw	r2,112(sp)
    a024:	8c80010e 	bge	r17,r18,a02c <___vfiprintf_internal_r+0xd2c>
    a028:	9023883a 	mov	r17,r18
    a02c:	da802317 	ldw	r10,140(sp)
    a030:	5455883a 	add	r10,r10,r17
    a034:	da802315 	stw	r10,140(sp)
    a038:	103e4126 	beq	r2,zero,9940 <__alt_data_end+0x80009940>
    a03c:	d9402117 	ldw	r5,132(sp)
    a040:	d9002017 	ldw	r4,128(sp)
    a044:	d9801a04 	addi	r6,sp,104
    a048:	00091ec0 	call	91ec <__sprint_r.part.0>
    a04c:	103e3c26 	beq	r2,zero,9940 <__alt_data_end+0x80009940>
    a050:	dd002117 	ldw	r20,132(sp)
    a054:	a080030b 	ldhu	r2,12(r20)
    a058:	1080100c 	andi	r2,r2,64
    a05c:	1001231e 	bne	r2,zero,a4ec <___vfiprintf_internal_r+0x11ec>
    a060:	d8802317 	ldw	r2,140(sp)
    a064:	003d7b06 	br	9654 <__alt_data_end+0x80009654>
    a068:	1000991e 	bne	r2,zero,a2d0 <___vfiprintf_internal_r+0xfd0>
    a06c:	00c00044 	movi	r3,1
    a070:	9805883a 	mov	r2,r19
    a074:	dd400015 	stw	r21,0(sp)
    a078:	dcc00115 	stw	r19,4(sp)
    a07c:	dcc01c15 	stw	r19,112(sp)
    a080:	d8c01b15 	stw	r3,108(sp)
    a084:	d811883a 	mov	r8,sp
    a088:	42000204 	addi	r8,r8,8
    a08c:	a2c0010c 	andi	r11,r20,4
    a090:	583fe426 	beq	r11,zero,a024 <__alt_data_end+0x8000a024>
    a094:	8ca7c83a 	sub	r19,r17,r18
    a098:	04ffe20e 	bge	zero,r19,a024 <__alt_data_end+0x8000a024>
    a09c:	01c00404 	movi	r7,16
    a0a0:	3cffcc0e 	bge	r7,r19,9fd4 <__alt_data_end+0x80009fd4>
    a0a4:	02900034 	movhi	r10,16384
    a0a8:	5280a104 	addi	r10,r10,644
    a0ac:	d9001b17 	ldw	r4,108(sp)
    a0b0:	da802415 	stw	r10,144(sp)
    a0b4:	382b883a 	mov	r21,r7
    a0b8:	050001c4 	movi	r20,7
    a0bc:	df002017 	ldw	fp,128(sp)
    a0c0:	00000506 	br	a0d8 <___vfiprintf_internal_r+0xdd8>
    a0c4:	21400084 	addi	r5,r4,2
    a0c8:	42000204 	addi	r8,r8,8
    a0cc:	1809883a 	mov	r4,r3
    a0d0:	9cfffc04 	addi	r19,r19,-16
    a0d4:	acffc40e 	bge	r21,r19,9fe8 <__alt_data_end+0x80009fe8>
    a0d8:	10800404 	addi	r2,r2,16
    a0dc:	20c00044 	addi	r3,r4,1
    a0e0:	45800015 	stw	r22,0(r8)
    a0e4:	45400115 	stw	r21,4(r8)
    a0e8:	d8801c15 	stw	r2,112(sp)
    a0ec:	d8c01b15 	stw	r3,108(sp)
    a0f0:	a0fff40e 	bge	r20,r3,a0c4 <__alt_data_end+0x8000a0c4>
    a0f4:	1000041e 	bne	r2,zero,a108 <___vfiprintf_internal_r+0xe08>
    a0f8:	01400044 	movi	r5,1
    a0fc:	0009883a 	mov	r4,zero
    a100:	d811883a 	mov	r8,sp
    a104:	003ff206 	br	a0d0 <__alt_data_end+0x8000a0d0>
    a108:	d9402117 	ldw	r5,132(sp)
    a10c:	d9801a04 	addi	r6,sp,104
    a110:	e009883a 	mov	r4,fp
    a114:	00091ec0 	call	91ec <__sprint_r.part.0>
    a118:	103fcd1e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a11c:	d9001b17 	ldw	r4,108(sp)
    a120:	d8801c17 	ldw	r2,112(sp)
    a124:	d811883a 	mov	r8,sp
    a128:	21400044 	addi	r5,r4,1
    a12c:	003fe806 	br	a0d0 <__alt_data_end+0x8000a0d0>
    a130:	d9402117 	ldw	r5,132(sp)
    a134:	d9002017 	ldw	r4,128(sp)
    a138:	d9801a04 	addi	r6,sp,104
    a13c:	d9c02b15 	stw	r7,172(sp)
    a140:	db402a15 	stw	r13,168(sp)
    a144:	00091ec0 	call	91ec <__sprint_r.part.0>
    a148:	d9c02b17 	ldw	r7,172(sp)
    a14c:	db402a17 	ldw	r13,168(sp)
    a150:	103fbf1e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a154:	d9401b17 	ldw	r5,108(sp)
    a158:	d8801c17 	ldw	r2,112(sp)
    a15c:	d811883a 	mov	r8,sp
    a160:	29800044 	addi	r6,r5,1
    a164:	003dc406 	br	9878 <__alt_data_end+0x80009878>
    a168:	1000d21e 	bne	r2,zero,a4b4 <___vfiprintf_internal_r+0x11b4>
    a16c:	d8c01d87 	ldb	r3,118(sp)
    a170:	18009526 	beq	r3,zero,a3c8 <___vfiprintf_internal_r+0x10c8>
    a174:	00800044 	movi	r2,1
    a178:	d8c01d84 	addi	r3,sp,118
    a17c:	1009883a 	mov	r4,r2
    a180:	d8c00015 	stw	r3,0(sp)
    a184:	d8800115 	stw	r2,4(sp)
    a188:	d811883a 	mov	r8,sp
    a18c:	200b883a 	mov	r5,r4
    a190:	42000204 	addi	r8,r8,8
    a194:	21000044 	addi	r4,r4,1
    a198:	003d9706 	br	97f8 <__alt_data_end+0x800097f8>
    a19c:	d9001d04 	addi	r4,sp,116
    a1a0:	00800084 	movi	r2,2
    a1a4:	d9000015 	stw	r4,0(sp)
    a1a8:	d8800115 	stw	r2,4(sp)
    a1ac:	1809883a 	mov	r4,r3
    a1b0:	d811883a 	mov	r8,sp
    a1b4:	200b883a 	mov	r5,r4
    a1b8:	42000204 	addi	r8,r8,8
    a1bc:	21000044 	addi	r4,r4,1
    a1c0:	003f4e06 	br	9efc <__alt_data_end+0x80009efc>
    a1c4:	d8001d85 	stb	zero,118(sp)
    a1c8:	48005016 	blt	r9,zero,a30c <___vfiprintf_internal_r+0x100c>
    a1cc:	00ffdfc4 	movi	r3,-129
    a1d0:	94c4b03a 	or	r2,r18,r19
    a1d4:	a0e8703a 	and	r20,r20,r3
    a1d8:	103d4426 	beq	r2,zero,96ec <__alt_data_end+0x800096ec>
    a1dc:	0039883a 	mov	fp,zero
    a1e0:	d9002617 	ldw	r4,152(sp)
    a1e4:	dd401a04 	addi	r21,sp,104
    a1e8:	908003cc 	andi	r2,r18,15
    a1ec:	9806973a 	slli	r3,r19,28
    a1f0:	2085883a 	add	r2,r4,r2
    a1f4:	9024d13a 	srli	r18,r18,4
    a1f8:	10800003 	ldbu	r2,0(r2)
    a1fc:	9826d13a 	srli	r19,r19,4
    a200:	ad7fffc4 	addi	r21,r21,-1
    a204:	1ca4b03a 	or	r18,r3,r18
    a208:	a8800005 	stb	r2,0(r21)
    a20c:	94c4b03a 	or	r2,r18,r19
    a210:	103ff51e 	bne	r2,zero,a1e8 <__alt_data_end+0x8000a1e8>
    a214:	003e5906 	br	9b7c <__alt_data_end+0x80009b7c>
    a218:	d9402117 	ldw	r5,132(sp)
    a21c:	d9002017 	ldw	r4,128(sp)
    a220:	d9801a04 	addi	r6,sp,104
    a224:	00091ec0 	call	91ec <__sprint_r.part.0>
    a228:	103f891e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a22c:	d8801c17 	ldw	r2,112(sp)
    a230:	d811883a 	mov	r8,sp
    a234:	003f9506 	br	a08c <__alt_data_end+0x8000a08c>
    a238:	d9402117 	ldw	r5,132(sp)
    a23c:	d9002017 	ldw	r4,128(sp)
    a240:	d9801a04 	addi	r6,sp,104
    a244:	00091ec0 	call	91ec <__sprint_r.part.0>
    a248:	103f811e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a24c:	d811883a 	mov	r8,sp
    a250:	003ced06 	br	9608 <__alt_data_end+0x80009608>
    a254:	d9402117 	ldw	r5,132(sp)
    a258:	d9002017 	ldw	r4,128(sp)
    a25c:	d9801a04 	addi	r6,sp,104
    a260:	da402c15 	stw	r9,176(sp)
    a264:	db802a15 	stw	r14,168(sp)
    a268:	00091ec0 	call	91ec <__sprint_r.part.0>
    a26c:	da402c17 	ldw	r9,176(sp)
    a270:	db802a17 	ldw	r14,168(sp)
    a274:	103f761e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a278:	d9401b17 	ldw	r5,108(sp)
    a27c:	d8801c17 	ldw	r2,112(sp)
    a280:	d811883a 	mov	r8,sp
    a284:	29000044 	addi	r4,r5,1
    a288:	003d5b06 	br	97f8 <__alt_data_end+0x800097f8>
    a28c:	d9402117 	ldw	r5,132(sp)
    a290:	d9002017 	ldw	r4,128(sp)
    a294:	d9801a04 	addi	r6,sp,104
    a298:	da402c15 	stw	r9,176(sp)
    a29c:	00091ec0 	call	91ec <__sprint_r.part.0>
    a2a0:	da402c17 	ldw	r9,176(sp)
    a2a4:	103f6a1e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a2a8:	d9401b17 	ldw	r5,108(sp)
    a2ac:	d8801c17 	ldw	r2,112(sp)
    a2b0:	d811883a 	mov	r8,sp
    a2b4:	29000044 	addi	r4,r5,1
    a2b8:	003f1006 	br	9efc <__alt_data_end+0x80009efc>
    a2bc:	1000c31e 	bne	r2,zero,a5cc <___vfiprintf_internal_r+0x12cc>
    a2c0:	01000044 	movi	r4,1
    a2c4:	000b883a 	mov	r5,zero
    a2c8:	d811883a 	mov	r8,sp
    a2cc:	003f0d06 	br	9f04 <__alt_data_end+0x80009f04>
    a2d0:	d9402117 	ldw	r5,132(sp)
    a2d4:	d9002017 	ldw	r4,128(sp)
    a2d8:	d9801a04 	addi	r6,sp,104
    a2dc:	00091ec0 	call	91ec <__sprint_r.part.0>
    a2e0:	103f5b1e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a2e4:	d9001b17 	ldw	r4,108(sp)
    a2e8:	d8801c17 	ldw	r2,112(sp)
    a2ec:	d811883a 	mov	r8,sp
    a2f0:	21000044 	addi	r4,r4,1
    a2f4:	003d8006 	br	98f8 <__alt_data_end+0x800098f8>
    a2f8:	01100034 	movhi	r4,16384
    a2fc:	21003d04 	addi	r4,r4,244
    a300:	d9002615 	stw	r4,152(sp)
    a304:	d8c02215 	stw	r3,136(sp)
    a308:	1029883a 	mov	r20,r2
    a30c:	94c4b03a 	or	r2,r18,r19
    a310:	103fb21e 	bne	r2,zero,a1dc <__alt_data_end+0x8000a1dc>
    a314:	0039883a 	mov	fp,zero
    a318:	00800084 	movi	r2,2
    a31c:	003e6b06 	br	9ccc <__alt_data_end+0x80009ccc>
    a320:	da802217 	ldw	r10,136(sp)
    a324:	d8001d85 	stb	zero,118(sp)
    a328:	0027883a 	mov	r19,zero
    a32c:	50800104 	addi	r2,r10,4
    a330:	54800017 	ldw	r18,0(r10)
    a334:	483e6016 	blt	r9,zero,9cb8 <__alt_data_end+0x80009cb8>
    a338:	00ffdfc4 	movi	r3,-129
    a33c:	d8802215 	stw	r2,136(sp)
    a340:	a0e8703a 	and	r20,r20,r3
    a344:	0039883a 	mov	fp,zero
    a348:	903ebb26 	beq	r18,zero,9e38 <__alt_data_end+0x80009e38>
    a34c:	00800244 	movi	r2,9
    a350:	14bdee36 	bltu	r2,r18,9b0c <__alt_data_end+0x80009b0c>
    a354:	003eba06 	br	9e40 <__alt_data_end+0x80009e40>
    a358:	00800c04 	movi	r2,48
    a35c:	d8c01d45 	stb	r3,117(sp)
    a360:	d8801d05 	stb	r2,116(sp)
    a364:	d8001d85 	stb	zero,118(sp)
    a368:	a0c00094 	ori	r3,r20,2
    a36c:	4800a916 	blt	r9,zero,a614 <___vfiprintf_internal_r+0x1314>
    a370:	00bfdfc4 	movi	r2,-129
    a374:	a096703a 	and	r11,r20,r2
    a378:	5d000094 	ori	r20,r11,2
    a37c:	0039883a 	mov	fp,zero
    a380:	003f9706 	br	a1e0 <__alt_data_end+0x8000a1e0>
    a384:	8025883a 	mov	r18,r16
    a388:	003c2e06 	br	9444 <__alt_data_end+0x80009444>
    a38c:	00900034 	movhi	r2,16384
    a390:	10803d04 	addi	r2,r2,244
    a394:	0039883a 	mov	fp,zero
    a398:	d8802615 	stw	r2,152(sp)
    a39c:	003f9006 	br	a1e0 <__alt_data_end+0x8000a1e0>
    a3a0:	04a5c83a 	sub	r18,zero,r18
    a3a4:	07000b44 	movi	fp,45
    a3a8:	9004c03a 	cmpne	r2,r18,zero
    a3ac:	04e7c83a 	sub	r19,zero,r19
    a3b0:	df001d85 	stb	fp,118(sp)
    a3b4:	98a7c83a 	sub	r19,r19,r2
    a3b8:	48009f16 	blt	r9,zero,a638 <___vfiprintf_internal_r+0x1338>
    a3bc:	00bfdfc4 	movi	r2,-129
    a3c0:	a0a8703a 	and	r20,r20,r2
    a3c4:	003dd006 	br	9b08 <__alt_data_end+0x80009b08>
    a3c8:	70004c26 	beq	r14,zero,a4fc <___vfiprintf_internal_r+0x11fc>
    a3cc:	00800084 	movi	r2,2
    a3d0:	d8c01d04 	addi	r3,sp,116
    a3d4:	d8c00015 	stw	r3,0(sp)
    a3d8:	d8800115 	stw	r2,4(sp)
    a3dc:	01000044 	movi	r4,1
    a3e0:	d811883a 	mov	r8,sp
    a3e4:	003f7306 	br	a1b4 <__alt_data_end+0x8000a1b4>
    a3e8:	a080100c 	andi	r2,r20,64
    a3ec:	da802217 	ldw	r10,136(sp)
    a3f0:	103e0626 	beq	r2,zero,9c0c <__alt_data_end+0x80009c0c>
    a3f4:	5480000f 	ldh	r18,0(r10)
    a3f8:	52800104 	addi	r10,r10,4
    a3fc:	da802215 	stw	r10,136(sp)
    a400:	9027d7fa 	srai	r19,r18,31
    a404:	9805883a 	mov	r2,r19
    a408:	003db806 	br	9aec <__alt_data_end+0x80009aec>
    a40c:	a080040c 	andi	r2,r20,16
    a410:	1000091e 	bne	r2,zero,a438 <___vfiprintf_internal_r+0x1138>
    a414:	a2c0100c 	andi	r11,r20,64
    a418:	58000726 	beq	r11,zero,a438 <___vfiprintf_internal_r+0x1138>
    a41c:	da802217 	ldw	r10,136(sp)
    a420:	50800017 	ldw	r2,0(r10)
    a424:	52800104 	addi	r10,r10,4
    a428:	da802215 	stw	r10,136(sp)
    a42c:	da802317 	ldw	r10,140(sp)
    a430:	1280000d 	sth	r10,0(r2)
    a434:	003be706 	br	93d4 <__alt_data_end+0x800093d4>
    a438:	da802217 	ldw	r10,136(sp)
    a43c:	50800017 	ldw	r2,0(r10)
    a440:	52800104 	addi	r10,r10,4
    a444:	da802215 	stw	r10,136(sp)
    a448:	da802317 	ldw	r10,140(sp)
    a44c:	12800015 	stw	r10,0(r2)
    a450:	003be006 	br	93d4 <__alt_data_end+0x800093d4>
    a454:	a080100c 	andi	r2,r20,64
    a458:	da802217 	ldw	r10,136(sp)
    a45c:	10003026 	beq	r2,zero,a520 <___vfiprintf_internal_r+0x1220>
    a460:	5480000b 	ldhu	r18,0(r10)
    a464:	52800104 	addi	r10,r10,4
    a468:	0027883a 	mov	r19,zero
    a46c:	da802215 	stw	r10,136(sp)
    a470:	003d8006 	br	9a74 <__alt_data_end+0x80009a74>
    a474:	80c00007 	ldb	r3,0(r16)
    a478:	003c0006 	br	947c <__alt_data_end+0x8000947c>
    a47c:	a080100c 	andi	r2,r20,64
    a480:	d8001d85 	stb	zero,118(sp)
    a484:	da802217 	ldw	r10,136(sp)
    a488:	1000201e 	bne	r2,zero,a50c <___vfiprintf_internal_r+0x120c>
    a48c:	50800104 	addi	r2,r10,4
    a490:	54800017 	ldw	r18,0(r10)
    a494:	0027883a 	mov	r19,zero
    a498:	483def0e 	bge	r9,zero,9c58 <__alt_data_end+0x80009c58>
    a49c:	94c6b03a 	or	r3,r18,r19
    a4a0:	d8802215 	stw	r2,136(sp)
    a4a4:	183d4e1e 	bne	r3,zero,99e0 <__alt_data_end+0x800099e0>
    a4a8:	0039883a 	mov	fp,zero
    a4ac:	0005883a 	mov	r2,zero
    a4b0:	003e0606 	br	9ccc <__alt_data_end+0x80009ccc>
    a4b4:	d9402117 	ldw	r5,132(sp)
    a4b8:	d9002017 	ldw	r4,128(sp)
    a4bc:	d9801a04 	addi	r6,sp,104
    a4c0:	da402c15 	stw	r9,176(sp)
    a4c4:	db802a15 	stw	r14,168(sp)
    a4c8:	00091ec0 	call	91ec <__sprint_r.part.0>
    a4cc:	da402c17 	ldw	r9,176(sp)
    a4d0:	db802a17 	ldw	r14,168(sp)
    a4d4:	103ede1e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a4d8:	d9401b17 	ldw	r5,108(sp)
    a4dc:	d8801c17 	ldw	r2,112(sp)
    a4e0:	d811883a 	mov	r8,sp
    a4e4:	29000044 	addi	r4,r5,1
    a4e8:	003e7406 	br	9ebc <__alt_data_end+0x80009ebc>
    a4ec:	00bfffc4 	movi	r2,-1
    a4f0:	003c5806 	br	9654 <__alt_data_end+0x80009654>
    a4f4:	d811883a 	mov	r8,sp
    a4f8:	003ee806 	br	a09c <__alt_data_end+0x8000a09c>
    a4fc:	000b883a 	mov	r5,zero
    a500:	01000044 	movi	r4,1
    a504:	d811883a 	mov	r8,sp
    a508:	003e7c06 	br	9efc <__alt_data_end+0x80009efc>
    a50c:	50800104 	addi	r2,r10,4
    a510:	5480000b 	ldhu	r18,0(r10)
    a514:	0027883a 	mov	r19,zero
    a518:	483dcf0e 	bge	r9,zero,9c58 <__alt_data_end+0x80009c58>
    a51c:	003fdf06 	br	a49c <__alt_data_end+0x8000a49c>
    a520:	54800017 	ldw	r18,0(r10)
    a524:	52800104 	addi	r10,r10,4
    a528:	0027883a 	mov	r19,zero
    a52c:	da802215 	stw	r10,136(sp)
    a530:	003d5006 	br	9a74 <__alt_data_end+0x80009a74>
    a534:	50800104 	addi	r2,r10,4
    a538:	5480000b 	ldhu	r18,0(r10)
    a53c:	0027883a 	mov	r19,zero
    a540:	483f7d0e 	bge	r9,zero,a338 <__alt_data_end+0x8000a338>
    a544:	003ddc06 	br	9cb8 <__alt_data_end+0x80009cb8>
    a548:	d8c02215 	stw	r3,136(sp)
    a54c:	0039883a 	mov	fp,zero
    a550:	003ddb06 	br	9cc0 <__alt_data_end+0x80009cc0>
    a554:	02900034 	movhi	r10,16384
    a558:	52809d04 	addi	r10,r10,628
    a55c:	da802415 	stw	r10,144(sp)
    a560:	003e8306 	br	9f70 <__alt_data_end+0x80009f70>
    a564:	d8801c17 	ldw	r2,112(sp)
    a568:	dd002117 	ldw	r20,132(sp)
    a56c:	103eb926 	beq	r2,zero,a054 <__alt_data_end+0x8000a054>
    a570:	d9002017 	ldw	r4,128(sp)
    a574:	d9801a04 	addi	r6,sp,104
    a578:	a00b883a 	mov	r5,r20
    a57c:	00091ec0 	call	91ec <__sprint_r.part.0>
    a580:	003eb406 	br	a054 <__alt_data_end+0x8000a054>
    a584:	80c00043 	ldbu	r3,1(r16)
    a588:	a5000814 	ori	r20,r20,32
    a58c:	84000044 	addi	r16,r16,1
    a590:	18c03fcc 	andi	r3,r3,255
    a594:	18c0201c 	xori	r3,r3,128
    a598:	18ffe004 	addi	r3,r3,-128
    a59c:	003bb706 	br	947c <__alt_data_end+0x8000947c>
    a5a0:	a809883a 	mov	r4,r21
    a5a4:	d8c02a15 	stw	r3,168(sp)
    a5a8:	da002b15 	stw	r8,172(sp)
    a5ac:	00025e00 	call	25e0 <strlen>
    a5b0:	d8c02a17 	ldw	r3,168(sp)
    a5b4:	1027883a 	mov	r19,r2
    a5b8:	df001d83 	ldbu	fp,118(sp)
    a5bc:	d8c02215 	stw	r3,136(sp)
    a5c0:	0013883a 	mov	r9,zero
    a5c4:	da002b17 	ldw	r8,172(sp)
    a5c8:	003c4d06 	br	9700 <__alt_data_end+0x80009700>
    a5cc:	d9402117 	ldw	r5,132(sp)
    a5d0:	d9002017 	ldw	r4,128(sp)
    a5d4:	d9801a04 	addi	r6,sp,104
    a5d8:	da402c15 	stw	r9,176(sp)
    a5dc:	00091ec0 	call	91ec <__sprint_r.part.0>
    a5e0:	da402c17 	ldw	r9,176(sp)
    a5e4:	103e9a1e 	bne	r2,zero,a050 <__alt_data_end+0x8000a050>
    a5e8:	d9401b17 	ldw	r5,108(sp)
    a5ec:	d8801c17 	ldw	r2,112(sp)
    a5f0:	d811883a 	mov	r8,sp
    a5f4:	29000044 	addi	r4,r5,1
    a5f8:	003e4206 	br	9f04 <__alt_data_end+0x80009f04>
    a5fc:	d9401b17 	ldw	r5,108(sp)
    a600:	01100034 	movhi	r4,16384
    a604:	2100a104 	addi	r4,r4,644
    a608:	d9002415 	stw	r4,144(sp)
    a60c:	29400044 	addi	r5,r5,1
    a610:	003c6d06 	br	97c8 <__alt_data_end+0x800097c8>
    a614:	0039883a 	mov	fp,zero
    a618:	00800084 	movi	r2,2
    a61c:	10803fcc 	andi	r2,r2,255
    a620:	01000044 	movi	r4,1
    a624:	11001e26 	beq	r2,r4,a6a0 <___vfiprintf_internal_r+0x13a0>
    a628:	01000084 	movi	r4,2
    a62c:	11001e1e 	bne	r2,r4,a6a8 <___vfiprintf_internal_r+0x13a8>
    a630:	1829883a 	mov	r20,r3
    a634:	003eea06 	br	a1e0 <__alt_data_end+0x8000a1e0>
    a638:	a007883a 	mov	r3,r20
    a63c:	00800044 	movi	r2,1
    a640:	003ff606 	br	a61c <__alt_data_end+0x8000a61c>
    a644:	00800184 	movi	r2,6
    a648:	1240012e 	bgeu	r2,r9,a650 <___vfiprintf_internal_r+0x1350>
    a64c:	1013883a 	mov	r9,r2
    a650:	4827883a 	mov	r19,r9
    a654:	4825883a 	mov	r18,r9
    a658:	48001516 	blt	r9,zero,a6b0 <___vfiprintf_internal_r+0x13b0>
    a65c:	05500034 	movhi	r21,16384
    a660:	d8c02215 	stw	r3,136(sp)
    a664:	ad404204 	addi	r21,r21,264
    a668:	003d1406 	br	9abc <__alt_data_end+0x80009abc>
    a66c:	02900034 	movhi	r10,16384
    a670:	52809d04 	addi	r10,r10,628
    a674:	da802415 	stw	r10,144(sp)
    a678:	200d883a 	mov	r6,r4
    a67c:	003c9106 	br	98c4 <__alt_data_end+0x800098c4>
    a680:	5021883a 	mov	r16,r10
    a684:	0013883a 	mov	r9,zero
    a688:	003b7d06 	br	9480 <__alt_data_end+0x80009480>
    a68c:	4827883a 	mov	r19,r9
    a690:	df001d83 	ldbu	fp,118(sp)
    a694:	d8c02215 	stw	r3,136(sp)
    a698:	0013883a 	mov	r9,zero
    a69c:	003c1806 	br	9700 <__alt_data_end+0x80009700>
    a6a0:	1829883a 	mov	r20,r3
    a6a4:	003d1806 	br	9b08 <__alt_data_end+0x80009b08>
    a6a8:	1829883a 	mov	r20,r3
    a6ac:	003ccd06 	br	99e4 <__alt_data_end+0x800099e4>
    a6b0:	0025883a 	mov	r18,zero
    a6b4:	003fe906 	br	a65c <__alt_data_end+0x8000a65c>
    a6b8:	d8802217 	ldw	r2,136(sp)
    a6bc:	80c00043 	ldbu	r3,1(r16)
    a6c0:	5021883a 	mov	r16,r10
    a6c4:	12400017 	ldw	r9,0(r2)
    a6c8:	10800104 	addi	r2,r2,4
    a6cc:	d8802215 	stw	r2,136(sp)
    a6d0:	483faf0e 	bge	r9,zero,a590 <__alt_data_end+0x8000a590>
    a6d4:	18c03fcc 	andi	r3,r3,255
    a6d8:	18c0201c 	xori	r3,r3,128
    a6dc:	027fffc4 	movi	r9,-1
    a6e0:	18ffe004 	addi	r3,r3,-128
    a6e4:	003b6506 	br	947c <__alt_data_end+0x8000947c>
    a6e8:	d9c01d85 	stb	r7,118(sp)
    a6ec:	003ca006 	br	9970 <__alt_data_end+0x80009970>
    a6f0:	d9c01d85 	stb	r7,118(sp)
    a6f4:	003cad06 	br	99ac <__alt_data_end+0x800099ac>
    a6f8:	d9c01d85 	stb	r7,118(sp)
    a6fc:	003d7d06 	br	9cf4 <__alt_data_end+0x80009cf4>
    a700:	d9c01d85 	stb	r7,118(sp)
    a704:	003d5f06 	br	9c84 <__alt_data_end+0x80009c84>
    a708:	a080004c 	andi	r2,r20,1
    a70c:	0039883a 	mov	fp,zero
    a710:	10000526 	beq	r2,zero,a728 <___vfiprintf_internal_r+0x1428>
    a714:	00800c04 	movi	r2,48
    a718:	d88019c5 	stb	r2,103(sp)
    a71c:	dcc02717 	ldw	r19,156(sp)
    a720:	dd4019c4 	addi	r21,sp,103
    a724:	003bf606 	br	9700 <__alt_data_end+0x80009700>
    a728:	0027883a 	mov	r19,zero
    a72c:	dd401a04 	addi	r21,sp,104
    a730:	003bf306 	br	9700 <__alt_data_end+0x80009700>
    a734:	d9c01d85 	stb	r7,118(sp)
    a738:	003dc806 	br	9e5c <__alt_data_end+0x80009e5c>
    a73c:	d9c01d85 	stb	r7,118(sp)
    a740:	003d3a06 	br	9c2c <__alt_data_end+0x80009c2c>
    a744:	d9c01d85 	stb	r7,118(sp)
    a748:	003d2a06 	br	9bf4 <__alt_data_end+0x80009bf4>
    a74c:	d9c01d85 	stb	r7,118(sp)
    a750:	003cde06 	br	9acc <__alt_data_end+0x80009acc>
    a754:	d9c01d85 	stb	r7,118(sp)
    a758:	003cbc06 	br	9a4c <__alt_data_end+0x80009a4c>

0000a75c <__vfiprintf_internal>:
    a75c:	00900034 	movhi	r2,16384
    a760:	10885204 	addi	r2,r2,8520
    a764:	300f883a 	mov	r7,r6
    a768:	280d883a 	mov	r6,r5
    a76c:	200b883a 	mov	r5,r4
    a770:	11000017 	ldw	r4,0(r2)
    a774:	00093001 	jmpi	9300 <___vfiprintf_internal_r>

0000a778 <__sbprintf>:
    a778:	2880030b 	ldhu	r2,12(r5)
    a77c:	2ac01917 	ldw	r11,100(r5)
    a780:	2a80038b 	ldhu	r10,14(r5)
    a784:	2a400717 	ldw	r9,28(r5)
    a788:	2a000917 	ldw	r8,36(r5)
    a78c:	defee204 	addi	sp,sp,-1144
    a790:	00c10004 	movi	r3,1024
    a794:	dc011a15 	stw	r16,1128(sp)
    a798:	10bfff4c 	andi	r2,r2,65533
    a79c:	2821883a 	mov	r16,r5
    a7a0:	d8cb883a 	add	r5,sp,r3
    a7a4:	dc811c15 	stw	r18,1136(sp)
    a7a8:	dc411b15 	stw	r17,1132(sp)
    a7ac:	dfc11d15 	stw	ra,1140(sp)
    a7b0:	2025883a 	mov	r18,r4
    a7b4:	d881030d 	sth	r2,1036(sp)
    a7b8:	dac11915 	stw	r11,1124(sp)
    a7bc:	da81038d 	sth	r10,1038(sp)
    a7c0:	da410715 	stw	r9,1052(sp)
    a7c4:	da010915 	stw	r8,1060(sp)
    a7c8:	dec10015 	stw	sp,1024(sp)
    a7cc:	dec10415 	stw	sp,1040(sp)
    a7d0:	d8c10215 	stw	r3,1032(sp)
    a7d4:	d8c10515 	stw	r3,1044(sp)
    a7d8:	d8010615 	stw	zero,1048(sp)
    a7dc:	00093000 	call	9300 <___vfiprintf_internal_r>
    a7e0:	1023883a 	mov	r17,r2
    a7e4:	10000416 	blt	r2,zero,a7f8 <__sbprintf+0x80>
    a7e8:	d9410004 	addi	r5,sp,1024
    a7ec:	9009883a 	mov	r4,r18
    a7f0:	00067500 	call	6750 <_fflush_r>
    a7f4:	10000d1e 	bne	r2,zero,a82c <__sbprintf+0xb4>
    a7f8:	d881030b 	ldhu	r2,1036(sp)
    a7fc:	1080100c 	andi	r2,r2,64
    a800:	10000326 	beq	r2,zero,a810 <__sbprintf+0x98>
    a804:	8080030b 	ldhu	r2,12(r16)
    a808:	10801014 	ori	r2,r2,64
    a80c:	8080030d 	sth	r2,12(r16)
    a810:	8805883a 	mov	r2,r17
    a814:	dfc11d17 	ldw	ra,1140(sp)
    a818:	dc811c17 	ldw	r18,1136(sp)
    a81c:	dc411b17 	ldw	r17,1132(sp)
    a820:	dc011a17 	ldw	r16,1128(sp)
    a824:	dec11e04 	addi	sp,sp,1144
    a828:	f800283a 	ret
    a82c:	047fffc4 	movi	r17,-1
    a830:	003ff106 	br	a7f8 <__alt_data_end+0x8000a7f8>

0000a834 <_calloc_r>:
    a834:	298b383a 	mul	r5,r5,r6
    a838:	defffe04 	addi	sp,sp,-8
    a83c:	dfc00115 	stw	ra,4(sp)
    a840:	dc000015 	stw	r16,0(sp)
    a844:	00014a00 	call	14a0 <_malloc_r>
    a848:	10002926 	beq	r2,zero,a8f0 <_calloc_r+0xbc>
    a84c:	11bfff17 	ldw	r6,-4(r2)
    a850:	1021883a 	mov	r16,r2
    a854:	00bfff04 	movi	r2,-4
    a858:	308c703a 	and	r6,r6,r2
    a85c:	00c00904 	movi	r3,36
    a860:	308d883a 	add	r6,r6,r2
    a864:	19801636 	bltu	r3,r6,a8c0 <_calloc_r+0x8c>
    a868:	008004c4 	movi	r2,19
    a86c:	11800b2e 	bgeu	r2,r6,a89c <_calloc_r+0x68>
    a870:	80000015 	stw	zero,0(r16)
    a874:	80000115 	stw	zero,4(r16)
    a878:	008006c4 	movi	r2,27
    a87c:	11801a2e 	bgeu	r2,r6,a8e8 <_calloc_r+0xb4>
    a880:	80000215 	stw	zero,8(r16)
    a884:	80000315 	stw	zero,12(r16)
    a888:	30c0151e 	bne	r6,r3,a8e0 <_calloc_r+0xac>
    a88c:	80000415 	stw	zero,16(r16)
    a890:	80800604 	addi	r2,r16,24
    a894:	80000515 	stw	zero,20(r16)
    a898:	00000106 	br	a8a0 <_calloc_r+0x6c>
    a89c:	8005883a 	mov	r2,r16
    a8a0:	10000015 	stw	zero,0(r2)
    a8a4:	10000115 	stw	zero,4(r2)
    a8a8:	10000215 	stw	zero,8(r2)
    a8ac:	8005883a 	mov	r2,r16
    a8b0:	dfc00117 	ldw	ra,4(sp)
    a8b4:	dc000017 	ldw	r16,0(sp)
    a8b8:	dec00204 	addi	sp,sp,8
    a8bc:	f800283a 	ret
    a8c0:	000b883a 	mov	r5,zero
    a8c4:	8009883a 	mov	r4,r16
    a8c8:	0001cac0 	call	1cac <memset>
    a8cc:	8005883a 	mov	r2,r16
    a8d0:	dfc00117 	ldw	ra,4(sp)
    a8d4:	dc000017 	ldw	r16,0(sp)
    a8d8:	dec00204 	addi	sp,sp,8
    a8dc:	f800283a 	ret
    a8e0:	80800404 	addi	r2,r16,16
    a8e4:	003fee06 	br	a8a0 <__alt_data_end+0x8000a8a0>
    a8e8:	80800204 	addi	r2,r16,8
    a8ec:	003fec06 	br	a8a0 <__alt_data_end+0x8000a8a0>
    a8f0:	0005883a 	mov	r2,zero
    a8f4:	003fee06 	br	a8b0 <__alt_data_end+0x8000a8b0>

0000a8f8 <_fclose_r>:
    a8f8:	28003926 	beq	r5,zero,a9e0 <_fclose_r+0xe8>
    a8fc:	defffc04 	addi	sp,sp,-16
    a900:	dc400115 	stw	r17,4(sp)
    a904:	dc000015 	stw	r16,0(sp)
    a908:	dfc00315 	stw	ra,12(sp)
    a90c:	dc800215 	stw	r18,8(sp)
    a910:	2023883a 	mov	r17,r4
    a914:	2821883a 	mov	r16,r5
    a918:	20000226 	beq	r4,zero,a924 <_fclose_r+0x2c>
    a91c:	20800e17 	ldw	r2,56(r4)
    a920:	10002726 	beq	r2,zero,a9c0 <_fclose_r+0xc8>
    a924:	8080030f 	ldh	r2,12(r16)
    a928:	1000071e 	bne	r2,zero,a948 <_fclose_r+0x50>
    a92c:	0005883a 	mov	r2,zero
    a930:	dfc00317 	ldw	ra,12(sp)
    a934:	dc800217 	ldw	r18,8(sp)
    a938:	dc400117 	ldw	r17,4(sp)
    a93c:	dc000017 	ldw	r16,0(sp)
    a940:	dec00404 	addi	sp,sp,16
    a944:	f800283a 	ret
    a948:	800b883a 	mov	r5,r16
    a94c:	8809883a 	mov	r4,r17
    a950:	00065340 	call	6534 <__sflush_r>
    a954:	1025883a 	mov	r18,r2
    a958:	80800b17 	ldw	r2,44(r16)
    a95c:	10000426 	beq	r2,zero,a970 <_fclose_r+0x78>
    a960:	81400717 	ldw	r5,28(r16)
    a964:	8809883a 	mov	r4,r17
    a968:	103ee83a 	callr	r2
    a96c:	10001616 	blt	r2,zero,a9c8 <_fclose_r+0xd0>
    a970:	8080030b 	ldhu	r2,12(r16)
    a974:	1080200c 	andi	r2,r2,128
    a978:	1000151e 	bne	r2,zero,a9d0 <_fclose_r+0xd8>
    a97c:	81400c17 	ldw	r5,48(r16)
    a980:	28000526 	beq	r5,zero,a998 <_fclose_r+0xa0>
    a984:	80801004 	addi	r2,r16,64
    a988:	28800226 	beq	r5,r2,a994 <_fclose_r+0x9c>
    a98c:	8809883a 	mov	r4,r17
    a990:	0006d4c0 	call	6d4c <_free_r>
    a994:	80000c15 	stw	zero,48(r16)
    a998:	81401117 	ldw	r5,68(r16)
    a99c:	28000326 	beq	r5,zero,a9ac <_fclose_r+0xb4>
    a9a0:	8809883a 	mov	r4,r17
    a9a4:	0006d4c0 	call	6d4c <_free_r>
    a9a8:	80001115 	stw	zero,68(r16)
    a9ac:	0006b3c0 	call	6b3c <__sfp_lock_acquire>
    a9b0:	8000030d 	sth	zero,12(r16)
    a9b4:	0006b400 	call	6b40 <__sfp_lock_release>
    a9b8:	9005883a 	mov	r2,r18
    a9bc:	003fdc06 	br	a930 <__alt_data_end+0x8000a930>
    a9c0:	0006b2c0 	call	6b2c <__sinit>
    a9c4:	003fd706 	br	a924 <__alt_data_end+0x8000a924>
    a9c8:	04bfffc4 	movi	r18,-1
    a9cc:	003fe806 	br	a970 <__alt_data_end+0x8000a970>
    a9d0:	81400417 	ldw	r5,16(r16)
    a9d4:	8809883a 	mov	r4,r17
    a9d8:	0006d4c0 	call	6d4c <_free_r>
    a9dc:	003fe706 	br	a97c <__alt_data_end+0x8000a97c>
    a9e0:	0005883a 	mov	r2,zero
    a9e4:	f800283a 	ret

0000a9e8 <fclose>:
    a9e8:	00900034 	movhi	r2,16384
    a9ec:	10885204 	addi	r2,r2,8520
    a9f0:	200b883a 	mov	r5,r4
    a9f4:	11000017 	ldw	r4,0(r2)
    a9f8:	000a8f81 	jmpi	a8f8 <_fclose_r>

0000a9fc <__fputwc>:
    a9fc:	defff804 	addi	sp,sp,-32
    aa00:	dcc00415 	stw	r19,16(sp)
    aa04:	dc800315 	stw	r18,12(sp)
    aa08:	dc000115 	stw	r16,4(sp)
    aa0c:	dfc00715 	stw	ra,28(sp)
    aa10:	dd400615 	stw	r21,24(sp)
    aa14:	dd000515 	stw	r20,20(sp)
    aa18:	dc400215 	stw	r17,8(sp)
    aa1c:	2027883a 	mov	r19,r4
    aa20:	2825883a 	mov	r18,r5
    aa24:	3021883a 	mov	r16,r6
    aa28:	000777c0 	call	777c <__locale_mb_cur_max>
    aa2c:	00c00044 	movi	r3,1
    aa30:	10c03e26 	beq	r2,r3,ab2c <__fputwc+0x130>
    aa34:	81c01704 	addi	r7,r16,92
    aa38:	900d883a 	mov	r6,r18
    aa3c:	d80b883a 	mov	r5,sp
    aa40:	9809883a 	mov	r4,r19
    aa44:	000ac040 	call	ac04 <_wcrtomb_r>
    aa48:	1029883a 	mov	r20,r2
    aa4c:	00bfffc4 	movi	r2,-1
    aa50:	a0802026 	beq	r20,r2,aad4 <__fputwc+0xd8>
    aa54:	d9400003 	ldbu	r5,0(sp)
    aa58:	a0001c26 	beq	r20,zero,aacc <__fputwc+0xd0>
    aa5c:	0023883a 	mov	r17,zero
    aa60:	05400284 	movi	r21,10
    aa64:	00000906 	br	aa8c <__fputwc+0x90>
    aa68:	80800017 	ldw	r2,0(r16)
    aa6c:	11400005 	stb	r5,0(r2)
    aa70:	80c00017 	ldw	r3,0(r16)
    aa74:	18c00044 	addi	r3,r3,1
    aa78:	80c00015 	stw	r3,0(r16)
    aa7c:	8c400044 	addi	r17,r17,1
    aa80:	dc45883a 	add	r2,sp,r17
    aa84:	8d00112e 	bgeu	r17,r20,aacc <__fputwc+0xd0>
    aa88:	11400003 	ldbu	r5,0(r2)
    aa8c:	80c00217 	ldw	r3,8(r16)
    aa90:	18ffffc4 	addi	r3,r3,-1
    aa94:	80c00215 	stw	r3,8(r16)
    aa98:	183ff30e 	bge	r3,zero,aa68 <__alt_data_end+0x8000aa68>
    aa9c:	80800617 	ldw	r2,24(r16)
    aaa0:	18801916 	blt	r3,r2,ab08 <__fputwc+0x10c>
    aaa4:	80800017 	ldw	r2,0(r16)
    aaa8:	11400005 	stb	r5,0(r2)
    aaac:	80800017 	ldw	r2,0(r16)
    aab0:	10c00003 	ldbu	r3,0(r2)
    aab4:	10800044 	addi	r2,r2,1
    aab8:	1d402326 	beq	r3,r21,ab48 <__fputwc+0x14c>
    aabc:	80800015 	stw	r2,0(r16)
    aac0:	8c400044 	addi	r17,r17,1
    aac4:	dc45883a 	add	r2,sp,r17
    aac8:	8d3fef36 	bltu	r17,r20,aa88 <__alt_data_end+0x8000aa88>
    aacc:	9005883a 	mov	r2,r18
    aad0:	00000406 	br	aae4 <__fputwc+0xe8>
    aad4:	80c0030b 	ldhu	r3,12(r16)
    aad8:	a005883a 	mov	r2,r20
    aadc:	18c01014 	ori	r3,r3,64
    aae0:	80c0030d 	sth	r3,12(r16)
    aae4:	dfc00717 	ldw	ra,28(sp)
    aae8:	dd400617 	ldw	r21,24(sp)
    aaec:	dd000517 	ldw	r20,20(sp)
    aaf0:	dcc00417 	ldw	r19,16(sp)
    aaf4:	dc800317 	ldw	r18,12(sp)
    aaf8:	dc400217 	ldw	r17,8(sp)
    aafc:	dc000117 	ldw	r16,4(sp)
    ab00:	dec00804 	addi	sp,sp,32
    ab04:	f800283a 	ret
    ab08:	800d883a 	mov	r6,r16
    ab0c:	29403fcc 	andi	r5,r5,255
    ab10:	9809883a 	mov	r4,r19
    ab14:	000494c0 	call	494c <__swbuf_r>
    ab18:	10bfffe0 	cmpeqi	r2,r2,-1
    ab1c:	10803fcc 	andi	r2,r2,255
    ab20:	103fd626 	beq	r2,zero,aa7c <__alt_data_end+0x8000aa7c>
    ab24:	00bfffc4 	movi	r2,-1
    ab28:	003fee06 	br	aae4 <__alt_data_end+0x8000aae4>
    ab2c:	90ffffc4 	addi	r3,r18,-1
    ab30:	01003f84 	movi	r4,254
    ab34:	20ffbf36 	bltu	r4,r3,aa34 <__alt_data_end+0x8000aa34>
    ab38:	900b883a 	mov	r5,r18
    ab3c:	dc800005 	stb	r18,0(sp)
    ab40:	1029883a 	mov	r20,r2
    ab44:	003fc506 	br	aa5c <__alt_data_end+0x8000aa5c>
    ab48:	800d883a 	mov	r6,r16
    ab4c:	a80b883a 	mov	r5,r21
    ab50:	9809883a 	mov	r4,r19
    ab54:	000494c0 	call	494c <__swbuf_r>
    ab58:	10bfffe0 	cmpeqi	r2,r2,-1
    ab5c:	003fef06 	br	ab1c <__alt_data_end+0x8000ab1c>

0000ab60 <_fputwc_r>:
    ab60:	3080030b 	ldhu	r2,12(r6)
    ab64:	10c8000c 	andi	r3,r2,8192
    ab68:	1800051e 	bne	r3,zero,ab80 <_fputwc_r+0x20>
    ab6c:	30c01917 	ldw	r3,100(r6)
    ab70:	10880014 	ori	r2,r2,8192
    ab74:	3080030d 	sth	r2,12(r6)
    ab78:	18880014 	ori	r2,r3,8192
    ab7c:	30801915 	stw	r2,100(r6)
    ab80:	000a9fc1 	jmpi	a9fc <__fputwc>

0000ab84 <fputwc>:
    ab84:	00900034 	movhi	r2,16384
    ab88:	defffc04 	addi	sp,sp,-16
    ab8c:	10885204 	addi	r2,r2,8520
    ab90:	dc000115 	stw	r16,4(sp)
    ab94:	14000017 	ldw	r16,0(r2)
    ab98:	dc400215 	stw	r17,8(sp)
    ab9c:	dfc00315 	stw	ra,12(sp)
    aba0:	2023883a 	mov	r17,r4
    aba4:	80000226 	beq	r16,zero,abb0 <fputwc+0x2c>
    aba8:	80800e17 	ldw	r2,56(r16)
    abac:	10001026 	beq	r2,zero,abf0 <fputwc+0x6c>
    abb0:	2880030b 	ldhu	r2,12(r5)
    abb4:	10c8000c 	andi	r3,r2,8192
    abb8:	1800051e 	bne	r3,zero,abd0 <fputwc+0x4c>
    abbc:	28c01917 	ldw	r3,100(r5)
    abc0:	10880014 	ori	r2,r2,8192
    abc4:	2880030d 	sth	r2,12(r5)
    abc8:	18880014 	ori	r2,r3,8192
    abcc:	28801915 	stw	r2,100(r5)
    abd0:	280d883a 	mov	r6,r5
    abd4:	8009883a 	mov	r4,r16
    abd8:	880b883a 	mov	r5,r17
    abdc:	dfc00317 	ldw	ra,12(sp)
    abe0:	dc400217 	ldw	r17,8(sp)
    abe4:	dc000117 	ldw	r16,4(sp)
    abe8:	dec00404 	addi	sp,sp,16
    abec:	000a9fc1 	jmpi	a9fc <__fputwc>
    abf0:	8009883a 	mov	r4,r16
    abf4:	d9400015 	stw	r5,0(sp)
    abf8:	0006b2c0 	call	6b2c <__sinit>
    abfc:	d9400017 	ldw	r5,0(sp)
    ac00:	003feb06 	br	abb0 <__alt_data_end+0x8000abb0>

0000ac04 <_wcrtomb_r>:
    ac04:	defff604 	addi	sp,sp,-40
    ac08:	00900034 	movhi	r2,16384
    ac0c:	dc800815 	stw	r18,32(sp)
    ac10:	dc400715 	stw	r17,28(sp)
    ac14:	dc000615 	stw	r16,24(sp)
    ac18:	10885604 	addi	r2,r2,8536
    ac1c:	dfc00915 	stw	ra,36(sp)
    ac20:	2021883a 	mov	r16,r4
    ac24:	3823883a 	mov	r17,r7
    ac28:	14800017 	ldw	r18,0(r2)
    ac2c:	28001426 	beq	r5,zero,ac80 <_wcrtomb_r+0x7c>
    ac30:	d9400415 	stw	r5,16(sp)
    ac34:	d9800515 	stw	r6,20(sp)
    ac38:	00077700 	call	7770 <__locale_charset>
    ac3c:	d9800517 	ldw	r6,20(sp)
    ac40:	d9400417 	ldw	r5,16(sp)
    ac44:	100f883a 	mov	r7,r2
    ac48:	dc400015 	stw	r17,0(sp)
    ac4c:	8009883a 	mov	r4,r16
    ac50:	903ee83a 	callr	r18
    ac54:	00ffffc4 	movi	r3,-1
    ac58:	10c0031e 	bne	r2,r3,ac68 <_wcrtomb_r+0x64>
    ac5c:	88000015 	stw	zero,0(r17)
    ac60:	00c02284 	movi	r3,138
    ac64:	80c00015 	stw	r3,0(r16)
    ac68:	dfc00917 	ldw	ra,36(sp)
    ac6c:	dc800817 	ldw	r18,32(sp)
    ac70:	dc400717 	ldw	r17,28(sp)
    ac74:	dc000617 	ldw	r16,24(sp)
    ac78:	dec00a04 	addi	sp,sp,40
    ac7c:	f800283a 	ret
    ac80:	00077700 	call	7770 <__locale_charset>
    ac84:	100f883a 	mov	r7,r2
    ac88:	dc400015 	stw	r17,0(sp)
    ac8c:	000d883a 	mov	r6,zero
    ac90:	d9400104 	addi	r5,sp,4
    ac94:	8009883a 	mov	r4,r16
    ac98:	903ee83a 	callr	r18
    ac9c:	003fed06 	br	ac54 <__alt_data_end+0x8000ac54>

0000aca0 <wcrtomb>:
    aca0:	defff604 	addi	sp,sp,-40
    aca4:	00900034 	movhi	r2,16384
    aca8:	dc800615 	stw	r18,24(sp)
    acac:	dc400515 	stw	r17,20(sp)
    acb0:	10885204 	addi	r2,r2,8520
    acb4:	dfc00915 	stw	ra,36(sp)
    acb8:	dd000815 	stw	r20,32(sp)
    acbc:	dcc00715 	stw	r19,28(sp)
    acc0:	dc000415 	stw	r16,16(sp)
    acc4:	3025883a 	mov	r18,r6
    acc8:	14400017 	ldw	r17,0(r2)
    accc:	20001926 	beq	r4,zero,ad34 <wcrtomb+0x94>
    acd0:	00900034 	movhi	r2,16384
    acd4:	10885604 	addi	r2,r2,8536
    acd8:	15000017 	ldw	r20,0(r2)
    acdc:	2021883a 	mov	r16,r4
    ace0:	2827883a 	mov	r19,r5
    ace4:	00077700 	call	7770 <__locale_charset>
    ace8:	100f883a 	mov	r7,r2
    acec:	dc800015 	stw	r18,0(sp)
    acf0:	980d883a 	mov	r6,r19
    acf4:	800b883a 	mov	r5,r16
    acf8:	8809883a 	mov	r4,r17
    acfc:	a03ee83a 	callr	r20
    ad00:	00ffffc4 	movi	r3,-1
    ad04:	10c0031e 	bne	r2,r3,ad14 <wcrtomb+0x74>
    ad08:	90000015 	stw	zero,0(r18)
    ad0c:	00c02284 	movi	r3,138
    ad10:	88c00015 	stw	r3,0(r17)
    ad14:	dfc00917 	ldw	ra,36(sp)
    ad18:	dd000817 	ldw	r20,32(sp)
    ad1c:	dcc00717 	ldw	r19,28(sp)
    ad20:	dc800617 	ldw	r18,24(sp)
    ad24:	dc400517 	ldw	r17,20(sp)
    ad28:	dc000417 	ldw	r16,16(sp)
    ad2c:	dec00a04 	addi	sp,sp,40
    ad30:	f800283a 	ret
    ad34:	00900034 	movhi	r2,16384
    ad38:	10885604 	addi	r2,r2,8536
    ad3c:	14000017 	ldw	r16,0(r2)
    ad40:	00077700 	call	7770 <__locale_charset>
    ad44:	100f883a 	mov	r7,r2
    ad48:	dc800015 	stw	r18,0(sp)
    ad4c:	000d883a 	mov	r6,zero
    ad50:	d9400104 	addi	r5,sp,4
    ad54:	8809883a 	mov	r4,r17
    ad58:	803ee83a 	callr	r16
    ad5c:	003fe806 	br	ad00 <__alt_data_end+0x8000ad00>

0000ad60 <__ascii_wctomb>:
    ad60:	28000526 	beq	r5,zero,ad78 <__ascii_wctomb+0x18>
    ad64:	00803fc4 	movi	r2,255
    ad68:	11800536 	bltu	r2,r6,ad80 <__ascii_wctomb+0x20>
    ad6c:	29800005 	stb	r6,0(r5)
    ad70:	00800044 	movi	r2,1
    ad74:	f800283a 	ret
    ad78:	0005883a 	mov	r2,zero
    ad7c:	f800283a 	ret
    ad80:	00802284 	movi	r2,138
    ad84:	20800015 	stw	r2,0(r4)
    ad88:	00bfffc4 	movi	r2,-1
    ad8c:	f800283a 	ret

0000ad90 <_wctomb_r>:
    ad90:	00900034 	movhi	r2,16384
    ad94:	defff904 	addi	sp,sp,-28
    ad98:	10885604 	addi	r2,r2,8536
    ad9c:	dfc00615 	stw	ra,24(sp)
    ada0:	dc400515 	stw	r17,20(sp)
    ada4:	dc000415 	stw	r16,16(sp)
    ada8:	3823883a 	mov	r17,r7
    adac:	14000017 	ldw	r16,0(r2)
    adb0:	d9000115 	stw	r4,4(sp)
    adb4:	d9400215 	stw	r5,8(sp)
    adb8:	d9800315 	stw	r6,12(sp)
    adbc:	00077700 	call	7770 <__locale_charset>
    adc0:	d9800317 	ldw	r6,12(sp)
    adc4:	d9400217 	ldw	r5,8(sp)
    adc8:	d9000117 	ldw	r4,4(sp)
    adcc:	100f883a 	mov	r7,r2
    add0:	dc400015 	stw	r17,0(sp)
    add4:	803ee83a 	callr	r16
    add8:	dfc00617 	ldw	ra,24(sp)
    addc:	dc400517 	ldw	r17,20(sp)
    ade0:	dc000417 	ldw	r16,16(sp)
    ade4:	dec00704 	addi	sp,sp,28
    ade8:	f800283a 	ret

0000adec <__udivdi3>:
    adec:	defff504 	addi	sp,sp,-44
    adf0:	dcc00415 	stw	r19,16(sp)
    adf4:	dc000115 	stw	r16,4(sp)
    adf8:	dfc00a15 	stw	ra,40(sp)
    adfc:	df000915 	stw	fp,36(sp)
    ae00:	ddc00815 	stw	r23,32(sp)
    ae04:	dd800715 	stw	r22,28(sp)
    ae08:	dd400615 	stw	r21,24(sp)
    ae0c:	dd000515 	stw	r20,20(sp)
    ae10:	dc800315 	stw	r18,12(sp)
    ae14:	dc400215 	stw	r17,8(sp)
    ae18:	2027883a 	mov	r19,r4
    ae1c:	2821883a 	mov	r16,r5
    ae20:	3800411e 	bne	r7,zero,af28 <__udivdi3+0x13c>
    ae24:	3023883a 	mov	r17,r6
    ae28:	2025883a 	mov	r18,r4
    ae2c:	2980522e 	bgeu	r5,r6,af78 <__udivdi3+0x18c>
    ae30:	00bfffd4 	movui	r2,65535
    ae34:	282d883a 	mov	r22,r5
    ae38:	1180a836 	bltu	r2,r6,b0dc <__udivdi3+0x2f0>
    ae3c:	00803fc4 	movi	r2,255
    ae40:	1185803a 	cmpltu	r2,r2,r6
    ae44:	100490fa 	slli	r2,r2,3
    ae48:	3086d83a 	srl	r3,r6,r2
    ae4c:	01100034 	movhi	r4,16384
    ae50:	2100a504 	addi	r4,r4,660
    ae54:	20c7883a 	add	r3,r4,r3
    ae58:	18c00003 	ldbu	r3,0(r3)
    ae5c:	1885883a 	add	r2,r3,r2
    ae60:	00c00804 	movi	r3,32
    ae64:	1887c83a 	sub	r3,r3,r2
    ae68:	18000526 	beq	r3,zero,ae80 <__udivdi3+0x94>
    ae6c:	80e0983a 	sll	r16,r16,r3
    ae70:	9884d83a 	srl	r2,r19,r2
    ae74:	30e2983a 	sll	r17,r6,r3
    ae78:	98e4983a 	sll	r18,r19,r3
    ae7c:	142cb03a 	or	r22,r2,r16
    ae80:	882ad43a 	srli	r21,r17,16
    ae84:	b009883a 	mov	r4,r22
    ae88:	8d3fffcc 	andi	r20,r17,65535
    ae8c:	a80b883a 	mov	r5,r21
    ae90:	000b9f80 	call	b9f8 <__umodsi3>
    ae94:	b009883a 	mov	r4,r22
    ae98:	a80b883a 	mov	r5,r21
    ae9c:	1027883a 	mov	r19,r2
    aea0:	000b9940 	call	b994 <__udivsi3>
    aea4:	102d883a 	mov	r22,r2
    aea8:	9826943a 	slli	r19,r19,16
    aeac:	9004d43a 	srli	r2,r18,16
    aeb0:	a5a1383a 	mul	r16,r20,r22
    aeb4:	14c4b03a 	or	r2,r2,r19
    aeb8:	1400052e 	bgeu	r2,r16,aed0 <__udivdi3+0xe4>
    aebc:	1445883a 	add	r2,r2,r17
    aec0:	b0ffffc4 	addi	r3,r22,-1
    aec4:	14400136 	bltu	r2,r17,aecc <__udivdi3+0xe0>
    aec8:	14012336 	bltu	r2,r16,b358 <__udivdi3+0x56c>
    aecc:	182d883a 	mov	r22,r3
    aed0:	1421c83a 	sub	r16,r2,r16
    aed4:	a80b883a 	mov	r5,r21
    aed8:	8009883a 	mov	r4,r16
    aedc:	000b9f80 	call	b9f8 <__umodsi3>
    aee0:	1027883a 	mov	r19,r2
    aee4:	a80b883a 	mov	r5,r21
    aee8:	8009883a 	mov	r4,r16
    aeec:	000b9940 	call	b994 <__udivsi3>
    aef0:	9826943a 	slli	r19,r19,16
    aef4:	a0a9383a 	mul	r20,r20,r2
    aef8:	94bfffcc 	andi	r18,r18,65535
    aefc:	94e4b03a 	or	r18,r18,r19
    af00:	9500052e 	bgeu	r18,r20,af18 <__udivdi3+0x12c>
    af04:	8ca5883a 	add	r18,r17,r18
    af08:	10ffffc4 	addi	r3,r2,-1
    af0c:	9440f136 	bltu	r18,r17,b2d4 <__udivdi3+0x4e8>
    af10:	9500f02e 	bgeu	r18,r20,b2d4 <__udivdi3+0x4e8>
    af14:	10bfff84 	addi	r2,r2,-2
    af18:	b00c943a 	slli	r6,r22,16
    af1c:	0007883a 	mov	r3,zero
    af20:	3084b03a 	or	r2,r6,r2
    af24:	00005906 	br	b08c <__udivdi3+0x2a0>
    af28:	29c05636 	bltu	r5,r7,b084 <__udivdi3+0x298>
    af2c:	00bfffd4 	movui	r2,65535
    af30:	11c0622e 	bgeu	r2,r7,b0bc <__udivdi3+0x2d0>
    af34:	00804034 	movhi	r2,256
    af38:	10bfffc4 	addi	r2,r2,-1
    af3c:	11c0ee36 	bltu	r2,r7,b2f8 <__udivdi3+0x50c>
    af40:	00800404 	movi	r2,16
    af44:	3886d83a 	srl	r3,r7,r2
    af48:	01100034 	movhi	r4,16384
    af4c:	2100a504 	addi	r4,r4,660
    af50:	20c7883a 	add	r3,r4,r3
    af54:	18c00003 	ldbu	r3,0(r3)
    af58:	05400804 	movi	r21,32
    af5c:	1885883a 	add	r2,r3,r2
    af60:	a8abc83a 	sub	r21,r21,r2
    af64:	a800621e 	bne	r21,zero,b0f0 <__udivdi3+0x304>
    af68:	3c00e936 	bltu	r7,r16,b310 <__udivdi3+0x524>
    af6c:	9985403a 	cmpgeu	r2,r19,r6
    af70:	0007883a 	mov	r3,zero
    af74:	00004506 	br	b08c <__udivdi3+0x2a0>
    af78:	3000041e 	bne	r6,zero,af8c <__udivdi3+0x1a0>
    af7c:	000b883a 	mov	r5,zero
    af80:	01000044 	movi	r4,1
    af84:	000b9940 	call	b994 <__udivsi3>
    af88:	1023883a 	mov	r17,r2
    af8c:	00bfffd4 	movui	r2,65535
    af90:	14404e2e 	bgeu	r2,r17,b0cc <__udivdi3+0x2e0>
    af94:	00804034 	movhi	r2,256
    af98:	10bfffc4 	addi	r2,r2,-1
    af9c:	1440d836 	bltu	r2,r17,b300 <__udivdi3+0x514>
    afa0:	00800404 	movi	r2,16
    afa4:	8886d83a 	srl	r3,r17,r2
    afa8:	01100034 	movhi	r4,16384
    afac:	2100a504 	addi	r4,r4,660
    afb0:	20c7883a 	add	r3,r4,r3
    afb4:	18c00003 	ldbu	r3,0(r3)
    afb8:	1885883a 	add	r2,r3,r2
    afbc:	00c00804 	movi	r3,32
    afc0:	1887c83a 	sub	r3,r3,r2
    afc4:	18008f1e 	bne	r3,zero,b204 <__udivdi3+0x418>
    afc8:	882ad43a 	srli	r21,r17,16
    afcc:	8461c83a 	sub	r16,r16,r17
    afd0:	8d3fffcc 	andi	r20,r17,65535
    afd4:	00c00044 	movi	r3,1
    afd8:	8009883a 	mov	r4,r16
    afdc:	a80b883a 	mov	r5,r21
    afe0:	d8c00015 	stw	r3,0(sp)
    afe4:	000b9f80 	call	b9f8 <__umodsi3>
    afe8:	8009883a 	mov	r4,r16
    afec:	a80b883a 	mov	r5,r21
    aff0:	1027883a 	mov	r19,r2
    aff4:	000b9940 	call	b994 <__udivsi3>
    aff8:	9826943a 	slli	r19,r19,16
    affc:	9008d43a 	srli	r4,r18,16
    b000:	1521383a 	mul	r16,r2,r20
    b004:	102d883a 	mov	r22,r2
    b008:	24c8b03a 	or	r4,r4,r19
    b00c:	d8c00017 	ldw	r3,0(sp)
    b010:	2400052e 	bgeu	r4,r16,b028 <__udivdi3+0x23c>
    b014:	2449883a 	add	r4,r4,r17
    b018:	b0bfffc4 	addi	r2,r22,-1
    b01c:	24400136 	bltu	r4,r17,b024 <__udivdi3+0x238>
    b020:	2400ca36 	bltu	r4,r16,b34c <__udivdi3+0x560>
    b024:	102d883a 	mov	r22,r2
    b028:	2421c83a 	sub	r16,r4,r16
    b02c:	a80b883a 	mov	r5,r21
    b030:	8009883a 	mov	r4,r16
    b034:	d8c00015 	stw	r3,0(sp)
    b038:	000b9f80 	call	b9f8 <__umodsi3>
    b03c:	1027883a 	mov	r19,r2
    b040:	a80b883a 	mov	r5,r21
    b044:	8009883a 	mov	r4,r16
    b048:	000b9940 	call	b994 <__udivsi3>
    b04c:	9826943a 	slli	r19,r19,16
    b050:	1529383a 	mul	r20,r2,r20
    b054:	94bfffcc 	andi	r18,r18,65535
    b058:	94e4b03a 	or	r18,r18,r19
    b05c:	d8c00017 	ldw	r3,0(sp)
    b060:	9500052e 	bgeu	r18,r20,b078 <__udivdi3+0x28c>
    b064:	8ca5883a 	add	r18,r17,r18
    b068:	113fffc4 	addi	r4,r2,-1
    b06c:	94409736 	bltu	r18,r17,b2cc <__udivdi3+0x4e0>
    b070:	9500962e 	bgeu	r18,r20,b2cc <__udivdi3+0x4e0>
    b074:	10bfff84 	addi	r2,r2,-2
    b078:	b00c943a 	slli	r6,r22,16
    b07c:	3084b03a 	or	r2,r6,r2
    b080:	00000206 	br	b08c <__udivdi3+0x2a0>
    b084:	0007883a 	mov	r3,zero
    b088:	0005883a 	mov	r2,zero
    b08c:	dfc00a17 	ldw	ra,40(sp)
    b090:	df000917 	ldw	fp,36(sp)
    b094:	ddc00817 	ldw	r23,32(sp)
    b098:	dd800717 	ldw	r22,28(sp)
    b09c:	dd400617 	ldw	r21,24(sp)
    b0a0:	dd000517 	ldw	r20,20(sp)
    b0a4:	dcc00417 	ldw	r19,16(sp)
    b0a8:	dc800317 	ldw	r18,12(sp)
    b0ac:	dc400217 	ldw	r17,8(sp)
    b0b0:	dc000117 	ldw	r16,4(sp)
    b0b4:	dec00b04 	addi	sp,sp,44
    b0b8:	f800283a 	ret
    b0bc:	00803fc4 	movi	r2,255
    b0c0:	11c5803a 	cmpltu	r2,r2,r7
    b0c4:	100490fa 	slli	r2,r2,3
    b0c8:	003f9e06 	br	af44 <__alt_data_end+0x8000af44>
    b0cc:	00803fc4 	movi	r2,255
    b0d0:	1445803a 	cmpltu	r2,r2,r17
    b0d4:	100490fa 	slli	r2,r2,3
    b0d8:	003fb206 	br	afa4 <__alt_data_end+0x8000afa4>
    b0dc:	00804034 	movhi	r2,256
    b0e0:	10bfffc4 	addi	r2,r2,-1
    b0e4:	11808836 	bltu	r2,r6,b308 <__udivdi3+0x51c>
    b0e8:	00800404 	movi	r2,16
    b0ec:	003f5606 	br	ae48 <__alt_data_end+0x8000ae48>
    b0f0:	30aed83a 	srl	r23,r6,r2
    b0f4:	3d4e983a 	sll	r7,r7,r21
    b0f8:	80acd83a 	srl	r22,r16,r2
    b0fc:	9884d83a 	srl	r2,r19,r2
    b100:	3deeb03a 	or	r23,r7,r23
    b104:	b824d43a 	srli	r18,r23,16
    b108:	8560983a 	sll	r16,r16,r21
    b10c:	b009883a 	mov	r4,r22
    b110:	900b883a 	mov	r5,r18
    b114:	3568983a 	sll	r20,r6,r21
    b118:	1420b03a 	or	r16,r2,r16
    b11c:	000b9f80 	call	b9f8 <__umodsi3>
    b120:	b009883a 	mov	r4,r22
    b124:	900b883a 	mov	r5,r18
    b128:	1023883a 	mov	r17,r2
    b12c:	000b9940 	call	b994 <__udivsi3>
    b130:	8808943a 	slli	r4,r17,16
    b134:	bf3fffcc 	andi	fp,r23,65535
    b138:	8006d43a 	srli	r3,r16,16
    b13c:	e0a3383a 	mul	r17,fp,r2
    b140:	100d883a 	mov	r6,r2
    b144:	1906b03a 	or	r3,r3,r4
    b148:	1c40042e 	bgeu	r3,r17,b15c <__udivdi3+0x370>
    b14c:	1dc7883a 	add	r3,r3,r23
    b150:	10bfffc4 	addi	r2,r2,-1
    b154:	1dc0752e 	bgeu	r3,r23,b32c <__udivdi3+0x540>
    b158:	100d883a 	mov	r6,r2
    b15c:	1c63c83a 	sub	r17,r3,r17
    b160:	900b883a 	mov	r5,r18
    b164:	8809883a 	mov	r4,r17
    b168:	d9800015 	stw	r6,0(sp)
    b16c:	000b9f80 	call	b9f8 <__umodsi3>
    b170:	102d883a 	mov	r22,r2
    b174:	8809883a 	mov	r4,r17
    b178:	900b883a 	mov	r5,r18
    b17c:	000b9940 	call	b994 <__udivsi3>
    b180:	b02c943a 	slli	r22,r22,16
    b184:	e089383a 	mul	r4,fp,r2
    b188:	843fffcc 	andi	r16,r16,65535
    b18c:	85a0b03a 	or	r16,r16,r22
    b190:	d9800017 	ldw	r6,0(sp)
    b194:	8100042e 	bgeu	r16,r4,b1a8 <__udivdi3+0x3bc>
    b198:	85e1883a 	add	r16,r16,r23
    b19c:	10ffffc4 	addi	r3,r2,-1
    b1a0:	85c05e2e 	bgeu	r16,r23,b31c <__udivdi3+0x530>
    b1a4:	1805883a 	mov	r2,r3
    b1a8:	300c943a 	slli	r6,r6,16
    b1ac:	a17fffcc 	andi	r5,r20,65535
    b1b0:	a028d43a 	srli	r20,r20,16
    b1b4:	3084b03a 	or	r2,r6,r2
    b1b8:	10ffffcc 	andi	r3,r2,65535
    b1bc:	100cd43a 	srli	r6,r2,16
    b1c0:	194f383a 	mul	r7,r3,r5
    b1c4:	1d07383a 	mul	r3,r3,r20
    b1c8:	314b383a 	mul	r5,r6,r5
    b1cc:	3810d43a 	srli	r8,r7,16
    b1d0:	8121c83a 	sub	r16,r16,r4
    b1d4:	1947883a 	add	r3,r3,r5
    b1d8:	40c7883a 	add	r3,r8,r3
    b1dc:	350d383a 	mul	r6,r6,r20
    b1e0:	1940022e 	bgeu	r3,r5,b1ec <__udivdi3+0x400>
    b1e4:	01000074 	movhi	r4,1
    b1e8:	310d883a 	add	r6,r6,r4
    b1ec:	1828d43a 	srli	r20,r3,16
    b1f0:	a18d883a 	add	r6,r20,r6
    b1f4:	81803e36 	bltu	r16,r6,b2f0 <__udivdi3+0x504>
    b1f8:	81803826 	beq	r16,r6,b2dc <__udivdi3+0x4f0>
    b1fc:	0007883a 	mov	r3,zero
    b200:	003fa206 	br	b08c <__alt_data_end+0x8000b08c>
    b204:	88e2983a 	sll	r17,r17,r3
    b208:	80a8d83a 	srl	r20,r16,r2
    b20c:	80e0983a 	sll	r16,r16,r3
    b210:	882ad43a 	srli	r21,r17,16
    b214:	9884d83a 	srl	r2,r19,r2
    b218:	a009883a 	mov	r4,r20
    b21c:	a80b883a 	mov	r5,r21
    b220:	142eb03a 	or	r23,r2,r16
    b224:	98e4983a 	sll	r18,r19,r3
    b228:	000b9f80 	call	b9f8 <__umodsi3>
    b22c:	a009883a 	mov	r4,r20
    b230:	a80b883a 	mov	r5,r21
    b234:	1021883a 	mov	r16,r2
    b238:	000b9940 	call	b994 <__udivsi3>
    b23c:	1039883a 	mov	fp,r2
    b240:	8d3fffcc 	andi	r20,r17,65535
    b244:	8020943a 	slli	r16,r16,16
    b248:	b804d43a 	srli	r2,r23,16
    b24c:	a72d383a 	mul	r22,r20,fp
    b250:	1404b03a 	or	r2,r2,r16
    b254:	1580062e 	bgeu	r2,r22,b270 <__udivdi3+0x484>
    b258:	1445883a 	add	r2,r2,r17
    b25c:	e0ffffc4 	addi	r3,fp,-1
    b260:	14403836 	bltu	r2,r17,b344 <__udivdi3+0x558>
    b264:	1580372e 	bgeu	r2,r22,b344 <__udivdi3+0x558>
    b268:	e73fff84 	addi	fp,fp,-2
    b26c:	1445883a 	add	r2,r2,r17
    b270:	15adc83a 	sub	r22,r2,r22
    b274:	a80b883a 	mov	r5,r21
    b278:	b009883a 	mov	r4,r22
    b27c:	000b9f80 	call	b9f8 <__umodsi3>
    b280:	1027883a 	mov	r19,r2
    b284:	b009883a 	mov	r4,r22
    b288:	a80b883a 	mov	r5,r21
    b28c:	000b9940 	call	b994 <__udivsi3>
    b290:	9826943a 	slli	r19,r19,16
    b294:	a0a1383a 	mul	r16,r20,r2
    b298:	b93fffcc 	andi	r4,r23,65535
    b29c:	24c8b03a 	or	r4,r4,r19
    b2a0:	2400062e 	bgeu	r4,r16,b2bc <__udivdi3+0x4d0>
    b2a4:	2449883a 	add	r4,r4,r17
    b2a8:	10ffffc4 	addi	r3,r2,-1
    b2ac:	24402336 	bltu	r4,r17,b33c <__udivdi3+0x550>
    b2b0:	2400222e 	bgeu	r4,r16,b33c <__udivdi3+0x550>
    b2b4:	10bfff84 	addi	r2,r2,-2
    b2b8:	2449883a 	add	r4,r4,r17
    b2bc:	e038943a 	slli	fp,fp,16
    b2c0:	2421c83a 	sub	r16,r4,r16
    b2c4:	e086b03a 	or	r3,fp,r2
    b2c8:	003f4306 	br	afd8 <__alt_data_end+0x8000afd8>
    b2cc:	2005883a 	mov	r2,r4
    b2d0:	003f6906 	br	b078 <__alt_data_end+0x8000b078>
    b2d4:	1805883a 	mov	r2,r3
    b2d8:	003f0f06 	br	af18 <__alt_data_end+0x8000af18>
    b2dc:	1806943a 	slli	r3,r3,16
    b2e0:	9d66983a 	sll	r19,r19,r21
    b2e4:	39ffffcc 	andi	r7,r7,65535
    b2e8:	19c7883a 	add	r3,r3,r7
    b2ec:	98ffc32e 	bgeu	r19,r3,b1fc <__alt_data_end+0x8000b1fc>
    b2f0:	10bfffc4 	addi	r2,r2,-1
    b2f4:	003fc106 	br	b1fc <__alt_data_end+0x8000b1fc>
    b2f8:	00800604 	movi	r2,24
    b2fc:	003f1106 	br	af44 <__alt_data_end+0x8000af44>
    b300:	00800604 	movi	r2,24
    b304:	003f2706 	br	afa4 <__alt_data_end+0x8000afa4>
    b308:	00800604 	movi	r2,24
    b30c:	003ece06 	br	ae48 <__alt_data_end+0x8000ae48>
    b310:	0007883a 	mov	r3,zero
    b314:	00800044 	movi	r2,1
    b318:	003f5c06 	br	b08c <__alt_data_end+0x8000b08c>
    b31c:	813fa12e 	bgeu	r16,r4,b1a4 <__alt_data_end+0x8000b1a4>
    b320:	10bfff84 	addi	r2,r2,-2
    b324:	85e1883a 	add	r16,r16,r23
    b328:	003f9f06 	br	b1a8 <__alt_data_end+0x8000b1a8>
    b32c:	1c7f8a2e 	bgeu	r3,r17,b158 <__alt_data_end+0x8000b158>
    b330:	31bfff84 	addi	r6,r6,-2
    b334:	1dc7883a 	add	r3,r3,r23
    b338:	003f8806 	br	b15c <__alt_data_end+0x8000b15c>
    b33c:	1805883a 	mov	r2,r3
    b340:	003fde06 	br	b2bc <__alt_data_end+0x8000b2bc>
    b344:	1839883a 	mov	fp,r3
    b348:	003fc906 	br	b270 <__alt_data_end+0x8000b270>
    b34c:	b5bfff84 	addi	r22,r22,-2
    b350:	2449883a 	add	r4,r4,r17
    b354:	003f3406 	br	b028 <__alt_data_end+0x8000b028>
    b358:	b5bfff84 	addi	r22,r22,-2
    b35c:	1445883a 	add	r2,r2,r17
    b360:	003edb06 	br	aed0 <__alt_data_end+0x8000aed0>

0000b364 <__umoddi3>:
    b364:	defff404 	addi	sp,sp,-48
    b368:	df000a15 	stw	fp,40(sp)
    b36c:	dc400315 	stw	r17,12(sp)
    b370:	dc000215 	stw	r16,8(sp)
    b374:	dfc00b15 	stw	ra,44(sp)
    b378:	ddc00915 	stw	r23,36(sp)
    b37c:	dd800815 	stw	r22,32(sp)
    b380:	dd400715 	stw	r21,28(sp)
    b384:	dd000615 	stw	r20,24(sp)
    b388:	dcc00515 	stw	r19,20(sp)
    b38c:	dc800415 	stw	r18,16(sp)
    b390:	2021883a 	mov	r16,r4
    b394:	2823883a 	mov	r17,r5
    b398:	2839883a 	mov	fp,r5
    b39c:	38003c1e 	bne	r7,zero,b490 <__umoddi3+0x12c>
    b3a0:	3027883a 	mov	r19,r6
    b3a4:	2029883a 	mov	r20,r4
    b3a8:	2980512e 	bgeu	r5,r6,b4f0 <__umoddi3+0x18c>
    b3ac:	00bfffd4 	movui	r2,65535
    b3b0:	11809a36 	bltu	r2,r6,b61c <__umoddi3+0x2b8>
    b3b4:	01003fc4 	movi	r4,255
    b3b8:	2189803a 	cmpltu	r4,r4,r6
    b3bc:	200890fa 	slli	r4,r4,3
    b3c0:	3104d83a 	srl	r2,r6,r4
    b3c4:	00d00034 	movhi	r3,16384
    b3c8:	18c0a504 	addi	r3,r3,660
    b3cc:	1885883a 	add	r2,r3,r2
    b3d0:	10c00003 	ldbu	r3,0(r2)
    b3d4:	00800804 	movi	r2,32
    b3d8:	1909883a 	add	r4,r3,r4
    b3dc:	1125c83a 	sub	r18,r2,r4
    b3e0:	90000526 	beq	r18,zero,b3f8 <__umoddi3+0x94>
    b3e4:	8ca2983a 	sll	r17,r17,r18
    b3e8:	8108d83a 	srl	r4,r16,r4
    b3ec:	34a6983a 	sll	r19,r6,r18
    b3f0:	84a8983a 	sll	r20,r16,r18
    b3f4:	2478b03a 	or	fp,r4,r17
    b3f8:	982ed43a 	srli	r23,r19,16
    b3fc:	e009883a 	mov	r4,fp
    b400:	9dbfffcc 	andi	r22,r19,65535
    b404:	b80b883a 	mov	r5,r23
    b408:	000b9f80 	call	b9f8 <__umodsi3>
    b40c:	e009883a 	mov	r4,fp
    b410:	b80b883a 	mov	r5,r23
    b414:	102b883a 	mov	r21,r2
    b418:	000b9940 	call	b994 <__udivsi3>
    b41c:	a806943a 	slli	r3,r21,16
    b420:	a008d43a 	srli	r4,r20,16
    b424:	b085383a 	mul	r2,r22,r2
    b428:	20c8b03a 	or	r4,r4,r3
    b42c:	2080032e 	bgeu	r4,r2,b43c <__umoddi3+0xd8>
    b430:	24c9883a 	add	r4,r4,r19
    b434:	24c00136 	bltu	r4,r19,b43c <__umoddi3+0xd8>
    b438:	20811036 	bltu	r4,r2,b87c <__umoddi3+0x518>
    b43c:	20abc83a 	sub	r21,r4,r2
    b440:	b80b883a 	mov	r5,r23
    b444:	a809883a 	mov	r4,r21
    b448:	000b9f80 	call	b9f8 <__umodsi3>
    b44c:	1023883a 	mov	r17,r2
    b450:	b80b883a 	mov	r5,r23
    b454:	a809883a 	mov	r4,r21
    b458:	000b9940 	call	b994 <__udivsi3>
    b45c:	8822943a 	slli	r17,r17,16
    b460:	b085383a 	mul	r2,r22,r2
    b464:	a0ffffcc 	andi	r3,r20,65535
    b468:	1c46b03a 	or	r3,r3,r17
    b46c:	1880042e 	bgeu	r3,r2,b480 <__umoddi3+0x11c>
    b470:	1cc7883a 	add	r3,r3,r19
    b474:	1cc00236 	bltu	r3,r19,b480 <__umoddi3+0x11c>
    b478:	1880012e 	bgeu	r3,r2,b480 <__umoddi3+0x11c>
    b47c:	1cc7883a 	add	r3,r3,r19
    b480:	1885c83a 	sub	r2,r3,r2
    b484:	1484d83a 	srl	r2,r2,r18
    b488:	0007883a 	mov	r3,zero
    b48c:	00004f06 	br	b5cc <__umoddi3+0x268>
    b490:	29c04c36 	bltu	r5,r7,b5c4 <__umoddi3+0x260>
    b494:	00bfffd4 	movui	r2,65535
    b498:	11c0582e 	bgeu	r2,r7,b5fc <__umoddi3+0x298>
    b49c:	00804034 	movhi	r2,256
    b4a0:	10bfffc4 	addi	r2,r2,-1
    b4a4:	11c0e736 	bltu	r2,r7,b844 <__umoddi3+0x4e0>
    b4a8:	01000404 	movi	r4,16
    b4ac:	3904d83a 	srl	r2,r7,r4
    b4b0:	00d00034 	movhi	r3,16384
    b4b4:	18c0a504 	addi	r3,r3,660
    b4b8:	1885883a 	add	r2,r3,r2
    b4bc:	14c00003 	ldbu	r19,0(r2)
    b4c0:	00c00804 	movi	r3,32
    b4c4:	9927883a 	add	r19,r19,r4
    b4c8:	1ce9c83a 	sub	r20,r3,r19
    b4cc:	a000581e 	bne	r20,zero,b630 <__umoddi3+0x2cc>
    b4d0:	3c400136 	bltu	r7,r17,b4d8 <__umoddi3+0x174>
    b4d4:	8180eb36 	bltu	r16,r6,b884 <__umoddi3+0x520>
    b4d8:	8185c83a 	sub	r2,r16,r6
    b4dc:	89e3c83a 	sub	r17,r17,r7
    b4e0:	8089803a 	cmpltu	r4,r16,r2
    b4e4:	8939c83a 	sub	fp,r17,r4
    b4e8:	e007883a 	mov	r3,fp
    b4ec:	00003706 	br	b5cc <__umoddi3+0x268>
    b4f0:	3000041e 	bne	r6,zero,b504 <__umoddi3+0x1a0>
    b4f4:	000b883a 	mov	r5,zero
    b4f8:	01000044 	movi	r4,1
    b4fc:	000b9940 	call	b994 <__udivsi3>
    b500:	1027883a 	mov	r19,r2
    b504:	00bfffd4 	movui	r2,65535
    b508:	14c0402e 	bgeu	r2,r19,b60c <__umoddi3+0x2a8>
    b50c:	00804034 	movhi	r2,256
    b510:	10bfffc4 	addi	r2,r2,-1
    b514:	14c0cd36 	bltu	r2,r19,b84c <__umoddi3+0x4e8>
    b518:	00800404 	movi	r2,16
    b51c:	9886d83a 	srl	r3,r19,r2
    b520:	01100034 	movhi	r4,16384
    b524:	2100a504 	addi	r4,r4,660
    b528:	20c7883a 	add	r3,r4,r3
    b52c:	18c00003 	ldbu	r3,0(r3)
    b530:	1887883a 	add	r3,r3,r2
    b534:	00800804 	movi	r2,32
    b538:	10e5c83a 	sub	r18,r2,r3
    b53c:	9000901e 	bne	r18,zero,b780 <__umoddi3+0x41c>
    b540:	982cd43a 	srli	r22,r19,16
    b544:	8ce3c83a 	sub	r17,r17,r19
    b548:	9d7fffcc 	andi	r21,r19,65535
    b54c:	b00b883a 	mov	r5,r22
    b550:	8809883a 	mov	r4,r17
    b554:	000b9f80 	call	b9f8 <__umodsi3>
    b558:	8809883a 	mov	r4,r17
    b55c:	b00b883a 	mov	r5,r22
    b560:	1021883a 	mov	r16,r2
    b564:	000b9940 	call	b994 <__udivsi3>
    b568:	8006943a 	slli	r3,r16,16
    b56c:	a008d43a 	srli	r4,r20,16
    b570:	1545383a 	mul	r2,r2,r21
    b574:	20c8b03a 	or	r4,r4,r3
    b578:	2080042e 	bgeu	r4,r2,b58c <__umoddi3+0x228>
    b57c:	24c9883a 	add	r4,r4,r19
    b580:	24c00236 	bltu	r4,r19,b58c <__umoddi3+0x228>
    b584:	2080012e 	bgeu	r4,r2,b58c <__umoddi3+0x228>
    b588:	24c9883a 	add	r4,r4,r19
    b58c:	20a1c83a 	sub	r16,r4,r2
    b590:	b00b883a 	mov	r5,r22
    b594:	8009883a 	mov	r4,r16
    b598:	000b9f80 	call	b9f8 <__umodsi3>
    b59c:	1023883a 	mov	r17,r2
    b5a0:	b00b883a 	mov	r5,r22
    b5a4:	8009883a 	mov	r4,r16
    b5a8:	000b9940 	call	b994 <__udivsi3>
    b5ac:	8822943a 	slli	r17,r17,16
    b5b0:	1545383a 	mul	r2,r2,r21
    b5b4:	a53fffcc 	andi	r20,r20,65535
    b5b8:	a446b03a 	or	r3,r20,r17
    b5bc:	18bfb02e 	bgeu	r3,r2,b480 <__alt_data_end+0x8000b480>
    b5c0:	003fab06 	br	b470 <__alt_data_end+0x8000b470>
    b5c4:	2005883a 	mov	r2,r4
    b5c8:	2807883a 	mov	r3,r5
    b5cc:	dfc00b17 	ldw	ra,44(sp)
    b5d0:	df000a17 	ldw	fp,40(sp)
    b5d4:	ddc00917 	ldw	r23,36(sp)
    b5d8:	dd800817 	ldw	r22,32(sp)
    b5dc:	dd400717 	ldw	r21,28(sp)
    b5e0:	dd000617 	ldw	r20,24(sp)
    b5e4:	dcc00517 	ldw	r19,20(sp)
    b5e8:	dc800417 	ldw	r18,16(sp)
    b5ec:	dc400317 	ldw	r17,12(sp)
    b5f0:	dc000217 	ldw	r16,8(sp)
    b5f4:	dec00c04 	addi	sp,sp,48
    b5f8:	f800283a 	ret
    b5fc:	04c03fc4 	movi	r19,255
    b600:	99c9803a 	cmpltu	r4,r19,r7
    b604:	200890fa 	slli	r4,r4,3
    b608:	003fa806 	br	b4ac <__alt_data_end+0x8000b4ac>
    b60c:	00803fc4 	movi	r2,255
    b610:	14c5803a 	cmpltu	r2,r2,r19
    b614:	100490fa 	slli	r2,r2,3
    b618:	003fc006 	br	b51c <__alt_data_end+0x8000b51c>
    b61c:	00804034 	movhi	r2,256
    b620:	10bfffc4 	addi	r2,r2,-1
    b624:	11808b36 	bltu	r2,r6,b854 <__umoddi3+0x4f0>
    b628:	01000404 	movi	r4,16
    b62c:	003f6406 	br	b3c0 <__alt_data_end+0x8000b3c0>
    b630:	34c4d83a 	srl	r2,r6,r19
    b634:	3d0e983a 	sll	r7,r7,r20
    b638:	8cf8d83a 	srl	fp,r17,r19
    b63c:	8d10983a 	sll	r8,r17,r20
    b640:	38aab03a 	or	r21,r7,r2
    b644:	a82cd43a 	srli	r22,r21,16
    b648:	84e2d83a 	srl	r17,r16,r19
    b64c:	e009883a 	mov	r4,fp
    b650:	b00b883a 	mov	r5,r22
    b654:	8a22b03a 	or	r17,r17,r8
    b658:	3524983a 	sll	r18,r6,r20
    b65c:	000b9f80 	call	b9f8 <__umodsi3>
    b660:	e009883a 	mov	r4,fp
    b664:	b00b883a 	mov	r5,r22
    b668:	102f883a 	mov	r23,r2
    b66c:	000b9940 	call	b994 <__udivsi3>
    b670:	100d883a 	mov	r6,r2
    b674:	b808943a 	slli	r4,r23,16
    b678:	aa3fffcc 	andi	r8,r21,65535
    b67c:	8804d43a 	srli	r2,r17,16
    b680:	41af383a 	mul	r23,r8,r6
    b684:	8520983a 	sll	r16,r16,r20
    b688:	1104b03a 	or	r2,r2,r4
    b68c:	15c0042e 	bgeu	r2,r23,b6a0 <__umoddi3+0x33c>
    b690:	1545883a 	add	r2,r2,r21
    b694:	30ffffc4 	addi	r3,r6,-1
    b698:	1540742e 	bgeu	r2,r21,b86c <__umoddi3+0x508>
    b69c:	180d883a 	mov	r6,r3
    b6a0:	15efc83a 	sub	r23,r2,r23
    b6a4:	b00b883a 	mov	r5,r22
    b6a8:	b809883a 	mov	r4,r23
    b6ac:	d9800115 	stw	r6,4(sp)
    b6b0:	da000015 	stw	r8,0(sp)
    b6b4:	000b9f80 	call	b9f8 <__umodsi3>
    b6b8:	b00b883a 	mov	r5,r22
    b6bc:	b809883a 	mov	r4,r23
    b6c0:	1039883a 	mov	fp,r2
    b6c4:	000b9940 	call	b994 <__udivsi3>
    b6c8:	da000017 	ldw	r8,0(sp)
    b6cc:	e038943a 	slli	fp,fp,16
    b6d0:	100b883a 	mov	r5,r2
    b6d4:	4089383a 	mul	r4,r8,r2
    b6d8:	8a3fffcc 	andi	r8,r17,65535
    b6dc:	4710b03a 	or	r8,r8,fp
    b6e0:	d9800117 	ldw	r6,4(sp)
    b6e4:	4100042e 	bgeu	r8,r4,b6f8 <__umoddi3+0x394>
    b6e8:	4551883a 	add	r8,r8,r21
    b6ec:	10bfffc4 	addi	r2,r2,-1
    b6f0:	45405a2e 	bgeu	r8,r21,b85c <__umoddi3+0x4f8>
    b6f4:	100b883a 	mov	r5,r2
    b6f8:	300c943a 	slli	r6,r6,16
    b6fc:	91ffffcc 	andi	r7,r18,65535
    b700:	9004d43a 	srli	r2,r18,16
    b704:	314cb03a 	or	r6,r6,r5
    b708:	317fffcc 	andi	r5,r6,65535
    b70c:	300cd43a 	srli	r6,r6,16
    b710:	29d3383a 	mul	r9,r5,r7
    b714:	288b383a 	mul	r5,r5,r2
    b718:	31cf383a 	mul	r7,r6,r7
    b71c:	4806d43a 	srli	r3,r9,16
    b720:	4111c83a 	sub	r8,r8,r4
    b724:	29cb883a 	add	r5,r5,r7
    b728:	194b883a 	add	r5,r3,r5
    b72c:	3085383a 	mul	r2,r6,r2
    b730:	29c0022e 	bgeu	r5,r7,b73c <__umoddi3+0x3d8>
    b734:	00c00074 	movhi	r3,1
    b738:	10c5883a 	add	r2,r2,r3
    b73c:	2808d43a 	srli	r4,r5,16
    b740:	280a943a 	slli	r5,r5,16
    b744:	4a7fffcc 	andi	r9,r9,65535
    b748:	2085883a 	add	r2,r4,r2
    b74c:	2a4b883a 	add	r5,r5,r9
    b750:	40803636 	bltu	r8,r2,b82c <__umoddi3+0x4c8>
    b754:	40804d26 	beq	r8,r2,b88c <__umoddi3+0x528>
    b758:	4089c83a 	sub	r4,r8,r2
    b75c:	280f883a 	mov	r7,r5
    b760:	81cfc83a 	sub	r7,r16,r7
    b764:	81c7803a 	cmpltu	r3,r16,r7
    b768:	20c7c83a 	sub	r3,r4,r3
    b76c:	1cc4983a 	sll	r2,r3,r19
    b770:	3d0ed83a 	srl	r7,r7,r20
    b774:	1d06d83a 	srl	r3,r3,r20
    b778:	11c4b03a 	or	r2,r2,r7
    b77c:	003f9306 	br	b5cc <__alt_data_end+0x8000b5cc>
    b780:	9ca6983a 	sll	r19,r19,r18
    b784:	88e8d83a 	srl	r20,r17,r3
    b788:	80c4d83a 	srl	r2,r16,r3
    b78c:	982cd43a 	srli	r22,r19,16
    b790:	8ca2983a 	sll	r17,r17,r18
    b794:	a009883a 	mov	r4,r20
    b798:	b00b883a 	mov	r5,r22
    b79c:	1478b03a 	or	fp,r2,r17
    b7a0:	000b9f80 	call	b9f8 <__umodsi3>
    b7a4:	a009883a 	mov	r4,r20
    b7a8:	b00b883a 	mov	r5,r22
    b7ac:	1023883a 	mov	r17,r2
    b7b0:	000b9940 	call	b994 <__udivsi3>
    b7b4:	9d7fffcc 	andi	r21,r19,65535
    b7b8:	880a943a 	slli	r5,r17,16
    b7bc:	e008d43a 	srli	r4,fp,16
    b7c0:	a885383a 	mul	r2,r21,r2
    b7c4:	84a8983a 	sll	r20,r16,r18
    b7c8:	2148b03a 	or	r4,r4,r5
    b7cc:	2080042e 	bgeu	r4,r2,b7e0 <__umoddi3+0x47c>
    b7d0:	24c9883a 	add	r4,r4,r19
    b7d4:	24c00236 	bltu	r4,r19,b7e0 <__umoddi3+0x47c>
    b7d8:	2080012e 	bgeu	r4,r2,b7e0 <__umoddi3+0x47c>
    b7dc:	24c9883a 	add	r4,r4,r19
    b7e0:	20a3c83a 	sub	r17,r4,r2
    b7e4:	b00b883a 	mov	r5,r22
    b7e8:	8809883a 	mov	r4,r17
    b7ec:	000b9f80 	call	b9f8 <__umodsi3>
    b7f0:	102f883a 	mov	r23,r2
    b7f4:	8809883a 	mov	r4,r17
    b7f8:	b00b883a 	mov	r5,r22
    b7fc:	000b9940 	call	b994 <__udivsi3>
    b800:	b82e943a 	slli	r23,r23,16
    b804:	a885383a 	mul	r2,r21,r2
    b808:	e13fffcc 	andi	r4,fp,65535
    b80c:	25c8b03a 	or	r4,r4,r23
    b810:	2080042e 	bgeu	r4,r2,b824 <__umoddi3+0x4c0>
    b814:	24c9883a 	add	r4,r4,r19
    b818:	24c00236 	bltu	r4,r19,b824 <__umoddi3+0x4c0>
    b81c:	2080012e 	bgeu	r4,r2,b824 <__umoddi3+0x4c0>
    b820:	24c9883a 	add	r4,r4,r19
    b824:	20a3c83a 	sub	r17,r4,r2
    b828:	003f4806 	br	b54c <__alt_data_end+0x8000b54c>
    b82c:	2c8fc83a 	sub	r7,r5,r18
    b830:	1545c83a 	sub	r2,r2,r21
    b834:	29cb803a 	cmpltu	r5,r5,r7
    b838:	1145c83a 	sub	r2,r2,r5
    b83c:	4089c83a 	sub	r4,r8,r2
    b840:	003fc706 	br	b760 <__alt_data_end+0x8000b760>
    b844:	01000604 	movi	r4,24
    b848:	003f1806 	br	b4ac <__alt_data_end+0x8000b4ac>
    b84c:	00800604 	movi	r2,24
    b850:	003f3206 	br	b51c <__alt_data_end+0x8000b51c>
    b854:	01000604 	movi	r4,24
    b858:	003ed906 	br	b3c0 <__alt_data_end+0x8000b3c0>
    b85c:	413fa52e 	bgeu	r8,r4,b6f4 <__alt_data_end+0x8000b6f4>
    b860:	297fff84 	addi	r5,r5,-2
    b864:	4551883a 	add	r8,r8,r21
    b868:	003fa306 	br	b6f8 <__alt_data_end+0x8000b6f8>
    b86c:	15ff8b2e 	bgeu	r2,r23,b69c <__alt_data_end+0x8000b69c>
    b870:	31bfff84 	addi	r6,r6,-2
    b874:	1545883a 	add	r2,r2,r21
    b878:	003f8906 	br	b6a0 <__alt_data_end+0x8000b6a0>
    b87c:	24c9883a 	add	r4,r4,r19
    b880:	003eee06 	br	b43c <__alt_data_end+0x8000b43c>
    b884:	8005883a 	mov	r2,r16
    b888:	003f1706 	br	b4e8 <__alt_data_end+0x8000b4e8>
    b88c:	817fe736 	bltu	r16,r5,b82c <__alt_data_end+0x8000b82c>
    b890:	280f883a 	mov	r7,r5
    b894:	0009883a 	mov	r4,zero
    b898:	003fb106 	br	b760 <__alt_data_end+0x8000b760>

0000b89c <__divsi3>:
    b89c:	20001b16 	blt	r4,zero,b90c <__divsi3+0x70>
    b8a0:	000f883a 	mov	r7,zero
    b8a4:	28001616 	blt	r5,zero,b900 <__divsi3+0x64>
    b8a8:	200d883a 	mov	r6,r4
    b8ac:	29001a2e 	bgeu	r5,r4,b918 <__divsi3+0x7c>
    b8b0:	00800804 	movi	r2,32
    b8b4:	00c00044 	movi	r3,1
    b8b8:	00000106 	br	b8c0 <__divsi3+0x24>
    b8bc:	10000d26 	beq	r2,zero,b8f4 <__divsi3+0x58>
    b8c0:	294b883a 	add	r5,r5,r5
    b8c4:	10bfffc4 	addi	r2,r2,-1
    b8c8:	18c7883a 	add	r3,r3,r3
    b8cc:	293ffb36 	bltu	r5,r4,b8bc <__alt_data_end+0x8000b8bc>
    b8d0:	0005883a 	mov	r2,zero
    b8d4:	18000726 	beq	r3,zero,b8f4 <__divsi3+0x58>
    b8d8:	0005883a 	mov	r2,zero
    b8dc:	31400236 	bltu	r6,r5,b8e8 <__divsi3+0x4c>
    b8e0:	314dc83a 	sub	r6,r6,r5
    b8e4:	10c4b03a 	or	r2,r2,r3
    b8e8:	1806d07a 	srli	r3,r3,1
    b8ec:	280ad07a 	srli	r5,r5,1
    b8f0:	183ffa1e 	bne	r3,zero,b8dc <__alt_data_end+0x8000b8dc>
    b8f4:	38000126 	beq	r7,zero,b8fc <__divsi3+0x60>
    b8f8:	0085c83a 	sub	r2,zero,r2
    b8fc:	f800283a 	ret
    b900:	014bc83a 	sub	r5,zero,r5
    b904:	39c0005c 	xori	r7,r7,1
    b908:	003fe706 	br	b8a8 <__alt_data_end+0x8000b8a8>
    b90c:	0109c83a 	sub	r4,zero,r4
    b910:	01c00044 	movi	r7,1
    b914:	003fe306 	br	b8a4 <__alt_data_end+0x8000b8a4>
    b918:	00c00044 	movi	r3,1
    b91c:	003fee06 	br	b8d8 <__alt_data_end+0x8000b8d8>

0000b920 <__modsi3>:
    b920:	20001716 	blt	r4,zero,b980 <__modsi3+0x60>
    b924:	000f883a 	mov	r7,zero
    b928:	2005883a 	mov	r2,r4
    b92c:	28001216 	blt	r5,zero,b978 <__modsi3+0x58>
    b930:	2900162e 	bgeu	r5,r4,b98c <__modsi3+0x6c>
    b934:	01800804 	movi	r6,32
    b938:	00c00044 	movi	r3,1
    b93c:	00000106 	br	b944 <__modsi3+0x24>
    b940:	30000a26 	beq	r6,zero,b96c <__modsi3+0x4c>
    b944:	294b883a 	add	r5,r5,r5
    b948:	31bfffc4 	addi	r6,r6,-1
    b94c:	18c7883a 	add	r3,r3,r3
    b950:	293ffb36 	bltu	r5,r4,b940 <__alt_data_end+0x8000b940>
    b954:	18000526 	beq	r3,zero,b96c <__modsi3+0x4c>
    b958:	1806d07a 	srli	r3,r3,1
    b95c:	11400136 	bltu	r2,r5,b964 <__modsi3+0x44>
    b960:	1145c83a 	sub	r2,r2,r5
    b964:	280ad07a 	srli	r5,r5,1
    b968:	183ffb1e 	bne	r3,zero,b958 <__alt_data_end+0x8000b958>
    b96c:	38000126 	beq	r7,zero,b974 <__modsi3+0x54>
    b970:	0085c83a 	sub	r2,zero,r2
    b974:	f800283a 	ret
    b978:	014bc83a 	sub	r5,zero,r5
    b97c:	003fec06 	br	b930 <__alt_data_end+0x8000b930>
    b980:	0109c83a 	sub	r4,zero,r4
    b984:	01c00044 	movi	r7,1
    b988:	003fe706 	br	b928 <__alt_data_end+0x8000b928>
    b98c:	00c00044 	movi	r3,1
    b990:	003ff106 	br	b958 <__alt_data_end+0x8000b958>

0000b994 <__udivsi3>:
    b994:	200d883a 	mov	r6,r4
    b998:	2900152e 	bgeu	r5,r4,b9f0 <__udivsi3+0x5c>
    b99c:	28001416 	blt	r5,zero,b9f0 <__udivsi3+0x5c>
    b9a0:	00800804 	movi	r2,32
    b9a4:	00c00044 	movi	r3,1
    b9a8:	00000206 	br	b9b4 <__udivsi3+0x20>
    b9ac:	10000e26 	beq	r2,zero,b9e8 <__udivsi3+0x54>
    b9b0:	28000516 	blt	r5,zero,b9c8 <__udivsi3+0x34>
    b9b4:	294b883a 	add	r5,r5,r5
    b9b8:	10bfffc4 	addi	r2,r2,-1
    b9bc:	18c7883a 	add	r3,r3,r3
    b9c0:	293ffa36 	bltu	r5,r4,b9ac <__alt_data_end+0x8000b9ac>
    b9c4:	18000826 	beq	r3,zero,b9e8 <__udivsi3+0x54>
    b9c8:	0005883a 	mov	r2,zero
    b9cc:	31400236 	bltu	r6,r5,b9d8 <__udivsi3+0x44>
    b9d0:	314dc83a 	sub	r6,r6,r5
    b9d4:	10c4b03a 	or	r2,r2,r3
    b9d8:	1806d07a 	srli	r3,r3,1
    b9dc:	280ad07a 	srli	r5,r5,1
    b9e0:	183ffa1e 	bne	r3,zero,b9cc <__alt_data_end+0x8000b9cc>
    b9e4:	f800283a 	ret
    b9e8:	0005883a 	mov	r2,zero
    b9ec:	f800283a 	ret
    b9f0:	00c00044 	movi	r3,1
    b9f4:	003ff406 	br	b9c8 <__alt_data_end+0x8000b9c8>

0000b9f8 <__umodsi3>:
    b9f8:	2005883a 	mov	r2,r4
    b9fc:	2900122e 	bgeu	r5,r4,ba48 <__umodsi3+0x50>
    ba00:	28001116 	blt	r5,zero,ba48 <__umodsi3+0x50>
    ba04:	01800804 	movi	r6,32
    ba08:	00c00044 	movi	r3,1
    ba0c:	00000206 	br	ba18 <__umodsi3+0x20>
    ba10:	30000c26 	beq	r6,zero,ba44 <__umodsi3+0x4c>
    ba14:	28000516 	blt	r5,zero,ba2c <__umodsi3+0x34>
    ba18:	294b883a 	add	r5,r5,r5
    ba1c:	31bfffc4 	addi	r6,r6,-1
    ba20:	18c7883a 	add	r3,r3,r3
    ba24:	293ffa36 	bltu	r5,r4,ba10 <__alt_data_end+0x8000ba10>
    ba28:	18000626 	beq	r3,zero,ba44 <__umodsi3+0x4c>
    ba2c:	1806d07a 	srli	r3,r3,1
    ba30:	11400136 	bltu	r2,r5,ba38 <__umodsi3+0x40>
    ba34:	1145c83a 	sub	r2,r2,r5
    ba38:	280ad07a 	srli	r5,r5,1
    ba3c:	183ffb1e 	bne	r3,zero,ba2c <__alt_data_end+0x8000ba2c>
    ba40:	f800283a 	ret
    ba44:	f800283a 	ret
    ba48:	00c00044 	movi	r3,1
    ba4c:	003ff706 	br	ba2c <__alt_data_end+0x8000ba2c>

0000ba50 <__adddf3>:
    ba50:	02c00434 	movhi	r11,16
    ba54:	5affffc4 	addi	r11,r11,-1
    ba58:	2806d7fa 	srli	r3,r5,31
    ba5c:	2ad4703a 	and	r10,r5,r11
    ba60:	3ad2703a 	and	r9,r7,r11
    ba64:	3804d53a 	srli	r2,r7,20
    ba68:	3018d77a 	srli	r12,r6,29
    ba6c:	280ad53a 	srli	r5,r5,20
    ba70:	501490fa 	slli	r10,r10,3
    ba74:	2010d77a 	srli	r8,r4,29
    ba78:	481290fa 	slli	r9,r9,3
    ba7c:	380ed7fa 	srli	r7,r7,31
    ba80:	defffb04 	addi	sp,sp,-20
    ba84:	dc800215 	stw	r18,8(sp)
    ba88:	dc400115 	stw	r17,4(sp)
    ba8c:	dc000015 	stw	r16,0(sp)
    ba90:	dfc00415 	stw	ra,16(sp)
    ba94:	dcc00315 	stw	r19,12(sp)
    ba98:	1c803fcc 	andi	r18,r3,255
    ba9c:	2c01ffcc 	andi	r16,r5,2047
    baa0:	5210b03a 	or	r8,r10,r8
    baa4:	202290fa 	slli	r17,r4,3
    baa8:	1081ffcc 	andi	r2,r2,2047
    baac:	4b12b03a 	or	r9,r9,r12
    bab0:	300c90fa 	slli	r6,r6,3
    bab4:	91c07526 	beq	r18,r7,bc8c <__adddf3+0x23c>
    bab8:	8087c83a 	sub	r3,r16,r2
    babc:	00c0ab0e 	bge	zero,r3,bd6c <__adddf3+0x31c>
    bac0:	10002a1e 	bne	r2,zero,bb6c <__adddf3+0x11c>
    bac4:	4984b03a 	or	r2,r9,r6
    bac8:	1000961e 	bne	r2,zero,bd24 <__adddf3+0x2d4>
    bacc:	888001cc 	andi	r2,r17,7
    bad0:	10000726 	beq	r2,zero,baf0 <__adddf3+0xa0>
    bad4:	888003cc 	andi	r2,r17,15
    bad8:	00c00104 	movi	r3,4
    badc:	10c00426 	beq	r2,r3,baf0 <__adddf3+0xa0>
    bae0:	88c7883a 	add	r3,r17,r3
    bae4:	1c63803a 	cmpltu	r17,r3,r17
    bae8:	4451883a 	add	r8,r8,r17
    baec:	1823883a 	mov	r17,r3
    baf0:	4080202c 	andhi	r2,r8,128
    baf4:	10005926 	beq	r2,zero,bc5c <__adddf3+0x20c>
    baf8:	84000044 	addi	r16,r16,1
    bafc:	0081ffc4 	movi	r2,2047
    bb00:	8080ba26 	beq	r16,r2,bdec <__adddf3+0x39c>
    bb04:	00bfe034 	movhi	r2,65408
    bb08:	10bfffc4 	addi	r2,r2,-1
    bb0c:	4090703a 	and	r8,r8,r2
    bb10:	4004977a 	slli	r2,r8,29
    bb14:	4010927a 	slli	r8,r8,9
    bb18:	8822d0fa 	srli	r17,r17,3
    bb1c:	8401ffcc 	andi	r16,r16,2047
    bb20:	4010d33a 	srli	r8,r8,12
    bb24:	9007883a 	mov	r3,r18
    bb28:	1444b03a 	or	r2,r2,r17
    bb2c:	8401ffcc 	andi	r16,r16,2047
    bb30:	8020953a 	slli	r16,r16,20
    bb34:	18c03fcc 	andi	r3,r3,255
    bb38:	01000434 	movhi	r4,16
    bb3c:	213fffc4 	addi	r4,r4,-1
    bb40:	180697fa 	slli	r3,r3,31
    bb44:	4110703a 	and	r8,r8,r4
    bb48:	4410b03a 	or	r8,r8,r16
    bb4c:	40c6b03a 	or	r3,r8,r3
    bb50:	dfc00417 	ldw	ra,16(sp)
    bb54:	dcc00317 	ldw	r19,12(sp)
    bb58:	dc800217 	ldw	r18,8(sp)
    bb5c:	dc400117 	ldw	r17,4(sp)
    bb60:	dc000017 	ldw	r16,0(sp)
    bb64:	dec00504 	addi	sp,sp,20
    bb68:	f800283a 	ret
    bb6c:	0081ffc4 	movi	r2,2047
    bb70:	80bfd626 	beq	r16,r2,bacc <__alt_data_end+0x8000bacc>
    bb74:	4a402034 	orhi	r9,r9,128
    bb78:	00800e04 	movi	r2,56
    bb7c:	10c09f16 	blt	r2,r3,bdfc <__adddf3+0x3ac>
    bb80:	008007c4 	movi	r2,31
    bb84:	10c0c216 	blt	r2,r3,be90 <__adddf3+0x440>
    bb88:	00800804 	movi	r2,32
    bb8c:	10c5c83a 	sub	r2,r2,r3
    bb90:	488a983a 	sll	r5,r9,r2
    bb94:	30c8d83a 	srl	r4,r6,r3
    bb98:	3084983a 	sll	r2,r6,r2
    bb9c:	48c6d83a 	srl	r3,r9,r3
    bba0:	290cb03a 	or	r6,r5,r4
    bba4:	1004c03a 	cmpne	r2,r2,zero
    bba8:	308cb03a 	or	r6,r6,r2
    bbac:	898dc83a 	sub	r6,r17,r6
    bbb0:	89a3803a 	cmpltu	r17,r17,r6
    bbb4:	40d1c83a 	sub	r8,r8,r3
    bbb8:	4451c83a 	sub	r8,r8,r17
    bbbc:	3023883a 	mov	r17,r6
    bbc0:	4080202c 	andhi	r2,r8,128
    bbc4:	10002326 	beq	r2,zero,bc54 <__adddf3+0x204>
    bbc8:	04c02034 	movhi	r19,128
    bbcc:	9cffffc4 	addi	r19,r19,-1
    bbd0:	44e6703a 	and	r19,r8,r19
    bbd4:	98007626 	beq	r19,zero,bdb0 <__adddf3+0x360>
    bbd8:	9809883a 	mov	r4,r19
    bbdc:	000e0540 	call	e054 <__clzsi2>
    bbe0:	10fffe04 	addi	r3,r2,-8
    bbe4:	010007c4 	movi	r4,31
    bbe8:	20c07716 	blt	r4,r3,bdc8 <__adddf3+0x378>
    bbec:	00800804 	movi	r2,32
    bbf0:	10c5c83a 	sub	r2,r2,r3
    bbf4:	8884d83a 	srl	r2,r17,r2
    bbf8:	98d0983a 	sll	r8,r19,r3
    bbfc:	88e2983a 	sll	r17,r17,r3
    bc00:	1204b03a 	or	r2,r2,r8
    bc04:	1c007416 	blt	r3,r16,bdd8 <__adddf3+0x388>
    bc08:	1c21c83a 	sub	r16,r3,r16
    bc0c:	82000044 	addi	r8,r16,1
    bc10:	00c007c4 	movi	r3,31
    bc14:	1a009116 	blt	r3,r8,be5c <__adddf3+0x40c>
    bc18:	00c00804 	movi	r3,32
    bc1c:	1a07c83a 	sub	r3,r3,r8
    bc20:	8a08d83a 	srl	r4,r17,r8
    bc24:	88e2983a 	sll	r17,r17,r3
    bc28:	10c6983a 	sll	r3,r2,r3
    bc2c:	1210d83a 	srl	r8,r2,r8
    bc30:	8804c03a 	cmpne	r2,r17,zero
    bc34:	1906b03a 	or	r3,r3,r4
    bc38:	18a2b03a 	or	r17,r3,r2
    bc3c:	0021883a 	mov	r16,zero
    bc40:	003fa206 	br	bacc <__alt_data_end+0x8000bacc>
    bc44:	1890b03a 	or	r8,r3,r2
    bc48:	40017d26 	beq	r8,zero,c240 <__adddf3+0x7f0>
    bc4c:	1011883a 	mov	r8,r2
    bc50:	1823883a 	mov	r17,r3
    bc54:	888001cc 	andi	r2,r17,7
    bc58:	103f9e1e 	bne	r2,zero,bad4 <__alt_data_end+0x8000bad4>
    bc5c:	4004977a 	slli	r2,r8,29
    bc60:	8822d0fa 	srli	r17,r17,3
    bc64:	4010d0fa 	srli	r8,r8,3
    bc68:	9007883a 	mov	r3,r18
    bc6c:	1444b03a 	or	r2,r2,r17
    bc70:	0101ffc4 	movi	r4,2047
    bc74:	81002426 	beq	r16,r4,bd08 <__adddf3+0x2b8>
    bc78:	8120703a 	and	r16,r16,r4
    bc7c:	01000434 	movhi	r4,16
    bc80:	213fffc4 	addi	r4,r4,-1
    bc84:	4110703a 	and	r8,r8,r4
    bc88:	003fa806 	br	bb2c <__alt_data_end+0x8000bb2c>
    bc8c:	8089c83a 	sub	r4,r16,r2
    bc90:	01005e0e 	bge	zero,r4,be0c <__adddf3+0x3bc>
    bc94:	10002b26 	beq	r2,zero,bd44 <__adddf3+0x2f4>
    bc98:	0081ffc4 	movi	r2,2047
    bc9c:	80bf8b26 	beq	r16,r2,bacc <__alt_data_end+0x8000bacc>
    bca0:	4a402034 	orhi	r9,r9,128
    bca4:	00800e04 	movi	r2,56
    bca8:	1100a40e 	bge	r2,r4,bf3c <__adddf3+0x4ec>
    bcac:	498cb03a 	or	r6,r9,r6
    bcb0:	300ac03a 	cmpne	r5,r6,zero
    bcb4:	0013883a 	mov	r9,zero
    bcb8:	2c4b883a 	add	r5,r5,r17
    bcbc:	2c63803a 	cmpltu	r17,r5,r17
    bcc0:	4a11883a 	add	r8,r9,r8
    bcc4:	8a11883a 	add	r8,r17,r8
    bcc8:	2823883a 	mov	r17,r5
    bccc:	4080202c 	andhi	r2,r8,128
    bcd0:	103fe026 	beq	r2,zero,bc54 <__alt_data_end+0x8000bc54>
    bcd4:	84000044 	addi	r16,r16,1
    bcd8:	0081ffc4 	movi	r2,2047
    bcdc:	8080d226 	beq	r16,r2,c028 <__adddf3+0x5d8>
    bce0:	00bfe034 	movhi	r2,65408
    bce4:	10bfffc4 	addi	r2,r2,-1
    bce8:	4090703a 	and	r8,r8,r2
    bcec:	880ad07a 	srli	r5,r17,1
    bcf0:	400897fa 	slli	r4,r8,31
    bcf4:	88c0004c 	andi	r3,r17,1
    bcf8:	28e2b03a 	or	r17,r5,r3
    bcfc:	4010d07a 	srli	r8,r8,1
    bd00:	2462b03a 	or	r17,r4,r17
    bd04:	003f7106 	br	bacc <__alt_data_end+0x8000bacc>
    bd08:	4088b03a 	or	r4,r8,r2
    bd0c:	20014526 	beq	r4,zero,c224 <__adddf3+0x7d4>
    bd10:	01000434 	movhi	r4,16
    bd14:	42000234 	orhi	r8,r8,8
    bd18:	213fffc4 	addi	r4,r4,-1
    bd1c:	4110703a 	and	r8,r8,r4
    bd20:	003f8206 	br	bb2c <__alt_data_end+0x8000bb2c>
    bd24:	18ffffc4 	addi	r3,r3,-1
    bd28:	1800491e 	bne	r3,zero,be50 <__adddf3+0x400>
    bd2c:	898bc83a 	sub	r5,r17,r6
    bd30:	8963803a 	cmpltu	r17,r17,r5
    bd34:	4251c83a 	sub	r8,r8,r9
    bd38:	4451c83a 	sub	r8,r8,r17
    bd3c:	2823883a 	mov	r17,r5
    bd40:	003f9f06 	br	bbc0 <__alt_data_end+0x8000bbc0>
    bd44:	4984b03a 	or	r2,r9,r6
    bd48:	103f6026 	beq	r2,zero,bacc <__alt_data_end+0x8000bacc>
    bd4c:	213fffc4 	addi	r4,r4,-1
    bd50:	2000931e 	bne	r4,zero,bfa0 <__adddf3+0x550>
    bd54:	898d883a 	add	r6,r17,r6
    bd58:	3463803a 	cmpltu	r17,r6,r17
    bd5c:	4251883a 	add	r8,r8,r9
    bd60:	8a11883a 	add	r8,r17,r8
    bd64:	3023883a 	mov	r17,r6
    bd68:	003fd806 	br	bccc <__alt_data_end+0x8000bccc>
    bd6c:	1800541e 	bne	r3,zero,bec0 <__adddf3+0x470>
    bd70:	80800044 	addi	r2,r16,1
    bd74:	1081ffcc 	andi	r2,r2,2047
    bd78:	00c00044 	movi	r3,1
    bd7c:	1880a00e 	bge	r3,r2,c000 <__adddf3+0x5b0>
    bd80:	8989c83a 	sub	r4,r17,r6
    bd84:	8905803a 	cmpltu	r2,r17,r4
    bd88:	4267c83a 	sub	r19,r8,r9
    bd8c:	98a7c83a 	sub	r19,r19,r2
    bd90:	9880202c 	andhi	r2,r19,128
    bd94:	10006326 	beq	r2,zero,bf24 <__adddf3+0x4d4>
    bd98:	3463c83a 	sub	r17,r6,r17
    bd9c:	4a07c83a 	sub	r3,r9,r8
    bda0:	344d803a 	cmpltu	r6,r6,r17
    bda4:	19a7c83a 	sub	r19,r3,r6
    bda8:	3825883a 	mov	r18,r7
    bdac:	983f8a1e 	bne	r19,zero,bbd8 <__alt_data_end+0x8000bbd8>
    bdb0:	8809883a 	mov	r4,r17
    bdb4:	000e0540 	call	e054 <__clzsi2>
    bdb8:	10800804 	addi	r2,r2,32
    bdbc:	10fffe04 	addi	r3,r2,-8
    bdc0:	010007c4 	movi	r4,31
    bdc4:	20ff890e 	bge	r4,r3,bbec <__alt_data_end+0x8000bbec>
    bdc8:	10bff604 	addi	r2,r2,-40
    bdcc:	8884983a 	sll	r2,r17,r2
    bdd0:	0023883a 	mov	r17,zero
    bdd4:	1c3f8c0e 	bge	r3,r16,bc08 <__alt_data_end+0x8000bc08>
    bdd8:	023fe034 	movhi	r8,65408
    bddc:	423fffc4 	addi	r8,r8,-1
    bde0:	80e1c83a 	sub	r16,r16,r3
    bde4:	1210703a 	and	r8,r2,r8
    bde8:	003f3806 	br	bacc <__alt_data_end+0x8000bacc>
    bdec:	9007883a 	mov	r3,r18
    bdf0:	0011883a 	mov	r8,zero
    bdf4:	0005883a 	mov	r2,zero
    bdf8:	003f4c06 	br	bb2c <__alt_data_end+0x8000bb2c>
    bdfc:	498cb03a 	or	r6,r9,r6
    be00:	300cc03a 	cmpne	r6,r6,zero
    be04:	0007883a 	mov	r3,zero
    be08:	003f6806 	br	bbac <__alt_data_end+0x8000bbac>
    be0c:	20009c1e 	bne	r4,zero,c080 <__adddf3+0x630>
    be10:	80800044 	addi	r2,r16,1
    be14:	1141ffcc 	andi	r5,r2,2047
    be18:	01000044 	movi	r4,1
    be1c:	2140670e 	bge	r4,r5,bfbc <__adddf3+0x56c>
    be20:	0101ffc4 	movi	r4,2047
    be24:	11007f26 	beq	r2,r4,c024 <__adddf3+0x5d4>
    be28:	898d883a 	add	r6,r17,r6
    be2c:	4247883a 	add	r3,r8,r9
    be30:	3451803a 	cmpltu	r8,r6,r17
    be34:	40d1883a 	add	r8,r8,r3
    be38:	402297fa 	slli	r17,r8,31
    be3c:	300cd07a 	srli	r6,r6,1
    be40:	4010d07a 	srli	r8,r8,1
    be44:	1021883a 	mov	r16,r2
    be48:	89a2b03a 	or	r17,r17,r6
    be4c:	003f1f06 	br	bacc <__alt_data_end+0x8000bacc>
    be50:	0081ffc4 	movi	r2,2047
    be54:	80bf481e 	bne	r16,r2,bb78 <__alt_data_end+0x8000bb78>
    be58:	003f1c06 	br	bacc <__alt_data_end+0x8000bacc>
    be5c:	843ff844 	addi	r16,r16,-31
    be60:	01000804 	movi	r4,32
    be64:	1406d83a 	srl	r3,r2,r16
    be68:	41005026 	beq	r8,r4,bfac <__adddf3+0x55c>
    be6c:	01001004 	movi	r4,64
    be70:	2211c83a 	sub	r8,r4,r8
    be74:	1204983a 	sll	r2,r2,r8
    be78:	88a2b03a 	or	r17,r17,r2
    be7c:	8822c03a 	cmpne	r17,r17,zero
    be80:	1c62b03a 	or	r17,r3,r17
    be84:	0011883a 	mov	r8,zero
    be88:	0021883a 	mov	r16,zero
    be8c:	003f7106 	br	bc54 <__alt_data_end+0x8000bc54>
    be90:	193ff804 	addi	r4,r3,-32
    be94:	00800804 	movi	r2,32
    be98:	4908d83a 	srl	r4,r9,r4
    be9c:	18804526 	beq	r3,r2,bfb4 <__adddf3+0x564>
    bea0:	00801004 	movi	r2,64
    bea4:	10c5c83a 	sub	r2,r2,r3
    bea8:	4886983a 	sll	r3,r9,r2
    beac:	198cb03a 	or	r6,r3,r6
    beb0:	300cc03a 	cmpne	r6,r6,zero
    beb4:	218cb03a 	or	r6,r4,r6
    beb8:	0007883a 	mov	r3,zero
    bebc:	003f3b06 	br	bbac <__alt_data_end+0x8000bbac>
    bec0:	80002a26 	beq	r16,zero,bf6c <__adddf3+0x51c>
    bec4:	0101ffc4 	movi	r4,2047
    bec8:	11006826 	beq	r2,r4,c06c <__adddf3+0x61c>
    becc:	00c7c83a 	sub	r3,zero,r3
    bed0:	42002034 	orhi	r8,r8,128
    bed4:	01000e04 	movi	r4,56
    bed8:	20c07c16 	blt	r4,r3,c0cc <__adddf3+0x67c>
    bedc:	010007c4 	movi	r4,31
    bee0:	20c0da16 	blt	r4,r3,c24c <__adddf3+0x7fc>
    bee4:	01000804 	movi	r4,32
    bee8:	20c9c83a 	sub	r4,r4,r3
    beec:	4114983a 	sll	r10,r8,r4
    bef0:	88cad83a 	srl	r5,r17,r3
    bef4:	8908983a 	sll	r4,r17,r4
    bef8:	40c6d83a 	srl	r3,r8,r3
    befc:	5162b03a 	or	r17,r10,r5
    bf00:	2008c03a 	cmpne	r4,r4,zero
    bf04:	8922b03a 	or	r17,r17,r4
    bf08:	3463c83a 	sub	r17,r6,r17
    bf0c:	48c7c83a 	sub	r3,r9,r3
    bf10:	344d803a 	cmpltu	r6,r6,r17
    bf14:	1991c83a 	sub	r8,r3,r6
    bf18:	1021883a 	mov	r16,r2
    bf1c:	3825883a 	mov	r18,r7
    bf20:	003f2706 	br	bbc0 <__alt_data_end+0x8000bbc0>
    bf24:	24d0b03a 	or	r8,r4,r19
    bf28:	40001b1e 	bne	r8,zero,bf98 <__adddf3+0x548>
    bf2c:	0005883a 	mov	r2,zero
    bf30:	0007883a 	mov	r3,zero
    bf34:	0021883a 	mov	r16,zero
    bf38:	003f4d06 	br	bc70 <__alt_data_end+0x8000bc70>
    bf3c:	008007c4 	movi	r2,31
    bf40:	11003c16 	blt	r2,r4,c034 <__adddf3+0x5e4>
    bf44:	00800804 	movi	r2,32
    bf48:	1105c83a 	sub	r2,r2,r4
    bf4c:	488e983a 	sll	r7,r9,r2
    bf50:	310ad83a 	srl	r5,r6,r4
    bf54:	3084983a 	sll	r2,r6,r2
    bf58:	4912d83a 	srl	r9,r9,r4
    bf5c:	394ab03a 	or	r5,r7,r5
    bf60:	1004c03a 	cmpne	r2,r2,zero
    bf64:	288ab03a 	or	r5,r5,r2
    bf68:	003f5306 	br	bcb8 <__alt_data_end+0x8000bcb8>
    bf6c:	4448b03a 	or	r4,r8,r17
    bf70:	20003e26 	beq	r4,zero,c06c <__adddf3+0x61c>
    bf74:	00c6303a 	nor	r3,zero,r3
    bf78:	18003a1e 	bne	r3,zero,c064 <__adddf3+0x614>
    bf7c:	3463c83a 	sub	r17,r6,r17
    bf80:	4a07c83a 	sub	r3,r9,r8
    bf84:	344d803a 	cmpltu	r6,r6,r17
    bf88:	1991c83a 	sub	r8,r3,r6
    bf8c:	1021883a 	mov	r16,r2
    bf90:	3825883a 	mov	r18,r7
    bf94:	003f0a06 	br	bbc0 <__alt_data_end+0x8000bbc0>
    bf98:	2023883a 	mov	r17,r4
    bf9c:	003f0d06 	br	bbd4 <__alt_data_end+0x8000bbd4>
    bfa0:	0081ffc4 	movi	r2,2047
    bfa4:	80bf3f1e 	bne	r16,r2,bca4 <__alt_data_end+0x8000bca4>
    bfa8:	003ec806 	br	bacc <__alt_data_end+0x8000bacc>
    bfac:	0005883a 	mov	r2,zero
    bfb0:	003fb106 	br	be78 <__alt_data_end+0x8000be78>
    bfb4:	0007883a 	mov	r3,zero
    bfb8:	003fbc06 	br	beac <__alt_data_end+0x8000beac>
    bfbc:	4444b03a 	or	r2,r8,r17
    bfc0:	8000871e 	bne	r16,zero,c1e0 <__adddf3+0x790>
    bfc4:	1000ba26 	beq	r2,zero,c2b0 <__adddf3+0x860>
    bfc8:	4984b03a 	or	r2,r9,r6
    bfcc:	103ebf26 	beq	r2,zero,bacc <__alt_data_end+0x8000bacc>
    bfd0:	8985883a 	add	r2,r17,r6
    bfd4:	4247883a 	add	r3,r8,r9
    bfd8:	1451803a 	cmpltu	r8,r2,r17
    bfdc:	40d1883a 	add	r8,r8,r3
    bfe0:	40c0202c 	andhi	r3,r8,128
    bfe4:	1023883a 	mov	r17,r2
    bfe8:	183f1a26 	beq	r3,zero,bc54 <__alt_data_end+0x8000bc54>
    bfec:	00bfe034 	movhi	r2,65408
    bff0:	10bfffc4 	addi	r2,r2,-1
    bff4:	2021883a 	mov	r16,r4
    bff8:	4090703a 	and	r8,r8,r2
    bffc:	003eb306 	br	bacc <__alt_data_end+0x8000bacc>
    c000:	4444b03a 	or	r2,r8,r17
    c004:	8000291e 	bne	r16,zero,c0ac <__adddf3+0x65c>
    c008:	10004b1e 	bne	r2,zero,c138 <__adddf3+0x6e8>
    c00c:	4990b03a 	or	r8,r9,r6
    c010:	40008b26 	beq	r8,zero,c240 <__adddf3+0x7f0>
    c014:	4811883a 	mov	r8,r9
    c018:	3023883a 	mov	r17,r6
    c01c:	3825883a 	mov	r18,r7
    c020:	003eaa06 	br	bacc <__alt_data_end+0x8000bacc>
    c024:	1021883a 	mov	r16,r2
    c028:	0011883a 	mov	r8,zero
    c02c:	0005883a 	mov	r2,zero
    c030:	003f0f06 	br	bc70 <__alt_data_end+0x8000bc70>
    c034:	217ff804 	addi	r5,r4,-32
    c038:	00800804 	movi	r2,32
    c03c:	494ad83a 	srl	r5,r9,r5
    c040:	20807d26 	beq	r4,r2,c238 <__adddf3+0x7e8>
    c044:	00801004 	movi	r2,64
    c048:	1109c83a 	sub	r4,r2,r4
    c04c:	4912983a 	sll	r9,r9,r4
    c050:	498cb03a 	or	r6,r9,r6
    c054:	300cc03a 	cmpne	r6,r6,zero
    c058:	298ab03a 	or	r5,r5,r6
    c05c:	0013883a 	mov	r9,zero
    c060:	003f1506 	br	bcb8 <__alt_data_end+0x8000bcb8>
    c064:	0101ffc4 	movi	r4,2047
    c068:	113f9a1e 	bne	r2,r4,bed4 <__alt_data_end+0x8000bed4>
    c06c:	4811883a 	mov	r8,r9
    c070:	3023883a 	mov	r17,r6
    c074:	1021883a 	mov	r16,r2
    c078:	3825883a 	mov	r18,r7
    c07c:	003e9306 	br	bacc <__alt_data_end+0x8000bacc>
    c080:	8000161e 	bne	r16,zero,c0dc <__adddf3+0x68c>
    c084:	444ab03a 	or	r5,r8,r17
    c088:	28005126 	beq	r5,zero,c1d0 <__adddf3+0x780>
    c08c:	0108303a 	nor	r4,zero,r4
    c090:	20004d1e 	bne	r4,zero,c1c8 <__adddf3+0x778>
    c094:	89a3883a 	add	r17,r17,r6
    c098:	4253883a 	add	r9,r8,r9
    c09c:	898d803a 	cmpltu	r6,r17,r6
    c0a0:	3251883a 	add	r8,r6,r9
    c0a4:	1021883a 	mov	r16,r2
    c0a8:	003f0806 	br	bccc <__alt_data_end+0x8000bccc>
    c0ac:	1000301e 	bne	r2,zero,c170 <__adddf3+0x720>
    c0b0:	4984b03a 	or	r2,r9,r6
    c0b4:	10007126 	beq	r2,zero,c27c <__adddf3+0x82c>
    c0b8:	4811883a 	mov	r8,r9
    c0bc:	3023883a 	mov	r17,r6
    c0c0:	3825883a 	mov	r18,r7
    c0c4:	0401ffc4 	movi	r16,2047
    c0c8:	003e8006 	br	bacc <__alt_data_end+0x8000bacc>
    c0cc:	4462b03a 	or	r17,r8,r17
    c0d0:	8822c03a 	cmpne	r17,r17,zero
    c0d4:	0007883a 	mov	r3,zero
    c0d8:	003f8b06 	br	bf08 <__alt_data_end+0x8000bf08>
    c0dc:	0141ffc4 	movi	r5,2047
    c0e0:	11403b26 	beq	r2,r5,c1d0 <__adddf3+0x780>
    c0e4:	0109c83a 	sub	r4,zero,r4
    c0e8:	42002034 	orhi	r8,r8,128
    c0ec:	01400e04 	movi	r5,56
    c0f0:	29006716 	blt	r5,r4,c290 <__adddf3+0x840>
    c0f4:	014007c4 	movi	r5,31
    c0f8:	29007016 	blt	r5,r4,c2bc <__adddf3+0x86c>
    c0fc:	01400804 	movi	r5,32
    c100:	290bc83a 	sub	r5,r5,r4
    c104:	4154983a 	sll	r10,r8,r5
    c108:	890ed83a 	srl	r7,r17,r4
    c10c:	894a983a 	sll	r5,r17,r5
    c110:	4108d83a 	srl	r4,r8,r4
    c114:	51e2b03a 	or	r17,r10,r7
    c118:	280ac03a 	cmpne	r5,r5,zero
    c11c:	8962b03a 	or	r17,r17,r5
    c120:	89a3883a 	add	r17,r17,r6
    c124:	2253883a 	add	r9,r4,r9
    c128:	898d803a 	cmpltu	r6,r17,r6
    c12c:	3251883a 	add	r8,r6,r9
    c130:	1021883a 	mov	r16,r2
    c134:	003ee506 	br	bccc <__alt_data_end+0x8000bccc>
    c138:	4984b03a 	or	r2,r9,r6
    c13c:	103e6326 	beq	r2,zero,bacc <__alt_data_end+0x8000bacc>
    c140:	8987c83a 	sub	r3,r17,r6
    c144:	88c9803a 	cmpltu	r4,r17,r3
    c148:	4245c83a 	sub	r2,r8,r9
    c14c:	1105c83a 	sub	r2,r2,r4
    c150:	1100202c 	andhi	r4,r2,128
    c154:	203ebb26 	beq	r4,zero,bc44 <__alt_data_end+0x8000bc44>
    c158:	3463c83a 	sub	r17,r6,r17
    c15c:	4a07c83a 	sub	r3,r9,r8
    c160:	344d803a 	cmpltu	r6,r6,r17
    c164:	1991c83a 	sub	r8,r3,r6
    c168:	3825883a 	mov	r18,r7
    c16c:	003e5706 	br	bacc <__alt_data_end+0x8000bacc>
    c170:	4984b03a 	or	r2,r9,r6
    c174:	10002e26 	beq	r2,zero,c230 <__adddf3+0x7e0>
    c178:	4004d0fa 	srli	r2,r8,3
    c17c:	8822d0fa 	srli	r17,r17,3
    c180:	4010977a 	slli	r8,r8,29
    c184:	10c0022c 	andhi	r3,r2,8
    c188:	4462b03a 	or	r17,r8,r17
    c18c:	18000826 	beq	r3,zero,c1b0 <__adddf3+0x760>
    c190:	4808d0fa 	srli	r4,r9,3
    c194:	20c0022c 	andhi	r3,r4,8
    c198:	1800051e 	bne	r3,zero,c1b0 <__adddf3+0x760>
    c19c:	300cd0fa 	srli	r6,r6,3
    c1a0:	4806977a 	slli	r3,r9,29
    c1a4:	2005883a 	mov	r2,r4
    c1a8:	3825883a 	mov	r18,r7
    c1ac:	19a2b03a 	or	r17,r3,r6
    c1b0:	8810d77a 	srli	r8,r17,29
    c1b4:	100490fa 	slli	r2,r2,3
    c1b8:	882290fa 	slli	r17,r17,3
    c1bc:	0401ffc4 	movi	r16,2047
    c1c0:	4090b03a 	or	r8,r8,r2
    c1c4:	003e4106 	br	bacc <__alt_data_end+0x8000bacc>
    c1c8:	0141ffc4 	movi	r5,2047
    c1cc:	117fc71e 	bne	r2,r5,c0ec <__alt_data_end+0x8000c0ec>
    c1d0:	4811883a 	mov	r8,r9
    c1d4:	3023883a 	mov	r17,r6
    c1d8:	1021883a 	mov	r16,r2
    c1dc:	003e3b06 	br	bacc <__alt_data_end+0x8000bacc>
    c1e0:	10002f26 	beq	r2,zero,c2a0 <__adddf3+0x850>
    c1e4:	4984b03a 	or	r2,r9,r6
    c1e8:	10001126 	beq	r2,zero,c230 <__adddf3+0x7e0>
    c1ec:	4004d0fa 	srli	r2,r8,3
    c1f0:	8822d0fa 	srli	r17,r17,3
    c1f4:	4010977a 	slli	r8,r8,29
    c1f8:	10c0022c 	andhi	r3,r2,8
    c1fc:	4462b03a 	or	r17,r8,r17
    c200:	183feb26 	beq	r3,zero,c1b0 <__alt_data_end+0x8000c1b0>
    c204:	4808d0fa 	srli	r4,r9,3
    c208:	20c0022c 	andhi	r3,r4,8
    c20c:	183fe81e 	bne	r3,zero,c1b0 <__alt_data_end+0x8000c1b0>
    c210:	300cd0fa 	srli	r6,r6,3
    c214:	4806977a 	slli	r3,r9,29
    c218:	2005883a 	mov	r2,r4
    c21c:	19a2b03a 	or	r17,r3,r6
    c220:	003fe306 	br	c1b0 <__alt_data_end+0x8000c1b0>
    c224:	0011883a 	mov	r8,zero
    c228:	0005883a 	mov	r2,zero
    c22c:	003e3f06 	br	bb2c <__alt_data_end+0x8000bb2c>
    c230:	0401ffc4 	movi	r16,2047
    c234:	003e2506 	br	bacc <__alt_data_end+0x8000bacc>
    c238:	0013883a 	mov	r9,zero
    c23c:	003f8406 	br	c050 <__alt_data_end+0x8000c050>
    c240:	0005883a 	mov	r2,zero
    c244:	0007883a 	mov	r3,zero
    c248:	003e8906 	br	bc70 <__alt_data_end+0x8000bc70>
    c24c:	197ff804 	addi	r5,r3,-32
    c250:	01000804 	movi	r4,32
    c254:	414ad83a 	srl	r5,r8,r5
    c258:	19002426 	beq	r3,r4,c2ec <__adddf3+0x89c>
    c25c:	01001004 	movi	r4,64
    c260:	20c7c83a 	sub	r3,r4,r3
    c264:	40c6983a 	sll	r3,r8,r3
    c268:	1c46b03a 	or	r3,r3,r17
    c26c:	1806c03a 	cmpne	r3,r3,zero
    c270:	28e2b03a 	or	r17,r5,r3
    c274:	0007883a 	mov	r3,zero
    c278:	003f2306 	br	bf08 <__alt_data_end+0x8000bf08>
    c27c:	0007883a 	mov	r3,zero
    c280:	5811883a 	mov	r8,r11
    c284:	00bfffc4 	movi	r2,-1
    c288:	0401ffc4 	movi	r16,2047
    c28c:	003e7806 	br	bc70 <__alt_data_end+0x8000bc70>
    c290:	4462b03a 	or	r17,r8,r17
    c294:	8822c03a 	cmpne	r17,r17,zero
    c298:	0009883a 	mov	r4,zero
    c29c:	003fa006 	br	c120 <__alt_data_end+0x8000c120>
    c2a0:	4811883a 	mov	r8,r9
    c2a4:	3023883a 	mov	r17,r6
    c2a8:	0401ffc4 	movi	r16,2047
    c2ac:	003e0706 	br	bacc <__alt_data_end+0x8000bacc>
    c2b0:	4811883a 	mov	r8,r9
    c2b4:	3023883a 	mov	r17,r6
    c2b8:	003e0406 	br	bacc <__alt_data_end+0x8000bacc>
    c2bc:	21fff804 	addi	r7,r4,-32
    c2c0:	01400804 	movi	r5,32
    c2c4:	41ced83a 	srl	r7,r8,r7
    c2c8:	21400a26 	beq	r4,r5,c2f4 <__adddf3+0x8a4>
    c2cc:	01401004 	movi	r5,64
    c2d0:	2909c83a 	sub	r4,r5,r4
    c2d4:	4108983a 	sll	r4,r8,r4
    c2d8:	2448b03a 	or	r4,r4,r17
    c2dc:	2008c03a 	cmpne	r4,r4,zero
    c2e0:	3922b03a 	or	r17,r7,r4
    c2e4:	0009883a 	mov	r4,zero
    c2e8:	003f8d06 	br	c120 <__alt_data_end+0x8000c120>
    c2ec:	0007883a 	mov	r3,zero
    c2f0:	003fdd06 	br	c268 <__alt_data_end+0x8000c268>
    c2f4:	0009883a 	mov	r4,zero
    c2f8:	003ff706 	br	c2d8 <__alt_data_end+0x8000c2d8>

0000c2fc <__divdf3>:
    c2fc:	defff204 	addi	sp,sp,-56
    c300:	dd400915 	stw	r21,36(sp)
    c304:	282ad53a 	srli	r21,r5,20
    c308:	dd000815 	stw	r20,32(sp)
    c30c:	2828d7fa 	srli	r20,r5,31
    c310:	dc000415 	stw	r16,16(sp)
    c314:	04000434 	movhi	r16,16
    c318:	df000c15 	stw	fp,48(sp)
    c31c:	843fffc4 	addi	r16,r16,-1
    c320:	dfc00d15 	stw	ra,52(sp)
    c324:	ddc00b15 	stw	r23,44(sp)
    c328:	dd800a15 	stw	r22,40(sp)
    c32c:	dcc00715 	stw	r19,28(sp)
    c330:	dc800615 	stw	r18,24(sp)
    c334:	dc400515 	stw	r17,20(sp)
    c338:	ad41ffcc 	andi	r21,r21,2047
    c33c:	2c20703a 	and	r16,r5,r16
    c340:	a7003fcc 	andi	fp,r20,255
    c344:	a8006126 	beq	r21,zero,c4cc <__divdf3+0x1d0>
    c348:	0081ffc4 	movi	r2,2047
    c34c:	2025883a 	mov	r18,r4
    c350:	a8803726 	beq	r21,r2,c430 <__divdf3+0x134>
    c354:	80800434 	orhi	r2,r16,16
    c358:	100490fa 	slli	r2,r2,3
    c35c:	2020d77a 	srli	r16,r4,29
    c360:	202490fa 	slli	r18,r4,3
    c364:	ad7f0044 	addi	r21,r21,-1023
    c368:	80a0b03a 	or	r16,r16,r2
    c36c:	0027883a 	mov	r19,zero
    c370:	0013883a 	mov	r9,zero
    c374:	3804d53a 	srli	r2,r7,20
    c378:	382cd7fa 	srli	r22,r7,31
    c37c:	04400434 	movhi	r17,16
    c380:	8c7fffc4 	addi	r17,r17,-1
    c384:	1081ffcc 	andi	r2,r2,2047
    c388:	3011883a 	mov	r8,r6
    c38c:	3c62703a 	and	r17,r7,r17
    c390:	b5c03fcc 	andi	r23,r22,255
    c394:	10006c26 	beq	r2,zero,c548 <__divdf3+0x24c>
    c398:	00c1ffc4 	movi	r3,2047
    c39c:	10c06426 	beq	r2,r3,c530 <__divdf3+0x234>
    c3a0:	88c00434 	orhi	r3,r17,16
    c3a4:	180690fa 	slli	r3,r3,3
    c3a8:	3022d77a 	srli	r17,r6,29
    c3ac:	301090fa 	slli	r8,r6,3
    c3b0:	10bf0044 	addi	r2,r2,-1023
    c3b4:	88e2b03a 	or	r17,r17,r3
    c3b8:	000f883a 	mov	r7,zero
    c3bc:	a58cf03a 	xor	r6,r20,r22
    c3c0:	3cc8b03a 	or	r4,r7,r19
    c3c4:	a8abc83a 	sub	r21,r21,r2
    c3c8:	008003c4 	movi	r2,15
    c3cc:	3007883a 	mov	r3,r6
    c3d0:	34c03fcc 	andi	r19,r6,255
    c3d4:	11009036 	bltu	r2,r4,c618 <__divdf3+0x31c>
    c3d8:	200890ba 	slli	r4,r4,2
    c3dc:	00800074 	movhi	r2,1
    c3e0:	10b0fc04 	addi	r2,r2,-15376
    c3e4:	2089883a 	add	r4,r4,r2
    c3e8:	20800017 	ldw	r2,0(r4)
    c3ec:	1000683a 	jmp	r2
    c3f0:	0000c618 	cmpnei	zero,zero,792
    c3f4:	0000c468 	cmpgeui	zero,zero,785
    c3f8:	0000c608 	cmpgei	zero,zero,792
    c3fc:	0000c45c 	xori	zero,zero,785
    c400:	0000c608 	cmpgei	zero,zero,792
    c404:	0000c5dc 	xori	zero,zero,791
    c408:	0000c608 	cmpgei	zero,zero,792
    c40c:	0000c45c 	xori	zero,zero,785
    c410:	0000c468 	cmpgeui	zero,zero,785
    c414:	0000c468 	cmpgeui	zero,zero,785
    c418:	0000c5dc 	xori	zero,zero,791
    c41c:	0000c45c 	xori	zero,zero,785
    c420:	0000c44c 	andi	zero,zero,785
    c424:	0000c44c 	andi	zero,zero,785
    c428:	0000c44c 	andi	zero,zero,785
    c42c:	0000c8fc 	xorhi	zero,zero,803
    c430:	2404b03a 	or	r2,r4,r16
    c434:	1000661e 	bne	r2,zero,c5d0 <__divdf3+0x2d4>
    c438:	04c00204 	movi	r19,8
    c43c:	0021883a 	mov	r16,zero
    c440:	0025883a 	mov	r18,zero
    c444:	02400084 	movi	r9,2
    c448:	003fca06 	br	c374 <__alt_data_end+0x8000c374>
    c44c:	8023883a 	mov	r17,r16
    c450:	9011883a 	mov	r8,r18
    c454:	e02f883a 	mov	r23,fp
    c458:	480f883a 	mov	r7,r9
    c45c:	00800084 	movi	r2,2
    c460:	3881311e 	bne	r7,r2,c928 <__divdf3+0x62c>
    c464:	b827883a 	mov	r19,r23
    c468:	98c0004c 	andi	r3,r19,1
    c46c:	0081ffc4 	movi	r2,2047
    c470:	000b883a 	mov	r5,zero
    c474:	0025883a 	mov	r18,zero
    c478:	1004953a 	slli	r2,r2,20
    c47c:	18c03fcc 	andi	r3,r3,255
    c480:	04400434 	movhi	r17,16
    c484:	8c7fffc4 	addi	r17,r17,-1
    c488:	180697fa 	slli	r3,r3,31
    c48c:	2c4a703a 	and	r5,r5,r17
    c490:	288ab03a 	or	r5,r5,r2
    c494:	28c6b03a 	or	r3,r5,r3
    c498:	9005883a 	mov	r2,r18
    c49c:	dfc00d17 	ldw	ra,52(sp)
    c4a0:	df000c17 	ldw	fp,48(sp)
    c4a4:	ddc00b17 	ldw	r23,44(sp)
    c4a8:	dd800a17 	ldw	r22,40(sp)
    c4ac:	dd400917 	ldw	r21,36(sp)
    c4b0:	dd000817 	ldw	r20,32(sp)
    c4b4:	dcc00717 	ldw	r19,28(sp)
    c4b8:	dc800617 	ldw	r18,24(sp)
    c4bc:	dc400517 	ldw	r17,20(sp)
    c4c0:	dc000417 	ldw	r16,16(sp)
    c4c4:	dec00e04 	addi	sp,sp,56
    c4c8:	f800283a 	ret
    c4cc:	2404b03a 	or	r2,r4,r16
    c4d0:	2027883a 	mov	r19,r4
    c4d4:	10003926 	beq	r2,zero,c5bc <__divdf3+0x2c0>
    c4d8:	80012e26 	beq	r16,zero,c994 <__divdf3+0x698>
    c4dc:	8009883a 	mov	r4,r16
    c4e0:	d9800315 	stw	r6,12(sp)
    c4e4:	d9c00215 	stw	r7,8(sp)
    c4e8:	000e0540 	call	e054 <__clzsi2>
    c4ec:	d9800317 	ldw	r6,12(sp)
    c4f0:	d9c00217 	ldw	r7,8(sp)
    c4f4:	113ffd44 	addi	r4,r2,-11
    c4f8:	00c00704 	movi	r3,28
    c4fc:	19012116 	blt	r3,r4,c984 <__divdf3+0x688>
    c500:	00c00744 	movi	r3,29
    c504:	147ffe04 	addi	r17,r2,-8
    c508:	1907c83a 	sub	r3,r3,r4
    c50c:	8460983a 	sll	r16,r16,r17
    c510:	98c6d83a 	srl	r3,r19,r3
    c514:	9c64983a 	sll	r18,r19,r17
    c518:	1c20b03a 	or	r16,r3,r16
    c51c:	1080fcc4 	addi	r2,r2,1011
    c520:	00abc83a 	sub	r21,zero,r2
    c524:	0027883a 	mov	r19,zero
    c528:	0013883a 	mov	r9,zero
    c52c:	003f9106 	br	c374 <__alt_data_end+0x8000c374>
    c530:	3446b03a 	or	r3,r6,r17
    c534:	18001f1e 	bne	r3,zero,c5b4 <__divdf3+0x2b8>
    c538:	0023883a 	mov	r17,zero
    c53c:	0011883a 	mov	r8,zero
    c540:	01c00084 	movi	r7,2
    c544:	003f9d06 	br	c3bc <__alt_data_end+0x8000c3bc>
    c548:	3446b03a 	or	r3,r6,r17
    c54c:	18001526 	beq	r3,zero,c5a4 <__divdf3+0x2a8>
    c550:	88011b26 	beq	r17,zero,c9c0 <__divdf3+0x6c4>
    c554:	8809883a 	mov	r4,r17
    c558:	d9800315 	stw	r6,12(sp)
    c55c:	da400115 	stw	r9,4(sp)
    c560:	000e0540 	call	e054 <__clzsi2>
    c564:	d9800317 	ldw	r6,12(sp)
    c568:	da400117 	ldw	r9,4(sp)
    c56c:	113ffd44 	addi	r4,r2,-11
    c570:	00c00704 	movi	r3,28
    c574:	19010e16 	blt	r3,r4,c9b0 <__divdf3+0x6b4>
    c578:	00c00744 	movi	r3,29
    c57c:	123ffe04 	addi	r8,r2,-8
    c580:	1907c83a 	sub	r3,r3,r4
    c584:	8a22983a 	sll	r17,r17,r8
    c588:	30c6d83a 	srl	r3,r6,r3
    c58c:	3210983a 	sll	r8,r6,r8
    c590:	1c62b03a 	or	r17,r3,r17
    c594:	1080fcc4 	addi	r2,r2,1011
    c598:	0085c83a 	sub	r2,zero,r2
    c59c:	000f883a 	mov	r7,zero
    c5a0:	003f8606 	br	c3bc <__alt_data_end+0x8000c3bc>
    c5a4:	0023883a 	mov	r17,zero
    c5a8:	0011883a 	mov	r8,zero
    c5ac:	01c00044 	movi	r7,1
    c5b0:	003f8206 	br	c3bc <__alt_data_end+0x8000c3bc>
    c5b4:	01c000c4 	movi	r7,3
    c5b8:	003f8006 	br	c3bc <__alt_data_end+0x8000c3bc>
    c5bc:	04c00104 	movi	r19,4
    c5c0:	0021883a 	mov	r16,zero
    c5c4:	0025883a 	mov	r18,zero
    c5c8:	02400044 	movi	r9,1
    c5cc:	003f6906 	br	c374 <__alt_data_end+0x8000c374>
    c5d0:	04c00304 	movi	r19,12
    c5d4:	024000c4 	movi	r9,3
    c5d8:	003f6606 	br	c374 <__alt_data_end+0x8000c374>
    c5dc:	01400434 	movhi	r5,16
    c5e0:	0007883a 	mov	r3,zero
    c5e4:	297fffc4 	addi	r5,r5,-1
    c5e8:	04bfffc4 	movi	r18,-1
    c5ec:	0081ffc4 	movi	r2,2047
    c5f0:	003fa106 	br	c478 <__alt_data_end+0x8000c478>
    c5f4:	00c00044 	movi	r3,1
    c5f8:	1887c83a 	sub	r3,r3,r2
    c5fc:	01000e04 	movi	r4,56
    c600:	20c1210e 	bge	r4,r3,ca88 <__divdf3+0x78c>
    c604:	98c0004c 	andi	r3,r19,1
    c608:	0005883a 	mov	r2,zero
    c60c:	000b883a 	mov	r5,zero
    c610:	0025883a 	mov	r18,zero
    c614:	003f9806 	br	c478 <__alt_data_end+0x8000c478>
    c618:	8c00fd36 	bltu	r17,r16,ca10 <__divdf3+0x714>
    c61c:	8440fb26 	beq	r16,r17,ca0c <__divdf3+0x710>
    c620:	8007883a 	mov	r3,r16
    c624:	ad7fffc4 	addi	r21,r21,-1
    c628:	0021883a 	mov	r16,zero
    c62c:	4004d63a 	srli	r2,r8,24
    c630:	8822923a 	slli	r17,r17,8
    c634:	1809883a 	mov	r4,r3
    c638:	402c923a 	slli	r22,r8,8
    c63c:	88b8b03a 	or	fp,r17,r2
    c640:	e028d43a 	srli	r20,fp,16
    c644:	d8c00015 	stw	r3,0(sp)
    c648:	e5ffffcc 	andi	r23,fp,65535
    c64c:	a00b883a 	mov	r5,r20
    c650:	000b9940 	call	b994 <__udivsi3>
    c654:	d8c00017 	ldw	r3,0(sp)
    c658:	a00b883a 	mov	r5,r20
    c65c:	d8800315 	stw	r2,12(sp)
    c660:	1809883a 	mov	r4,r3
    c664:	000b9f80 	call	b9f8 <__umodsi3>
    c668:	d9800317 	ldw	r6,12(sp)
    c66c:	1006943a 	slli	r3,r2,16
    c670:	9004d43a 	srli	r2,r18,16
    c674:	b9a3383a 	mul	r17,r23,r6
    c678:	10c4b03a 	or	r2,r2,r3
    c67c:	1440062e 	bgeu	r2,r17,c698 <__divdf3+0x39c>
    c680:	1705883a 	add	r2,r2,fp
    c684:	30ffffc4 	addi	r3,r6,-1
    c688:	1700ee36 	bltu	r2,fp,ca44 <__divdf3+0x748>
    c68c:	1440ed2e 	bgeu	r2,r17,ca44 <__divdf3+0x748>
    c690:	31bfff84 	addi	r6,r6,-2
    c694:	1705883a 	add	r2,r2,fp
    c698:	1463c83a 	sub	r17,r2,r17
    c69c:	a00b883a 	mov	r5,r20
    c6a0:	8809883a 	mov	r4,r17
    c6a4:	d9800315 	stw	r6,12(sp)
    c6a8:	000b9940 	call	b994 <__udivsi3>
    c6ac:	a00b883a 	mov	r5,r20
    c6b0:	8809883a 	mov	r4,r17
    c6b4:	d8800215 	stw	r2,8(sp)
    c6b8:	000b9f80 	call	b9f8 <__umodsi3>
    c6bc:	d9c00217 	ldw	r7,8(sp)
    c6c0:	1004943a 	slli	r2,r2,16
    c6c4:	94bfffcc 	andi	r18,r18,65535
    c6c8:	b9d1383a 	mul	r8,r23,r7
    c6cc:	90a4b03a 	or	r18,r18,r2
    c6d0:	d9800317 	ldw	r6,12(sp)
    c6d4:	9200062e 	bgeu	r18,r8,c6f0 <__divdf3+0x3f4>
    c6d8:	9725883a 	add	r18,r18,fp
    c6dc:	38bfffc4 	addi	r2,r7,-1
    c6e0:	9700d636 	bltu	r18,fp,ca3c <__divdf3+0x740>
    c6e4:	9200d52e 	bgeu	r18,r8,ca3c <__divdf3+0x740>
    c6e8:	39ffff84 	addi	r7,r7,-2
    c6ec:	9725883a 	add	r18,r18,fp
    c6f0:	3004943a 	slli	r2,r6,16
    c6f4:	b012d43a 	srli	r9,r22,16
    c6f8:	b1bfffcc 	andi	r6,r22,65535
    c6fc:	11e2b03a 	or	r17,r2,r7
    c700:	8806d43a 	srli	r3,r17,16
    c704:	893fffcc 	andi	r4,r17,65535
    c708:	218b383a 	mul	r5,r4,r6
    c70c:	30c5383a 	mul	r2,r6,r3
    c710:	2249383a 	mul	r4,r4,r9
    c714:	280ed43a 	srli	r7,r5,16
    c718:	9225c83a 	sub	r18,r18,r8
    c71c:	2089883a 	add	r4,r4,r2
    c720:	3909883a 	add	r4,r7,r4
    c724:	1a47383a 	mul	r3,r3,r9
    c728:	2080022e 	bgeu	r4,r2,c734 <__divdf3+0x438>
    c72c:	00800074 	movhi	r2,1
    c730:	1887883a 	add	r3,r3,r2
    c734:	2004d43a 	srli	r2,r4,16
    c738:	2008943a 	slli	r4,r4,16
    c73c:	297fffcc 	andi	r5,r5,65535
    c740:	10c7883a 	add	r3,r2,r3
    c744:	2149883a 	add	r4,r4,r5
    c748:	90c0a536 	bltu	r18,r3,c9e0 <__divdf3+0x6e4>
    c74c:	90c0bf26 	beq	r18,r3,ca4c <__divdf3+0x750>
    c750:	90c7c83a 	sub	r3,r18,r3
    c754:	810fc83a 	sub	r7,r16,r4
    c758:	81e5803a 	cmpltu	r18,r16,r7
    c75c:	1ca5c83a 	sub	r18,r3,r18
    c760:	e480c126 	beq	fp,r18,ca68 <__divdf3+0x76c>
    c764:	a00b883a 	mov	r5,r20
    c768:	9009883a 	mov	r4,r18
    c76c:	d9800315 	stw	r6,12(sp)
    c770:	d9c00215 	stw	r7,8(sp)
    c774:	da400115 	stw	r9,4(sp)
    c778:	000b9940 	call	b994 <__udivsi3>
    c77c:	a00b883a 	mov	r5,r20
    c780:	9009883a 	mov	r4,r18
    c784:	d8800015 	stw	r2,0(sp)
    c788:	000b9f80 	call	b9f8 <__umodsi3>
    c78c:	d9c00217 	ldw	r7,8(sp)
    c790:	da000017 	ldw	r8,0(sp)
    c794:	1006943a 	slli	r3,r2,16
    c798:	3804d43a 	srli	r2,r7,16
    c79c:	ba21383a 	mul	r16,r23,r8
    c7a0:	d9800317 	ldw	r6,12(sp)
    c7a4:	10c4b03a 	or	r2,r2,r3
    c7a8:	da400117 	ldw	r9,4(sp)
    c7ac:	1400062e 	bgeu	r2,r16,c7c8 <__divdf3+0x4cc>
    c7b0:	1705883a 	add	r2,r2,fp
    c7b4:	40ffffc4 	addi	r3,r8,-1
    c7b8:	1700ad36 	bltu	r2,fp,ca70 <__divdf3+0x774>
    c7bc:	1400ac2e 	bgeu	r2,r16,ca70 <__divdf3+0x774>
    c7c0:	423fff84 	addi	r8,r8,-2
    c7c4:	1705883a 	add	r2,r2,fp
    c7c8:	1421c83a 	sub	r16,r2,r16
    c7cc:	a00b883a 	mov	r5,r20
    c7d0:	8009883a 	mov	r4,r16
    c7d4:	d9800315 	stw	r6,12(sp)
    c7d8:	d9c00215 	stw	r7,8(sp)
    c7dc:	da000015 	stw	r8,0(sp)
    c7e0:	da400115 	stw	r9,4(sp)
    c7e4:	000b9940 	call	b994 <__udivsi3>
    c7e8:	8009883a 	mov	r4,r16
    c7ec:	a00b883a 	mov	r5,r20
    c7f0:	1025883a 	mov	r18,r2
    c7f4:	000b9f80 	call	b9f8 <__umodsi3>
    c7f8:	d9c00217 	ldw	r7,8(sp)
    c7fc:	1004943a 	slli	r2,r2,16
    c800:	bcaf383a 	mul	r23,r23,r18
    c804:	393fffcc 	andi	r4,r7,65535
    c808:	2088b03a 	or	r4,r4,r2
    c80c:	d9800317 	ldw	r6,12(sp)
    c810:	da000017 	ldw	r8,0(sp)
    c814:	da400117 	ldw	r9,4(sp)
    c818:	25c0062e 	bgeu	r4,r23,c834 <__divdf3+0x538>
    c81c:	2709883a 	add	r4,r4,fp
    c820:	90bfffc4 	addi	r2,r18,-1
    c824:	27009436 	bltu	r4,fp,ca78 <__divdf3+0x77c>
    c828:	25c0932e 	bgeu	r4,r23,ca78 <__divdf3+0x77c>
    c82c:	94bfff84 	addi	r18,r18,-2
    c830:	2709883a 	add	r4,r4,fp
    c834:	4004943a 	slli	r2,r8,16
    c838:	25efc83a 	sub	r23,r4,r23
    c83c:	1490b03a 	or	r8,r2,r18
    c840:	4008d43a 	srli	r4,r8,16
    c844:	40ffffcc 	andi	r3,r8,65535
    c848:	30c5383a 	mul	r2,r6,r3
    c84c:	1a47383a 	mul	r3,r3,r9
    c850:	310d383a 	mul	r6,r6,r4
    c854:	100ad43a 	srli	r5,r2,16
    c858:	4913383a 	mul	r9,r9,r4
    c85c:	1987883a 	add	r3,r3,r6
    c860:	28c7883a 	add	r3,r5,r3
    c864:	1980022e 	bgeu	r3,r6,c870 <__divdf3+0x574>
    c868:	01000074 	movhi	r4,1
    c86c:	4913883a 	add	r9,r9,r4
    c870:	1808d43a 	srli	r4,r3,16
    c874:	1806943a 	slli	r3,r3,16
    c878:	10bfffcc 	andi	r2,r2,65535
    c87c:	2253883a 	add	r9,r4,r9
    c880:	1887883a 	add	r3,r3,r2
    c884:	ba403836 	bltu	r23,r9,c968 <__divdf3+0x66c>
    c888:	ba403626 	beq	r23,r9,c964 <__divdf3+0x668>
    c88c:	42000054 	ori	r8,r8,1
    c890:	a880ffc4 	addi	r2,r21,1023
    c894:	00bf570e 	bge	zero,r2,c5f4 <__alt_data_end+0x8000c5f4>
    c898:	40c001cc 	andi	r3,r8,7
    c89c:	18000726 	beq	r3,zero,c8bc <__divdf3+0x5c0>
    c8a0:	40c003cc 	andi	r3,r8,15
    c8a4:	01000104 	movi	r4,4
    c8a8:	19000426 	beq	r3,r4,c8bc <__divdf3+0x5c0>
    c8ac:	4107883a 	add	r3,r8,r4
    c8b0:	1a11803a 	cmpltu	r8,r3,r8
    c8b4:	8a23883a 	add	r17,r17,r8
    c8b8:	1811883a 	mov	r8,r3
    c8bc:	88c0402c 	andhi	r3,r17,256
    c8c0:	18000426 	beq	r3,zero,c8d4 <__divdf3+0x5d8>
    c8c4:	00ffc034 	movhi	r3,65280
    c8c8:	18ffffc4 	addi	r3,r3,-1
    c8cc:	a8810004 	addi	r2,r21,1024
    c8d0:	88e2703a 	and	r17,r17,r3
    c8d4:	00c1ff84 	movi	r3,2046
    c8d8:	18bee316 	blt	r3,r2,c468 <__alt_data_end+0x8000c468>
    c8dc:	8824977a 	slli	r18,r17,29
    c8e0:	4010d0fa 	srli	r8,r8,3
    c8e4:	8822927a 	slli	r17,r17,9
    c8e8:	1081ffcc 	andi	r2,r2,2047
    c8ec:	9224b03a 	or	r18,r18,r8
    c8f0:	880ad33a 	srli	r5,r17,12
    c8f4:	98c0004c 	andi	r3,r19,1
    c8f8:	003edf06 	br	c478 <__alt_data_end+0x8000c478>
    c8fc:	8080022c 	andhi	r2,r16,8
    c900:	10001226 	beq	r2,zero,c94c <__divdf3+0x650>
    c904:	8880022c 	andhi	r2,r17,8
    c908:	1000101e 	bne	r2,zero,c94c <__divdf3+0x650>
    c90c:	00800434 	movhi	r2,16
    c910:	89400234 	orhi	r5,r17,8
    c914:	10bfffc4 	addi	r2,r2,-1
    c918:	b007883a 	mov	r3,r22
    c91c:	288a703a 	and	r5,r5,r2
    c920:	4025883a 	mov	r18,r8
    c924:	003f3106 	br	c5ec <__alt_data_end+0x8000c5ec>
    c928:	008000c4 	movi	r2,3
    c92c:	3880a626 	beq	r7,r2,cbc8 <__divdf3+0x8cc>
    c930:	00800044 	movi	r2,1
    c934:	3880521e 	bne	r7,r2,ca80 <__divdf3+0x784>
    c938:	b807883a 	mov	r3,r23
    c93c:	0005883a 	mov	r2,zero
    c940:	000b883a 	mov	r5,zero
    c944:	0025883a 	mov	r18,zero
    c948:	003ecb06 	br	c478 <__alt_data_end+0x8000c478>
    c94c:	00800434 	movhi	r2,16
    c950:	81400234 	orhi	r5,r16,8
    c954:	10bfffc4 	addi	r2,r2,-1
    c958:	a007883a 	mov	r3,r20
    c95c:	288a703a 	and	r5,r5,r2
    c960:	003f2206 	br	c5ec <__alt_data_end+0x8000c5ec>
    c964:	183fca26 	beq	r3,zero,c890 <__alt_data_end+0x8000c890>
    c968:	e5ef883a 	add	r23,fp,r23
    c96c:	40bfffc4 	addi	r2,r8,-1
    c970:	bf00392e 	bgeu	r23,fp,ca58 <__divdf3+0x75c>
    c974:	1011883a 	mov	r8,r2
    c978:	ba7fc41e 	bne	r23,r9,c88c <__alt_data_end+0x8000c88c>
    c97c:	b0ffc31e 	bne	r22,r3,c88c <__alt_data_end+0x8000c88c>
    c980:	003fc306 	br	c890 <__alt_data_end+0x8000c890>
    c984:	143ff604 	addi	r16,r2,-40
    c988:	9c20983a 	sll	r16,r19,r16
    c98c:	0025883a 	mov	r18,zero
    c990:	003ee206 	br	c51c <__alt_data_end+0x8000c51c>
    c994:	d9800315 	stw	r6,12(sp)
    c998:	d9c00215 	stw	r7,8(sp)
    c99c:	000e0540 	call	e054 <__clzsi2>
    c9a0:	10800804 	addi	r2,r2,32
    c9a4:	d9c00217 	ldw	r7,8(sp)
    c9a8:	d9800317 	ldw	r6,12(sp)
    c9ac:	003ed106 	br	c4f4 <__alt_data_end+0x8000c4f4>
    c9b0:	147ff604 	addi	r17,r2,-40
    c9b4:	3462983a 	sll	r17,r6,r17
    c9b8:	0011883a 	mov	r8,zero
    c9bc:	003ef506 	br	c594 <__alt_data_end+0x8000c594>
    c9c0:	3009883a 	mov	r4,r6
    c9c4:	d9800315 	stw	r6,12(sp)
    c9c8:	da400115 	stw	r9,4(sp)
    c9cc:	000e0540 	call	e054 <__clzsi2>
    c9d0:	10800804 	addi	r2,r2,32
    c9d4:	da400117 	ldw	r9,4(sp)
    c9d8:	d9800317 	ldw	r6,12(sp)
    c9dc:	003ee306 	br	c56c <__alt_data_end+0x8000c56c>
    c9e0:	85a1883a 	add	r16,r16,r22
    c9e4:	8585803a 	cmpltu	r2,r16,r22
    c9e8:	1705883a 	add	r2,r2,fp
    c9ec:	14a5883a 	add	r18,r2,r18
    c9f0:	88bfffc4 	addi	r2,r17,-1
    c9f4:	e4800c2e 	bgeu	fp,r18,ca28 <__divdf3+0x72c>
    c9f8:	90c03e36 	bltu	r18,r3,caf4 <__divdf3+0x7f8>
    c9fc:	1c806926 	beq	r3,r18,cba4 <__divdf3+0x8a8>
    ca00:	90c7c83a 	sub	r3,r18,r3
    ca04:	1023883a 	mov	r17,r2
    ca08:	003f5206 	br	c754 <__alt_data_end+0x8000c754>
    ca0c:	923f0436 	bltu	r18,r8,c620 <__alt_data_end+0x8000c620>
    ca10:	800897fa 	slli	r4,r16,31
    ca14:	9004d07a 	srli	r2,r18,1
    ca18:	8006d07a 	srli	r3,r16,1
    ca1c:	902097fa 	slli	r16,r18,31
    ca20:	20a4b03a 	or	r18,r4,r2
    ca24:	003f0106 	br	c62c <__alt_data_end+0x8000c62c>
    ca28:	e4bff51e 	bne	fp,r18,ca00 <__alt_data_end+0x8000ca00>
    ca2c:	85bff22e 	bgeu	r16,r22,c9f8 <__alt_data_end+0x8000c9f8>
    ca30:	e0c7c83a 	sub	r3,fp,r3
    ca34:	1023883a 	mov	r17,r2
    ca38:	003f4606 	br	c754 <__alt_data_end+0x8000c754>
    ca3c:	100f883a 	mov	r7,r2
    ca40:	003f2b06 	br	c6f0 <__alt_data_end+0x8000c6f0>
    ca44:	180d883a 	mov	r6,r3
    ca48:	003f1306 	br	c698 <__alt_data_end+0x8000c698>
    ca4c:	813fe436 	bltu	r16,r4,c9e0 <__alt_data_end+0x8000c9e0>
    ca50:	0007883a 	mov	r3,zero
    ca54:	003f3f06 	br	c754 <__alt_data_end+0x8000c754>
    ca58:	ba402c36 	bltu	r23,r9,cb0c <__divdf3+0x810>
    ca5c:	4dc05426 	beq	r9,r23,cbb0 <__divdf3+0x8b4>
    ca60:	1011883a 	mov	r8,r2
    ca64:	003f8906 	br	c88c <__alt_data_end+0x8000c88c>
    ca68:	023fffc4 	movi	r8,-1
    ca6c:	003f8806 	br	c890 <__alt_data_end+0x8000c890>
    ca70:	1811883a 	mov	r8,r3
    ca74:	003f5406 	br	c7c8 <__alt_data_end+0x8000c7c8>
    ca78:	1025883a 	mov	r18,r2
    ca7c:	003f6d06 	br	c834 <__alt_data_end+0x8000c834>
    ca80:	b827883a 	mov	r19,r23
    ca84:	003f8206 	br	c890 <__alt_data_end+0x8000c890>
    ca88:	010007c4 	movi	r4,31
    ca8c:	20c02616 	blt	r4,r3,cb28 <__divdf3+0x82c>
    ca90:	00800804 	movi	r2,32
    ca94:	10c5c83a 	sub	r2,r2,r3
    ca98:	888a983a 	sll	r5,r17,r2
    ca9c:	40c8d83a 	srl	r4,r8,r3
    caa0:	4084983a 	sll	r2,r8,r2
    caa4:	88e2d83a 	srl	r17,r17,r3
    caa8:	2906b03a 	or	r3,r5,r4
    caac:	1004c03a 	cmpne	r2,r2,zero
    cab0:	1886b03a 	or	r3,r3,r2
    cab4:	188001cc 	andi	r2,r3,7
    cab8:	10000726 	beq	r2,zero,cad8 <__divdf3+0x7dc>
    cabc:	188003cc 	andi	r2,r3,15
    cac0:	01000104 	movi	r4,4
    cac4:	11000426 	beq	r2,r4,cad8 <__divdf3+0x7dc>
    cac8:	1805883a 	mov	r2,r3
    cacc:	10c00104 	addi	r3,r2,4
    cad0:	1885803a 	cmpltu	r2,r3,r2
    cad4:	88a3883a 	add	r17,r17,r2
    cad8:	8880202c 	andhi	r2,r17,128
    cadc:	10002726 	beq	r2,zero,cb7c <__divdf3+0x880>
    cae0:	98c0004c 	andi	r3,r19,1
    cae4:	00800044 	movi	r2,1
    cae8:	000b883a 	mov	r5,zero
    caec:	0025883a 	mov	r18,zero
    caf0:	003e6106 	br	c478 <__alt_data_end+0x8000c478>
    caf4:	85a1883a 	add	r16,r16,r22
    caf8:	8585803a 	cmpltu	r2,r16,r22
    cafc:	1705883a 	add	r2,r2,fp
    cb00:	14a5883a 	add	r18,r2,r18
    cb04:	8c7fff84 	addi	r17,r17,-2
    cb08:	003f1106 	br	c750 <__alt_data_end+0x8000c750>
    cb0c:	b589883a 	add	r4,r22,r22
    cb10:	25ad803a 	cmpltu	r22,r4,r22
    cb14:	b739883a 	add	fp,r22,fp
    cb18:	40bfff84 	addi	r2,r8,-2
    cb1c:	bf2f883a 	add	r23,r23,fp
    cb20:	202d883a 	mov	r22,r4
    cb24:	003f9306 	br	c974 <__alt_data_end+0x8000c974>
    cb28:	013ff844 	movi	r4,-31
    cb2c:	2085c83a 	sub	r2,r4,r2
    cb30:	8888d83a 	srl	r4,r17,r2
    cb34:	00800804 	movi	r2,32
    cb38:	18802126 	beq	r3,r2,cbc0 <__divdf3+0x8c4>
    cb3c:	00801004 	movi	r2,64
    cb40:	10c5c83a 	sub	r2,r2,r3
    cb44:	8884983a 	sll	r2,r17,r2
    cb48:	1204b03a 	or	r2,r2,r8
    cb4c:	1004c03a 	cmpne	r2,r2,zero
    cb50:	2084b03a 	or	r2,r4,r2
    cb54:	144001cc 	andi	r17,r2,7
    cb58:	88000d1e 	bne	r17,zero,cb90 <__divdf3+0x894>
    cb5c:	000b883a 	mov	r5,zero
    cb60:	1024d0fa 	srli	r18,r2,3
    cb64:	98c0004c 	andi	r3,r19,1
    cb68:	0005883a 	mov	r2,zero
    cb6c:	9464b03a 	or	r18,r18,r17
    cb70:	003e4106 	br	c478 <__alt_data_end+0x8000c478>
    cb74:	1007883a 	mov	r3,r2
    cb78:	0023883a 	mov	r17,zero
    cb7c:	880a927a 	slli	r5,r17,9
    cb80:	1805883a 	mov	r2,r3
    cb84:	8822977a 	slli	r17,r17,29
    cb88:	280ad33a 	srli	r5,r5,12
    cb8c:	003ff406 	br	cb60 <__alt_data_end+0x8000cb60>
    cb90:	10c003cc 	andi	r3,r2,15
    cb94:	01000104 	movi	r4,4
    cb98:	193ff626 	beq	r3,r4,cb74 <__alt_data_end+0x8000cb74>
    cb9c:	0023883a 	mov	r17,zero
    cba0:	003fca06 	br	cacc <__alt_data_end+0x8000cacc>
    cba4:	813fd336 	bltu	r16,r4,caf4 <__alt_data_end+0x8000caf4>
    cba8:	1023883a 	mov	r17,r2
    cbac:	003fa806 	br	ca50 <__alt_data_end+0x8000ca50>
    cbb0:	b0ffd636 	bltu	r22,r3,cb0c <__alt_data_end+0x8000cb0c>
    cbb4:	1011883a 	mov	r8,r2
    cbb8:	b0ff341e 	bne	r22,r3,c88c <__alt_data_end+0x8000c88c>
    cbbc:	003f3406 	br	c890 <__alt_data_end+0x8000c890>
    cbc0:	0005883a 	mov	r2,zero
    cbc4:	003fe006 	br	cb48 <__alt_data_end+0x8000cb48>
    cbc8:	00800434 	movhi	r2,16
    cbcc:	89400234 	orhi	r5,r17,8
    cbd0:	10bfffc4 	addi	r2,r2,-1
    cbd4:	b807883a 	mov	r3,r23
    cbd8:	288a703a 	and	r5,r5,r2
    cbdc:	4025883a 	mov	r18,r8
    cbe0:	003e8206 	br	c5ec <__alt_data_end+0x8000c5ec>

0000cbe4 <__eqdf2>:
    cbe4:	2804d53a 	srli	r2,r5,20
    cbe8:	3806d53a 	srli	r3,r7,20
    cbec:	02000434 	movhi	r8,16
    cbf0:	423fffc4 	addi	r8,r8,-1
    cbf4:	1081ffcc 	andi	r2,r2,2047
    cbf8:	0281ffc4 	movi	r10,2047
    cbfc:	2a12703a 	and	r9,r5,r8
    cc00:	18c1ffcc 	andi	r3,r3,2047
    cc04:	3a10703a 	and	r8,r7,r8
    cc08:	280ad7fa 	srli	r5,r5,31
    cc0c:	380ed7fa 	srli	r7,r7,31
    cc10:	12801026 	beq	r2,r10,cc54 <__eqdf2+0x70>
    cc14:	0281ffc4 	movi	r10,2047
    cc18:	1a800a26 	beq	r3,r10,cc44 <__eqdf2+0x60>
    cc1c:	10c00226 	beq	r2,r3,cc28 <__eqdf2+0x44>
    cc20:	00800044 	movi	r2,1
    cc24:	f800283a 	ret
    cc28:	4a3ffd1e 	bne	r9,r8,cc20 <__alt_data_end+0x8000cc20>
    cc2c:	21bffc1e 	bne	r4,r6,cc20 <__alt_data_end+0x8000cc20>
    cc30:	29c00c26 	beq	r5,r7,cc64 <__eqdf2+0x80>
    cc34:	103ffa1e 	bne	r2,zero,cc20 <__alt_data_end+0x8000cc20>
    cc38:	2244b03a 	or	r2,r4,r9
    cc3c:	1004c03a 	cmpne	r2,r2,zero
    cc40:	f800283a 	ret
    cc44:	3214b03a 	or	r10,r6,r8
    cc48:	503ff426 	beq	r10,zero,cc1c <__alt_data_end+0x8000cc1c>
    cc4c:	00800044 	movi	r2,1
    cc50:	f800283a 	ret
    cc54:	2254b03a 	or	r10,r4,r9
    cc58:	503fee26 	beq	r10,zero,cc14 <__alt_data_end+0x8000cc14>
    cc5c:	00800044 	movi	r2,1
    cc60:	f800283a 	ret
    cc64:	0005883a 	mov	r2,zero
    cc68:	f800283a 	ret

0000cc6c <__gedf2>:
    cc6c:	2804d53a 	srli	r2,r5,20
    cc70:	3806d53a 	srli	r3,r7,20
    cc74:	02000434 	movhi	r8,16
    cc78:	423fffc4 	addi	r8,r8,-1
    cc7c:	1081ffcc 	andi	r2,r2,2047
    cc80:	0241ffc4 	movi	r9,2047
    cc84:	2a14703a 	and	r10,r5,r8
    cc88:	18c1ffcc 	andi	r3,r3,2047
    cc8c:	3a10703a 	and	r8,r7,r8
    cc90:	280ad7fa 	srli	r5,r5,31
    cc94:	380ed7fa 	srli	r7,r7,31
    cc98:	12401d26 	beq	r2,r9,cd10 <__gedf2+0xa4>
    cc9c:	0241ffc4 	movi	r9,2047
    cca0:	1a401226 	beq	r3,r9,ccec <__gedf2+0x80>
    cca4:	1000081e 	bne	r2,zero,ccc8 <__gedf2+0x5c>
    cca8:	2296b03a 	or	r11,r4,r10
    ccac:	5813003a 	cmpeq	r9,r11,zero
    ccb0:	1800091e 	bne	r3,zero,ccd8 <__gedf2+0x6c>
    ccb4:	3218b03a 	or	r12,r6,r8
    ccb8:	6000071e 	bne	r12,zero,ccd8 <__gedf2+0x6c>
    ccbc:	0005883a 	mov	r2,zero
    ccc0:	5800101e 	bne	r11,zero,cd04 <__gedf2+0x98>
    ccc4:	f800283a 	ret
    ccc8:	18000c1e 	bne	r3,zero,ccfc <__gedf2+0x90>
    cccc:	3212b03a 	or	r9,r6,r8
    ccd0:	48000c26 	beq	r9,zero,cd04 <__gedf2+0x98>
    ccd4:	0013883a 	mov	r9,zero
    ccd8:	39c03fcc 	andi	r7,r7,255
    ccdc:	48000826 	beq	r9,zero,cd00 <__gedf2+0x94>
    cce0:	38000926 	beq	r7,zero,cd08 <__gedf2+0x9c>
    cce4:	00800044 	movi	r2,1
    cce8:	f800283a 	ret
    ccec:	3212b03a 	or	r9,r6,r8
    ccf0:	483fec26 	beq	r9,zero,cca4 <__alt_data_end+0x8000cca4>
    ccf4:	00bfff84 	movi	r2,-2
    ccf8:	f800283a 	ret
    ccfc:	39c03fcc 	andi	r7,r7,255
    cd00:	29c00626 	beq	r5,r7,cd1c <__gedf2+0xb0>
    cd04:	283ff726 	beq	r5,zero,cce4 <__alt_data_end+0x8000cce4>
    cd08:	00bfffc4 	movi	r2,-1
    cd0c:	f800283a 	ret
    cd10:	2292b03a 	or	r9,r4,r10
    cd14:	483fe126 	beq	r9,zero,cc9c <__alt_data_end+0x8000cc9c>
    cd18:	003ff606 	br	ccf4 <__alt_data_end+0x8000ccf4>
    cd1c:	18bff916 	blt	r3,r2,cd04 <__alt_data_end+0x8000cd04>
    cd20:	10c00316 	blt	r2,r3,cd30 <__gedf2+0xc4>
    cd24:	42bff736 	bltu	r8,r10,cd04 <__alt_data_end+0x8000cd04>
    cd28:	52000326 	beq	r10,r8,cd38 <__gedf2+0xcc>
    cd2c:	5200042e 	bgeu	r10,r8,cd40 <__gedf2+0xd4>
    cd30:	283fec1e 	bne	r5,zero,cce4 <__alt_data_end+0x8000cce4>
    cd34:	003ff406 	br	cd08 <__alt_data_end+0x8000cd08>
    cd38:	313ff236 	bltu	r6,r4,cd04 <__alt_data_end+0x8000cd04>
    cd3c:	21bffc36 	bltu	r4,r6,cd30 <__alt_data_end+0x8000cd30>
    cd40:	0005883a 	mov	r2,zero
    cd44:	f800283a 	ret

0000cd48 <__ledf2>:
    cd48:	2804d53a 	srli	r2,r5,20
    cd4c:	3810d53a 	srli	r8,r7,20
    cd50:	00c00434 	movhi	r3,16
    cd54:	18ffffc4 	addi	r3,r3,-1
    cd58:	1081ffcc 	andi	r2,r2,2047
    cd5c:	0241ffc4 	movi	r9,2047
    cd60:	28d4703a 	and	r10,r5,r3
    cd64:	4201ffcc 	andi	r8,r8,2047
    cd68:	38c6703a 	and	r3,r7,r3
    cd6c:	280ad7fa 	srli	r5,r5,31
    cd70:	380ed7fa 	srli	r7,r7,31
    cd74:	12401f26 	beq	r2,r9,cdf4 <__ledf2+0xac>
    cd78:	0241ffc4 	movi	r9,2047
    cd7c:	42401426 	beq	r8,r9,cdd0 <__ledf2+0x88>
    cd80:	1000091e 	bne	r2,zero,cda8 <__ledf2+0x60>
    cd84:	2296b03a 	or	r11,r4,r10
    cd88:	5813003a 	cmpeq	r9,r11,zero
    cd8c:	29403fcc 	andi	r5,r5,255
    cd90:	40000a1e 	bne	r8,zero,cdbc <__ledf2+0x74>
    cd94:	30d8b03a 	or	r12,r6,r3
    cd98:	6000081e 	bne	r12,zero,cdbc <__ledf2+0x74>
    cd9c:	0005883a 	mov	r2,zero
    cda0:	5800111e 	bne	r11,zero,cde8 <__ledf2+0xa0>
    cda4:	f800283a 	ret
    cda8:	29403fcc 	andi	r5,r5,255
    cdac:	40000c1e 	bne	r8,zero,cde0 <__ledf2+0x98>
    cdb0:	30d2b03a 	or	r9,r6,r3
    cdb4:	48000c26 	beq	r9,zero,cde8 <__ledf2+0xa0>
    cdb8:	0013883a 	mov	r9,zero
    cdbc:	39c03fcc 	andi	r7,r7,255
    cdc0:	48000826 	beq	r9,zero,cde4 <__ledf2+0x9c>
    cdc4:	38001126 	beq	r7,zero,ce0c <__ledf2+0xc4>
    cdc8:	00800044 	movi	r2,1
    cdcc:	f800283a 	ret
    cdd0:	30d2b03a 	or	r9,r6,r3
    cdd4:	483fea26 	beq	r9,zero,cd80 <__alt_data_end+0x8000cd80>
    cdd8:	00800084 	movi	r2,2
    cddc:	f800283a 	ret
    cde0:	39c03fcc 	andi	r7,r7,255
    cde4:	39400726 	beq	r7,r5,ce04 <__ledf2+0xbc>
    cde8:	2800081e 	bne	r5,zero,ce0c <__ledf2+0xc4>
    cdec:	00800044 	movi	r2,1
    cdf0:	f800283a 	ret
    cdf4:	2292b03a 	or	r9,r4,r10
    cdf8:	483fdf26 	beq	r9,zero,cd78 <__alt_data_end+0x8000cd78>
    cdfc:	00800084 	movi	r2,2
    ce00:	f800283a 	ret
    ce04:	4080030e 	bge	r8,r2,ce14 <__ledf2+0xcc>
    ce08:	383fef26 	beq	r7,zero,cdc8 <__alt_data_end+0x8000cdc8>
    ce0c:	00bfffc4 	movi	r2,-1
    ce10:	f800283a 	ret
    ce14:	123feb16 	blt	r2,r8,cdc4 <__alt_data_end+0x8000cdc4>
    ce18:	1abff336 	bltu	r3,r10,cde8 <__alt_data_end+0x8000cde8>
    ce1c:	50c00326 	beq	r10,r3,ce2c <__ledf2+0xe4>
    ce20:	50c0042e 	bgeu	r10,r3,ce34 <__ledf2+0xec>
    ce24:	283fe81e 	bne	r5,zero,cdc8 <__alt_data_end+0x8000cdc8>
    ce28:	003ff806 	br	ce0c <__alt_data_end+0x8000ce0c>
    ce2c:	313fee36 	bltu	r6,r4,cde8 <__alt_data_end+0x8000cde8>
    ce30:	21bffc36 	bltu	r4,r6,ce24 <__alt_data_end+0x8000ce24>
    ce34:	0005883a 	mov	r2,zero
    ce38:	f800283a 	ret

0000ce3c <__muldf3>:
    ce3c:	defff304 	addi	sp,sp,-52
    ce40:	2804d53a 	srli	r2,r5,20
    ce44:	dd800915 	stw	r22,36(sp)
    ce48:	282cd7fa 	srli	r22,r5,31
    ce4c:	dc000315 	stw	r16,12(sp)
    ce50:	04000434 	movhi	r16,16
    ce54:	dd400815 	stw	r21,32(sp)
    ce58:	dc800515 	stw	r18,20(sp)
    ce5c:	843fffc4 	addi	r16,r16,-1
    ce60:	dfc00c15 	stw	ra,48(sp)
    ce64:	df000b15 	stw	fp,44(sp)
    ce68:	ddc00a15 	stw	r23,40(sp)
    ce6c:	dd000715 	stw	r20,28(sp)
    ce70:	dcc00615 	stw	r19,24(sp)
    ce74:	dc400415 	stw	r17,16(sp)
    ce78:	1481ffcc 	andi	r18,r2,2047
    ce7c:	2c20703a 	and	r16,r5,r16
    ce80:	b02b883a 	mov	r21,r22
    ce84:	b2403fcc 	andi	r9,r22,255
    ce88:	90006026 	beq	r18,zero,d00c <__muldf3+0x1d0>
    ce8c:	0081ffc4 	movi	r2,2047
    ce90:	2029883a 	mov	r20,r4
    ce94:	90803626 	beq	r18,r2,cf70 <__muldf3+0x134>
    ce98:	80800434 	orhi	r2,r16,16
    ce9c:	100490fa 	slli	r2,r2,3
    cea0:	2020d77a 	srli	r16,r4,29
    cea4:	202890fa 	slli	r20,r4,3
    cea8:	94bf0044 	addi	r18,r18,-1023
    ceac:	80a0b03a 	or	r16,r16,r2
    ceb0:	0027883a 	mov	r19,zero
    ceb4:	0039883a 	mov	fp,zero
    ceb8:	3804d53a 	srli	r2,r7,20
    cebc:	382ed7fa 	srli	r23,r7,31
    cec0:	04400434 	movhi	r17,16
    cec4:	8c7fffc4 	addi	r17,r17,-1
    cec8:	1081ffcc 	andi	r2,r2,2047
    cecc:	3011883a 	mov	r8,r6
    ced0:	3c62703a 	and	r17,r7,r17
    ced4:	ba803fcc 	andi	r10,r23,255
    ced8:	10006d26 	beq	r2,zero,d090 <__muldf3+0x254>
    cedc:	00c1ffc4 	movi	r3,2047
    cee0:	10c06526 	beq	r2,r3,d078 <__muldf3+0x23c>
    cee4:	88c00434 	orhi	r3,r17,16
    cee8:	180690fa 	slli	r3,r3,3
    ceec:	3022d77a 	srli	r17,r6,29
    cef0:	301090fa 	slli	r8,r6,3
    cef4:	10bf0044 	addi	r2,r2,-1023
    cef8:	88e2b03a 	or	r17,r17,r3
    cefc:	000b883a 	mov	r5,zero
    cf00:	9085883a 	add	r2,r18,r2
    cf04:	2cc8b03a 	or	r4,r5,r19
    cf08:	00c003c4 	movi	r3,15
    cf0c:	bdacf03a 	xor	r22,r23,r22
    cf10:	12c00044 	addi	r11,r2,1
    cf14:	19009936 	bltu	r3,r4,d17c <__muldf3+0x340>
    cf18:	200890ba 	slli	r4,r4,2
    cf1c:	00c00074 	movhi	r3,1
    cf20:	18f3cc04 	addi	r3,r3,-12496
    cf24:	20c9883a 	add	r4,r4,r3
    cf28:	20c00017 	ldw	r3,0(r4)
    cf2c:	1800683a 	jmp	r3
    cf30:	0000d17c 	xorhi	zero,zero,837
    cf34:	0000cf90 	cmplti	zero,zero,830
    cf38:	0000cf90 	cmplti	zero,zero,830
    cf3c:	0000cf8c 	andi	zero,zero,830
    cf40:	0000d158 	cmpnei	zero,zero,837
    cf44:	0000d158 	cmpnei	zero,zero,837
    cf48:	0000d140 	call	d14 <fseek>
    cf4c:	0000cf8c 	andi	zero,zero,830
    cf50:	0000d158 	cmpnei	zero,zero,837
    cf54:	0000d140 	call	d14 <fseek>
    cf58:	0000d158 	cmpnei	zero,zero,837
    cf5c:	0000cf8c 	andi	zero,zero,830
    cf60:	0000d168 	cmpgeui	zero,zero,837
    cf64:	0000d168 	cmpgeui	zero,zero,837
    cf68:	0000d168 	cmpgeui	zero,zero,837
    cf6c:	0000d384 	movi	zero,846
    cf70:	2404b03a 	or	r2,r4,r16
    cf74:	10006f1e 	bne	r2,zero,d134 <__muldf3+0x2f8>
    cf78:	04c00204 	movi	r19,8
    cf7c:	0021883a 	mov	r16,zero
    cf80:	0029883a 	mov	r20,zero
    cf84:	07000084 	movi	fp,2
    cf88:	003fcb06 	br	ceb8 <__alt_data_end+0x8000ceb8>
    cf8c:	502d883a 	mov	r22,r10
    cf90:	00800084 	movi	r2,2
    cf94:	28805726 	beq	r5,r2,d0f4 <__muldf3+0x2b8>
    cf98:	008000c4 	movi	r2,3
    cf9c:	28816626 	beq	r5,r2,d538 <__muldf3+0x6fc>
    cfa0:	00800044 	movi	r2,1
    cfa4:	2881411e 	bne	r5,r2,d4ac <__muldf3+0x670>
    cfa8:	b02b883a 	mov	r21,r22
    cfac:	0005883a 	mov	r2,zero
    cfb0:	000b883a 	mov	r5,zero
    cfb4:	0029883a 	mov	r20,zero
    cfb8:	1004953a 	slli	r2,r2,20
    cfbc:	a8c03fcc 	andi	r3,r21,255
    cfc0:	04400434 	movhi	r17,16
    cfc4:	8c7fffc4 	addi	r17,r17,-1
    cfc8:	180697fa 	slli	r3,r3,31
    cfcc:	2c4a703a 	and	r5,r5,r17
    cfd0:	288ab03a 	or	r5,r5,r2
    cfd4:	28c6b03a 	or	r3,r5,r3
    cfd8:	a005883a 	mov	r2,r20
    cfdc:	dfc00c17 	ldw	ra,48(sp)
    cfe0:	df000b17 	ldw	fp,44(sp)
    cfe4:	ddc00a17 	ldw	r23,40(sp)
    cfe8:	dd800917 	ldw	r22,36(sp)
    cfec:	dd400817 	ldw	r21,32(sp)
    cff0:	dd000717 	ldw	r20,28(sp)
    cff4:	dcc00617 	ldw	r19,24(sp)
    cff8:	dc800517 	ldw	r18,20(sp)
    cffc:	dc400417 	ldw	r17,16(sp)
    d000:	dc000317 	ldw	r16,12(sp)
    d004:	dec00d04 	addi	sp,sp,52
    d008:	f800283a 	ret
    d00c:	2404b03a 	or	r2,r4,r16
    d010:	2027883a 	mov	r19,r4
    d014:	10004226 	beq	r2,zero,d120 <__muldf3+0x2e4>
    d018:	8000fc26 	beq	r16,zero,d40c <__muldf3+0x5d0>
    d01c:	8009883a 	mov	r4,r16
    d020:	d9800215 	stw	r6,8(sp)
    d024:	d9c00015 	stw	r7,0(sp)
    d028:	da400115 	stw	r9,4(sp)
    d02c:	000e0540 	call	e054 <__clzsi2>
    d030:	d9800217 	ldw	r6,8(sp)
    d034:	d9c00017 	ldw	r7,0(sp)
    d038:	da400117 	ldw	r9,4(sp)
    d03c:	113ffd44 	addi	r4,r2,-11
    d040:	00c00704 	movi	r3,28
    d044:	1900ed16 	blt	r3,r4,d3fc <__muldf3+0x5c0>
    d048:	00c00744 	movi	r3,29
    d04c:	147ffe04 	addi	r17,r2,-8
    d050:	1907c83a 	sub	r3,r3,r4
    d054:	8460983a 	sll	r16,r16,r17
    d058:	98c6d83a 	srl	r3,r19,r3
    d05c:	9c68983a 	sll	r20,r19,r17
    d060:	1c20b03a 	or	r16,r3,r16
    d064:	1080fcc4 	addi	r2,r2,1011
    d068:	00a5c83a 	sub	r18,zero,r2
    d06c:	0027883a 	mov	r19,zero
    d070:	0039883a 	mov	fp,zero
    d074:	003f9006 	br	ceb8 <__alt_data_end+0x8000ceb8>
    d078:	3446b03a 	or	r3,r6,r17
    d07c:	1800261e 	bne	r3,zero,d118 <__muldf3+0x2dc>
    d080:	0023883a 	mov	r17,zero
    d084:	0011883a 	mov	r8,zero
    d088:	01400084 	movi	r5,2
    d08c:	003f9c06 	br	cf00 <__alt_data_end+0x8000cf00>
    d090:	3446b03a 	or	r3,r6,r17
    d094:	18001c26 	beq	r3,zero,d108 <__muldf3+0x2cc>
    d098:	8800ce26 	beq	r17,zero,d3d4 <__muldf3+0x598>
    d09c:	8809883a 	mov	r4,r17
    d0a0:	d9800215 	stw	r6,8(sp)
    d0a4:	da400115 	stw	r9,4(sp)
    d0a8:	da800015 	stw	r10,0(sp)
    d0ac:	000e0540 	call	e054 <__clzsi2>
    d0b0:	d9800217 	ldw	r6,8(sp)
    d0b4:	da400117 	ldw	r9,4(sp)
    d0b8:	da800017 	ldw	r10,0(sp)
    d0bc:	113ffd44 	addi	r4,r2,-11
    d0c0:	00c00704 	movi	r3,28
    d0c4:	1900bf16 	blt	r3,r4,d3c4 <__muldf3+0x588>
    d0c8:	00c00744 	movi	r3,29
    d0cc:	123ffe04 	addi	r8,r2,-8
    d0d0:	1907c83a 	sub	r3,r3,r4
    d0d4:	8a22983a 	sll	r17,r17,r8
    d0d8:	30c6d83a 	srl	r3,r6,r3
    d0dc:	3210983a 	sll	r8,r6,r8
    d0e0:	1c62b03a 	or	r17,r3,r17
    d0e4:	1080fcc4 	addi	r2,r2,1011
    d0e8:	0085c83a 	sub	r2,zero,r2
    d0ec:	000b883a 	mov	r5,zero
    d0f0:	003f8306 	br	cf00 <__alt_data_end+0x8000cf00>
    d0f4:	b02b883a 	mov	r21,r22
    d0f8:	0081ffc4 	movi	r2,2047
    d0fc:	000b883a 	mov	r5,zero
    d100:	0029883a 	mov	r20,zero
    d104:	003fac06 	br	cfb8 <__alt_data_end+0x8000cfb8>
    d108:	0023883a 	mov	r17,zero
    d10c:	0011883a 	mov	r8,zero
    d110:	01400044 	movi	r5,1
    d114:	003f7a06 	br	cf00 <__alt_data_end+0x8000cf00>
    d118:	014000c4 	movi	r5,3
    d11c:	003f7806 	br	cf00 <__alt_data_end+0x8000cf00>
    d120:	04c00104 	movi	r19,4
    d124:	0021883a 	mov	r16,zero
    d128:	0029883a 	mov	r20,zero
    d12c:	07000044 	movi	fp,1
    d130:	003f6106 	br	ceb8 <__alt_data_end+0x8000ceb8>
    d134:	04c00304 	movi	r19,12
    d138:	070000c4 	movi	fp,3
    d13c:	003f5e06 	br	ceb8 <__alt_data_end+0x8000ceb8>
    d140:	01400434 	movhi	r5,16
    d144:	002b883a 	mov	r21,zero
    d148:	297fffc4 	addi	r5,r5,-1
    d14c:	053fffc4 	movi	r20,-1
    d150:	0081ffc4 	movi	r2,2047
    d154:	003f9806 	br	cfb8 <__alt_data_end+0x8000cfb8>
    d158:	8023883a 	mov	r17,r16
    d15c:	a011883a 	mov	r8,r20
    d160:	e00b883a 	mov	r5,fp
    d164:	003f8a06 	br	cf90 <__alt_data_end+0x8000cf90>
    d168:	8023883a 	mov	r17,r16
    d16c:	a011883a 	mov	r8,r20
    d170:	482d883a 	mov	r22,r9
    d174:	e00b883a 	mov	r5,fp
    d178:	003f8506 	br	cf90 <__alt_data_end+0x8000cf90>
    d17c:	a00ad43a 	srli	r5,r20,16
    d180:	401ad43a 	srli	r13,r8,16
    d184:	a53fffcc 	andi	r20,r20,65535
    d188:	423fffcc 	andi	r8,r8,65535
    d18c:	4519383a 	mul	r12,r8,r20
    d190:	4147383a 	mul	r3,r8,r5
    d194:	6d09383a 	mul	r4,r13,r20
    d198:	600cd43a 	srli	r6,r12,16
    d19c:	2b5d383a 	mul	r14,r5,r13
    d1a0:	20c9883a 	add	r4,r4,r3
    d1a4:	310d883a 	add	r6,r6,r4
    d1a8:	30c0022e 	bgeu	r6,r3,d1b4 <__muldf3+0x378>
    d1ac:	00c00074 	movhi	r3,1
    d1b0:	70dd883a 	add	r14,r14,r3
    d1b4:	8826d43a 	srli	r19,r17,16
    d1b8:	8bffffcc 	andi	r15,r17,65535
    d1bc:	7d23383a 	mul	r17,r15,r20
    d1c0:	7949383a 	mul	r4,r15,r5
    d1c4:	9d29383a 	mul	r20,r19,r20
    d1c8:	8814d43a 	srli	r10,r17,16
    d1cc:	3012943a 	slli	r9,r6,16
    d1d0:	a129883a 	add	r20,r20,r4
    d1d4:	633fffcc 	andi	r12,r12,65535
    d1d8:	5515883a 	add	r10,r10,r20
    d1dc:	3006d43a 	srli	r3,r6,16
    d1e0:	4b13883a 	add	r9,r9,r12
    d1e4:	2ccb383a 	mul	r5,r5,r19
    d1e8:	5100022e 	bgeu	r10,r4,d1f4 <__muldf3+0x3b8>
    d1ec:	01000074 	movhi	r4,1
    d1f0:	290b883a 	add	r5,r5,r4
    d1f4:	802ad43a 	srli	r21,r16,16
    d1f8:	843fffcc 	andi	r16,r16,65535
    d1fc:	440d383a 	mul	r6,r8,r16
    d200:	4565383a 	mul	r18,r8,r21
    d204:	8349383a 	mul	r4,r16,r13
    d208:	500e943a 	slli	r7,r10,16
    d20c:	3010d43a 	srli	r8,r6,16
    d210:	5028d43a 	srli	r20,r10,16
    d214:	2489883a 	add	r4,r4,r18
    d218:	8abfffcc 	andi	r10,r17,65535
    d21c:	3a95883a 	add	r10,r7,r10
    d220:	4119883a 	add	r12,r8,r4
    d224:	a169883a 	add	r20,r20,r5
    d228:	1a87883a 	add	r3,r3,r10
    d22c:	6d5b383a 	mul	r13,r13,r21
    d230:	6480022e 	bgeu	r12,r18,d23c <__muldf3+0x400>
    d234:	01000074 	movhi	r4,1
    d238:	691b883a 	add	r13,r13,r4
    d23c:	7c25383a 	mul	r18,r15,r16
    d240:	7d4b383a 	mul	r5,r15,r21
    d244:	84cf383a 	mul	r7,r16,r19
    d248:	901ed43a 	srli	r15,r18,16
    d24c:	6008d43a 	srli	r4,r12,16
    d250:	6010943a 	slli	r8,r12,16
    d254:	394f883a 	add	r7,r7,r5
    d258:	333fffcc 	andi	r12,r6,65535
    d25c:	79df883a 	add	r15,r15,r7
    d260:	235b883a 	add	r13,r4,r13
    d264:	9d63383a 	mul	r17,r19,r21
    d268:	4309883a 	add	r4,r8,r12
    d26c:	7940022e 	bgeu	r15,r5,d278 <__muldf3+0x43c>
    d270:	01400074 	movhi	r5,1
    d274:	8963883a 	add	r17,r17,r5
    d278:	780a943a 	slli	r5,r15,16
    d27c:	91bfffcc 	andi	r6,r18,65535
    d280:	70c7883a 	add	r3,r14,r3
    d284:	298d883a 	add	r6,r5,r6
    d288:	1a8f803a 	cmpltu	r7,r3,r10
    d28c:	350b883a 	add	r5,r6,r20
    d290:	20c7883a 	add	r3,r4,r3
    d294:	3955883a 	add	r10,r7,r5
    d298:	1909803a 	cmpltu	r4,r3,r4
    d29c:	6a91883a 	add	r8,r13,r10
    d2a0:	780cd43a 	srli	r6,r15,16
    d2a4:	2219883a 	add	r12,r4,r8
    d2a8:	2d0b803a 	cmpltu	r5,r5,r20
    d2ac:	51cf803a 	cmpltu	r7,r10,r7
    d2b0:	29ceb03a 	or	r7,r5,r7
    d2b4:	4351803a 	cmpltu	r8,r8,r13
    d2b8:	610b803a 	cmpltu	r5,r12,r4
    d2bc:	4148b03a 	or	r4,r8,r5
    d2c0:	398f883a 	add	r7,r7,r6
    d2c4:	3909883a 	add	r4,r7,r4
    d2c8:	1810927a 	slli	r8,r3,9
    d2cc:	2449883a 	add	r4,r4,r17
    d2d0:	2008927a 	slli	r4,r4,9
    d2d4:	6022d5fa 	srli	r17,r12,23
    d2d8:	1806d5fa 	srli	r3,r3,23
    d2dc:	4252b03a 	or	r9,r8,r9
    d2e0:	600a927a 	slli	r5,r12,9
    d2e4:	4810c03a 	cmpne	r8,r9,zero
    d2e8:	2462b03a 	or	r17,r4,r17
    d2ec:	40c6b03a 	or	r3,r8,r3
    d2f0:	8900402c 	andhi	r4,r17,256
    d2f4:	1950b03a 	or	r8,r3,r5
    d2f8:	20000726 	beq	r4,zero,d318 <__muldf3+0x4dc>
    d2fc:	4006d07a 	srli	r3,r8,1
    d300:	880497fa 	slli	r2,r17,31
    d304:	4200004c 	andi	r8,r8,1
    d308:	8822d07a 	srli	r17,r17,1
    d30c:	1a10b03a 	or	r8,r3,r8
    d310:	1210b03a 	or	r8,r2,r8
    d314:	5805883a 	mov	r2,r11
    d318:	1140ffc4 	addi	r5,r2,1023
    d31c:	0140440e 	bge	zero,r5,d430 <__muldf3+0x5f4>
    d320:	40c001cc 	andi	r3,r8,7
    d324:	18000726 	beq	r3,zero,d344 <__muldf3+0x508>
    d328:	40c003cc 	andi	r3,r8,15
    d32c:	01000104 	movi	r4,4
    d330:	19000426 	beq	r3,r4,d344 <__muldf3+0x508>
    d334:	4107883a 	add	r3,r8,r4
    d338:	1a11803a 	cmpltu	r8,r3,r8
    d33c:	8a23883a 	add	r17,r17,r8
    d340:	1811883a 	mov	r8,r3
    d344:	88c0402c 	andhi	r3,r17,256
    d348:	18000426 	beq	r3,zero,d35c <__muldf3+0x520>
    d34c:	11410004 	addi	r5,r2,1024
    d350:	00bfc034 	movhi	r2,65280
    d354:	10bfffc4 	addi	r2,r2,-1
    d358:	88a2703a 	and	r17,r17,r2
    d35c:	0081ff84 	movi	r2,2046
    d360:	117f6416 	blt	r2,r5,d0f4 <__alt_data_end+0x8000d0f4>
    d364:	8828977a 	slli	r20,r17,29
    d368:	4010d0fa 	srli	r8,r8,3
    d36c:	8822927a 	slli	r17,r17,9
    d370:	2881ffcc 	andi	r2,r5,2047
    d374:	a228b03a 	or	r20,r20,r8
    d378:	880ad33a 	srli	r5,r17,12
    d37c:	b02b883a 	mov	r21,r22
    d380:	003f0d06 	br	cfb8 <__alt_data_end+0x8000cfb8>
    d384:	8080022c 	andhi	r2,r16,8
    d388:	10000926 	beq	r2,zero,d3b0 <__muldf3+0x574>
    d38c:	8880022c 	andhi	r2,r17,8
    d390:	1000071e 	bne	r2,zero,d3b0 <__muldf3+0x574>
    d394:	00800434 	movhi	r2,16
    d398:	89400234 	orhi	r5,r17,8
    d39c:	10bfffc4 	addi	r2,r2,-1
    d3a0:	b82b883a 	mov	r21,r23
    d3a4:	288a703a 	and	r5,r5,r2
    d3a8:	4029883a 	mov	r20,r8
    d3ac:	003f6806 	br	d150 <__alt_data_end+0x8000d150>
    d3b0:	00800434 	movhi	r2,16
    d3b4:	81400234 	orhi	r5,r16,8
    d3b8:	10bfffc4 	addi	r2,r2,-1
    d3bc:	288a703a 	and	r5,r5,r2
    d3c0:	003f6306 	br	d150 <__alt_data_end+0x8000d150>
    d3c4:	147ff604 	addi	r17,r2,-40
    d3c8:	3462983a 	sll	r17,r6,r17
    d3cc:	0011883a 	mov	r8,zero
    d3d0:	003f4406 	br	d0e4 <__alt_data_end+0x8000d0e4>
    d3d4:	3009883a 	mov	r4,r6
    d3d8:	d9800215 	stw	r6,8(sp)
    d3dc:	da400115 	stw	r9,4(sp)
    d3e0:	da800015 	stw	r10,0(sp)
    d3e4:	000e0540 	call	e054 <__clzsi2>
    d3e8:	10800804 	addi	r2,r2,32
    d3ec:	da800017 	ldw	r10,0(sp)
    d3f0:	da400117 	ldw	r9,4(sp)
    d3f4:	d9800217 	ldw	r6,8(sp)
    d3f8:	003f3006 	br	d0bc <__alt_data_end+0x8000d0bc>
    d3fc:	143ff604 	addi	r16,r2,-40
    d400:	9c20983a 	sll	r16,r19,r16
    d404:	0029883a 	mov	r20,zero
    d408:	003f1606 	br	d064 <__alt_data_end+0x8000d064>
    d40c:	d9800215 	stw	r6,8(sp)
    d410:	d9c00015 	stw	r7,0(sp)
    d414:	da400115 	stw	r9,4(sp)
    d418:	000e0540 	call	e054 <__clzsi2>
    d41c:	10800804 	addi	r2,r2,32
    d420:	da400117 	ldw	r9,4(sp)
    d424:	d9c00017 	ldw	r7,0(sp)
    d428:	d9800217 	ldw	r6,8(sp)
    d42c:	003f0306 	br	d03c <__alt_data_end+0x8000d03c>
    d430:	00c00044 	movi	r3,1
    d434:	1947c83a 	sub	r3,r3,r5
    d438:	00800e04 	movi	r2,56
    d43c:	10feda16 	blt	r2,r3,cfa8 <__alt_data_end+0x8000cfa8>
    d440:	008007c4 	movi	r2,31
    d444:	10c01b16 	blt	r2,r3,d4b4 <__muldf3+0x678>
    d448:	00800804 	movi	r2,32
    d44c:	10c5c83a 	sub	r2,r2,r3
    d450:	888a983a 	sll	r5,r17,r2
    d454:	40c8d83a 	srl	r4,r8,r3
    d458:	4084983a 	sll	r2,r8,r2
    d45c:	88e2d83a 	srl	r17,r17,r3
    d460:	2906b03a 	or	r3,r5,r4
    d464:	1004c03a 	cmpne	r2,r2,zero
    d468:	1886b03a 	or	r3,r3,r2
    d46c:	188001cc 	andi	r2,r3,7
    d470:	10000726 	beq	r2,zero,d490 <__muldf3+0x654>
    d474:	188003cc 	andi	r2,r3,15
    d478:	01000104 	movi	r4,4
    d47c:	11000426 	beq	r2,r4,d490 <__muldf3+0x654>
    d480:	1805883a 	mov	r2,r3
    d484:	10c00104 	addi	r3,r2,4
    d488:	1885803a 	cmpltu	r2,r3,r2
    d48c:	88a3883a 	add	r17,r17,r2
    d490:	8880202c 	andhi	r2,r17,128
    d494:	10001c26 	beq	r2,zero,d508 <__muldf3+0x6cc>
    d498:	b02b883a 	mov	r21,r22
    d49c:	00800044 	movi	r2,1
    d4a0:	000b883a 	mov	r5,zero
    d4a4:	0029883a 	mov	r20,zero
    d4a8:	003ec306 	br	cfb8 <__alt_data_end+0x8000cfb8>
    d4ac:	5805883a 	mov	r2,r11
    d4b0:	003f9906 	br	d318 <__alt_data_end+0x8000d318>
    d4b4:	00bff844 	movi	r2,-31
    d4b8:	1145c83a 	sub	r2,r2,r5
    d4bc:	8888d83a 	srl	r4,r17,r2
    d4c0:	00800804 	movi	r2,32
    d4c4:	18801a26 	beq	r3,r2,d530 <__muldf3+0x6f4>
    d4c8:	00801004 	movi	r2,64
    d4cc:	10c5c83a 	sub	r2,r2,r3
    d4d0:	8884983a 	sll	r2,r17,r2
    d4d4:	1204b03a 	or	r2,r2,r8
    d4d8:	1004c03a 	cmpne	r2,r2,zero
    d4dc:	2084b03a 	or	r2,r4,r2
    d4e0:	144001cc 	andi	r17,r2,7
    d4e4:	88000d1e 	bne	r17,zero,d51c <__muldf3+0x6e0>
    d4e8:	000b883a 	mov	r5,zero
    d4ec:	1028d0fa 	srli	r20,r2,3
    d4f0:	b02b883a 	mov	r21,r22
    d4f4:	0005883a 	mov	r2,zero
    d4f8:	a468b03a 	or	r20,r20,r17
    d4fc:	003eae06 	br	cfb8 <__alt_data_end+0x8000cfb8>
    d500:	1007883a 	mov	r3,r2
    d504:	0023883a 	mov	r17,zero
    d508:	880a927a 	slli	r5,r17,9
    d50c:	1805883a 	mov	r2,r3
    d510:	8822977a 	slli	r17,r17,29
    d514:	280ad33a 	srli	r5,r5,12
    d518:	003ff406 	br	d4ec <__alt_data_end+0x8000d4ec>
    d51c:	10c003cc 	andi	r3,r2,15
    d520:	01000104 	movi	r4,4
    d524:	193ff626 	beq	r3,r4,d500 <__alt_data_end+0x8000d500>
    d528:	0023883a 	mov	r17,zero
    d52c:	003fd506 	br	d484 <__alt_data_end+0x8000d484>
    d530:	0005883a 	mov	r2,zero
    d534:	003fe706 	br	d4d4 <__alt_data_end+0x8000d4d4>
    d538:	00800434 	movhi	r2,16
    d53c:	89400234 	orhi	r5,r17,8
    d540:	10bfffc4 	addi	r2,r2,-1
    d544:	b02b883a 	mov	r21,r22
    d548:	288a703a 	and	r5,r5,r2
    d54c:	4029883a 	mov	r20,r8
    d550:	003eff06 	br	d150 <__alt_data_end+0x8000d150>

0000d554 <__subdf3>:
    d554:	02000434 	movhi	r8,16
    d558:	423fffc4 	addi	r8,r8,-1
    d55c:	defffb04 	addi	sp,sp,-20
    d560:	2a14703a 	and	r10,r5,r8
    d564:	3812d53a 	srli	r9,r7,20
    d568:	3a10703a 	and	r8,r7,r8
    d56c:	2006d77a 	srli	r3,r4,29
    d570:	3004d77a 	srli	r2,r6,29
    d574:	dc000015 	stw	r16,0(sp)
    d578:	501490fa 	slli	r10,r10,3
    d57c:	2820d53a 	srli	r16,r5,20
    d580:	401090fa 	slli	r8,r8,3
    d584:	dc800215 	stw	r18,8(sp)
    d588:	dc400115 	stw	r17,4(sp)
    d58c:	dfc00415 	stw	ra,16(sp)
    d590:	202290fa 	slli	r17,r4,3
    d594:	dcc00315 	stw	r19,12(sp)
    d598:	4a41ffcc 	andi	r9,r9,2047
    d59c:	0101ffc4 	movi	r4,2047
    d5a0:	2824d7fa 	srli	r18,r5,31
    d5a4:	8401ffcc 	andi	r16,r16,2047
    d5a8:	50c6b03a 	or	r3,r10,r3
    d5ac:	380ed7fa 	srli	r7,r7,31
    d5b0:	408ab03a 	or	r5,r8,r2
    d5b4:	300c90fa 	slli	r6,r6,3
    d5b8:	49009626 	beq	r9,r4,d814 <__subdf3+0x2c0>
    d5bc:	39c0005c 	xori	r7,r7,1
    d5c0:	8245c83a 	sub	r2,r16,r9
    d5c4:	3c807426 	beq	r7,r18,d798 <__subdf3+0x244>
    d5c8:	0080af0e 	bge	zero,r2,d888 <__subdf3+0x334>
    d5cc:	48002a1e 	bne	r9,zero,d678 <__subdf3+0x124>
    d5d0:	2988b03a 	or	r4,r5,r6
    d5d4:	20009a1e 	bne	r4,zero,d840 <__subdf3+0x2ec>
    d5d8:	888001cc 	andi	r2,r17,7
    d5dc:	10000726 	beq	r2,zero,d5fc <__subdf3+0xa8>
    d5e0:	888003cc 	andi	r2,r17,15
    d5e4:	01000104 	movi	r4,4
    d5e8:	11000426 	beq	r2,r4,d5fc <__subdf3+0xa8>
    d5ec:	890b883a 	add	r5,r17,r4
    d5f0:	2c63803a 	cmpltu	r17,r5,r17
    d5f4:	1c47883a 	add	r3,r3,r17
    d5f8:	2823883a 	mov	r17,r5
    d5fc:	1880202c 	andhi	r2,r3,128
    d600:	10005926 	beq	r2,zero,d768 <__subdf3+0x214>
    d604:	84000044 	addi	r16,r16,1
    d608:	0081ffc4 	movi	r2,2047
    d60c:	8080be26 	beq	r16,r2,d908 <__subdf3+0x3b4>
    d610:	017fe034 	movhi	r5,65408
    d614:	297fffc4 	addi	r5,r5,-1
    d618:	1946703a 	and	r3,r3,r5
    d61c:	1804977a 	slli	r2,r3,29
    d620:	1806927a 	slli	r3,r3,9
    d624:	8822d0fa 	srli	r17,r17,3
    d628:	8401ffcc 	andi	r16,r16,2047
    d62c:	180ad33a 	srli	r5,r3,12
    d630:	9100004c 	andi	r4,r18,1
    d634:	1444b03a 	or	r2,r2,r17
    d638:	80c1ffcc 	andi	r3,r16,2047
    d63c:	1820953a 	slli	r16,r3,20
    d640:	20c03fcc 	andi	r3,r4,255
    d644:	180897fa 	slli	r4,r3,31
    d648:	00c00434 	movhi	r3,16
    d64c:	18ffffc4 	addi	r3,r3,-1
    d650:	28c6703a 	and	r3,r5,r3
    d654:	1c06b03a 	or	r3,r3,r16
    d658:	1906b03a 	or	r3,r3,r4
    d65c:	dfc00417 	ldw	ra,16(sp)
    d660:	dcc00317 	ldw	r19,12(sp)
    d664:	dc800217 	ldw	r18,8(sp)
    d668:	dc400117 	ldw	r17,4(sp)
    d66c:	dc000017 	ldw	r16,0(sp)
    d670:	dec00504 	addi	sp,sp,20
    d674:	f800283a 	ret
    d678:	0101ffc4 	movi	r4,2047
    d67c:	813fd626 	beq	r16,r4,d5d8 <__alt_data_end+0x8000d5d8>
    d680:	29402034 	orhi	r5,r5,128
    d684:	01000e04 	movi	r4,56
    d688:	2080a316 	blt	r4,r2,d918 <__subdf3+0x3c4>
    d68c:	010007c4 	movi	r4,31
    d690:	2080c616 	blt	r4,r2,d9ac <__subdf3+0x458>
    d694:	01000804 	movi	r4,32
    d698:	2089c83a 	sub	r4,r4,r2
    d69c:	2910983a 	sll	r8,r5,r4
    d6a0:	308ed83a 	srl	r7,r6,r2
    d6a4:	3108983a 	sll	r4,r6,r4
    d6a8:	2884d83a 	srl	r2,r5,r2
    d6ac:	41ccb03a 	or	r6,r8,r7
    d6b0:	2008c03a 	cmpne	r4,r4,zero
    d6b4:	310cb03a 	or	r6,r6,r4
    d6b8:	898dc83a 	sub	r6,r17,r6
    d6bc:	89a3803a 	cmpltu	r17,r17,r6
    d6c0:	1887c83a 	sub	r3,r3,r2
    d6c4:	1c47c83a 	sub	r3,r3,r17
    d6c8:	3023883a 	mov	r17,r6
    d6cc:	1880202c 	andhi	r2,r3,128
    d6d0:	10002326 	beq	r2,zero,d760 <__subdf3+0x20c>
    d6d4:	04c02034 	movhi	r19,128
    d6d8:	9cffffc4 	addi	r19,r19,-1
    d6dc:	1ce6703a 	and	r19,r3,r19
    d6e0:	98007a26 	beq	r19,zero,d8cc <__subdf3+0x378>
    d6e4:	9809883a 	mov	r4,r19
    d6e8:	000e0540 	call	e054 <__clzsi2>
    d6ec:	113ffe04 	addi	r4,r2,-8
    d6f0:	00c007c4 	movi	r3,31
    d6f4:	19007b16 	blt	r3,r4,d8e4 <__subdf3+0x390>
    d6f8:	00800804 	movi	r2,32
    d6fc:	1105c83a 	sub	r2,r2,r4
    d700:	8884d83a 	srl	r2,r17,r2
    d704:	9906983a 	sll	r3,r19,r4
    d708:	8922983a 	sll	r17,r17,r4
    d70c:	10c4b03a 	or	r2,r2,r3
    d710:	24007816 	blt	r4,r16,d8f4 <__subdf3+0x3a0>
    d714:	2421c83a 	sub	r16,r4,r16
    d718:	80c00044 	addi	r3,r16,1
    d71c:	010007c4 	movi	r4,31
    d720:	20c09516 	blt	r4,r3,d978 <__subdf3+0x424>
    d724:	01400804 	movi	r5,32
    d728:	28cbc83a 	sub	r5,r5,r3
    d72c:	88c8d83a 	srl	r4,r17,r3
    d730:	8962983a 	sll	r17,r17,r5
    d734:	114a983a 	sll	r5,r2,r5
    d738:	10c6d83a 	srl	r3,r2,r3
    d73c:	8804c03a 	cmpne	r2,r17,zero
    d740:	290ab03a 	or	r5,r5,r4
    d744:	28a2b03a 	or	r17,r5,r2
    d748:	0021883a 	mov	r16,zero
    d74c:	003fa206 	br	d5d8 <__alt_data_end+0x8000d5d8>
    d750:	2090b03a 	or	r8,r4,r2
    d754:	40018e26 	beq	r8,zero,dd90 <__subdf3+0x83c>
    d758:	1007883a 	mov	r3,r2
    d75c:	2023883a 	mov	r17,r4
    d760:	888001cc 	andi	r2,r17,7
    d764:	103f9e1e 	bne	r2,zero,d5e0 <__alt_data_end+0x8000d5e0>
    d768:	1804977a 	slli	r2,r3,29
    d76c:	8822d0fa 	srli	r17,r17,3
    d770:	1810d0fa 	srli	r8,r3,3
    d774:	9100004c 	andi	r4,r18,1
    d778:	1444b03a 	or	r2,r2,r17
    d77c:	00c1ffc4 	movi	r3,2047
    d780:	80c02826 	beq	r16,r3,d824 <__subdf3+0x2d0>
    d784:	01400434 	movhi	r5,16
    d788:	297fffc4 	addi	r5,r5,-1
    d78c:	80e0703a 	and	r16,r16,r3
    d790:	414a703a 	and	r5,r8,r5
    d794:	003fa806 	br	d638 <__alt_data_end+0x8000d638>
    d798:	0080630e 	bge	zero,r2,d928 <__subdf3+0x3d4>
    d79c:	48003026 	beq	r9,zero,d860 <__subdf3+0x30c>
    d7a0:	0101ffc4 	movi	r4,2047
    d7a4:	813f8c26 	beq	r16,r4,d5d8 <__alt_data_end+0x8000d5d8>
    d7a8:	29402034 	orhi	r5,r5,128
    d7ac:	01000e04 	movi	r4,56
    d7b0:	2080a90e 	bge	r4,r2,da58 <__subdf3+0x504>
    d7b4:	298cb03a 	or	r6,r5,r6
    d7b8:	3012c03a 	cmpne	r9,r6,zero
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	4c53883a 	add	r9,r9,r17
    d7c4:	4c63803a 	cmpltu	r17,r9,r17
    d7c8:	10c7883a 	add	r3,r2,r3
    d7cc:	88c7883a 	add	r3,r17,r3
    d7d0:	4823883a 	mov	r17,r9
    d7d4:	1880202c 	andhi	r2,r3,128
    d7d8:	1000d026 	beq	r2,zero,db1c <__subdf3+0x5c8>
    d7dc:	84000044 	addi	r16,r16,1
    d7e0:	0081ffc4 	movi	r2,2047
    d7e4:	8080fe26 	beq	r16,r2,dbe0 <__subdf3+0x68c>
    d7e8:	00bfe034 	movhi	r2,65408
    d7ec:	10bfffc4 	addi	r2,r2,-1
    d7f0:	1886703a 	and	r3,r3,r2
    d7f4:	880ad07a 	srli	r5,r17,1
    d7f8:	180497fa 	slli	r2,r3,31
    d7fc:	8900004c 	andi	r4,r17,1
    d800:	2922b03a 	or	r17,r5,r4
    d804:	1806d07a 	srli	r3,r3,1
    d808:	1462b03a 	or	r17,r2,r17
    d80c:	3825883a 	mov	r18,r7
    d810:	003f7106 	br	d5d8 <__alt_data_end+0x8000d5d8>
    d814:	2984b03a 	or	r2,r5,r6
    d818:	103f6826 	beq	r2,zero,d5bc <__alt_data_end+0x8000d5bc>
    d81c:	39c03fcc 	andi	r7,r7,255
    d820:	003f6706 	br	d5c0 <__alt_data_end+0x8000d5c0>
    d824:	4086b03a 	or	r3,r8,r2
    d828:	18015226 	beq	r3,zero,dd74 <__subdf3+0x820>
    d82c:	00c00434 	movhi	r3,16
    d830:	41400234 	orhi	r5,r8,8
    d834:	18ffffc4 	addi	r3,r3,-1
    d838:	28ca703a 	and	r5,r5,r3
    d83c:	003f7e06 	br	d638 <__alt_data_end+0x8000d638>
    d840:	10bfffc4 	addi	r2,r2,-1
    d844:	1000491e 	bne	r2,zero,d96c <__subdf3+0x418>
    d848:	898fc83a 	sub	r7,r17,r6
    d84c:	89e3803a 	cmpltu	r17,r17,r7
    d850:	1947c83a 	sub	r3,r3,r5
    d854:	1c47c83a 	sub	r3,r3,r17
    d858:	3823883a 	mov	r17,r7
    d85c:	003f9b06 	br	d6cc <__alt_data_end+0x8000d6cc>
    d860:	2988b03a 	or	r4,r5,r6
    d864:	203f5c26 	beq	r4,zero,d5d8 <__alt_data_end+0x8000d5d8>
    d868:	10bfffc4 	addi	r2,r2,-1
    d86c:	1000931e 	bne	r2,zero,dabc <__subdf3+0x568>
    d870:	898d883a 	add	r6,r17,r6
    d874:	3463803a 	cmpltu	r17,r6,r17
    d878:	1947883a 	add	r3,r3,r5
    d87c:	88c7883a 	add	r3,r17,r3
    d880:	3023883a 	mov	r17,r6
    d884:	003fd306 	br	d7d4 <__alt_data_end+0x8000d7d4>
    d888:	1000541e 	bne	r2,zero,d9dc <__subdf3+0x488>
    d88c:	80800044 	addi	r2,r16,1
    d890:	1081ffcc 	andi	r2,r2,2047
    d894:	01000044 	movi	r4,1
    d898:	2080a20e 	bge	r4,r2,db24 <__subdf3+0x5d0>
    d89c:	8989c83a 	sub	r4,r17,r6
    d8a0:	8905803a 	cmpltu	r2,r17,r4
    d8a4:	1967c83a 	sub	r19,r3,r5
    d8a8:	98a7c83a 	sub	r19,r19,r2
    d8ac:	9880202c 	andhi	r2,r19,128
    d8b0:	10006326 	beq	r2,zero,da40 <__subdf3+0x4ec>
    d8b4:	3463c83a 	sub	r17,r6,r17
    d8b8:	28c7c83a 	sub	r3,r5,r3
    d8bc:	344d803a 	cmpltu	r6,r6,r17
    d8c0:	19a7c83a 	sub	r19,r3,r6
    d8c4:	3825883a 	mov	r18,r7
    d8c8:	983f861e 	bne	r19,zero,d6e4 <__alt_data_end+0x8000d6e4>
    d8cc:	8809883a 	mov	r4,r17
    d8d0:	000e0540 	call	e054 <__clzsi2>
    d8d4:	10800804 	addi	r2,r2,32
    d8d8:	113ffe04 	addi	r4,r2,-8
    d8dc:	00c007c4 	movi	r3,31
    d8e0:	193f850e 	bge	r3,r4,d6f8 <__alt_data_end+0x8000d6f8>
    d8e4:	10bff604 	addi	r2,r2,-40
    d8e8:	8884983a 	sll	r2,r17,r2
    d8ec:	0023883a 	mov	r17,zero
    d8f0:	243f880e 	bge	r4,r16,d714 <__alt_data_end+0x8000d714>
    d8f4:	00ffe034 	movhi	r3,65408
    d8f8:	18ffffc4 	addi	r3,r3,-1
    d8fc:	8121c83a 	sub	r16,r16,r4
    d900:	10c6703a 	and	r3,r2,r3
    d904:	003f3406 	br	d5d8 <__alt_data_end+0x8000d5d8>
    d908:	9100004c 	andi	r4,r18,1
    d90c:	000b883a 	mov	r5,zero
    d910:	0005883a 	mov	r2,zero
    d914:	003f4806 	br	d638 <__alt_data_end+0x8000d638>
    d918:	298cb03a 	or	r6,r5,r6
    d91c:	300cc03a 	cmpne	r6,r6,zero
    d920:	0005883a 	mov	r2,zero
    d924:	003f6406 	br	d6b8 <__alt_data_end+0x8000d6b8>
    d928:	10009a1e 	bne	r2,zero,db94 <__subdf3+0x640>
    d92c:	82400044 	addi	r9,r16,1
    d930:	4881ffcc 	andi	r2,r9,2047
    d934:	02800044 	movi	r10,1
    d938:	5080670e 	bge	r10,r2,dad8 <__subdf3+0x584>
    d93c:	0081ffc4 	movi	r2,2047
    d940:	4880af26 	beq	r9,r2,dc00 <__subdf3+0x6ac>
    d944:	898d883a 	add	r6,r17,r6
    d948:	1945883a 	add	r2,r3,r5
    d94c:	3447803a 	cmpltu	r3,r6,r17
    d950:	1887883a 	add	r3,r3,r2
    d954:	182297fa 	slli	r17,r3,31
    d958:	300cd07a 	srli	r6,r6,1
    d95c:	1806d07a 	srli	r3,r3,1
    d960:	4821883a 	mov	r16,r9
    d964:	89a2b03a 	or	r17,r17,r6
    d968:	003f1b06 	br	d5d8 <__alt_data_end+0x8000d5d8>
    d96c:	0101ffc4 	movi	r4,2047
    d970:	813f441e 	bne	r16,r4,d684 <__alt_data_end+0x8000d684>
    d974:	003f1806 	br	d5d8 <__alt_data_end+0x8000d5d8>
    d978:	843ff844 	addi	r16,r16,-31
    d97c:	01400804 	movi	r5,32
    d980:	1408d83a 	srl	r4,r2,r16
    d984:	19405026 	beq	r3,r5,dac8 <__subdf3+0x574>
    d988:	01401004 	movi	r5,64
    d98c:	28c7c83a 	sub	r3,r5,r3
    d990:	10c4983a 	sll	r2,r2,r3
    d994:	88a2b03a 	or	r17,r17,r2
    d998:	8822c03a 	cmpne	r17,r17,zero
    d99c:	2462b03a 	or	r17,r4,r17
    d9a0:	0007883a 	mov	r3,zero
    d9a4:	0021883a 	mov	r16,zero
    d9a8:	003f6d06 	br	d760 <__alt_data_end+0x8000d760>
    d9ac:	11fff804 	addi	r7,r2,-32
    d9b0:	01000804 	movi	r4,32
    d9b4:	29ced83a 	srl	r7,r5,r7
    d9b8:	11004526 	beq	r2,r4,dad0 <__subdf3+0x57c>
    d9bc:	01001004 	movi	r4,64
    d9c0:	2089c83a 	sub	r4,r4,r2
    d9c4:	2904983a 	sll	r2,r5,r4
    d9c8:	118cb03a 	or	r6,r2,r6
    d9cc:	300cc03a 	cmpne	r6,r6,zero
    d9d0:	398cb03a 	or	r6,r7,r6
    d9d4:	0005883a 	mov	r2,zero
    d9d8:	003f3706 	br	d6b8 <__alt_data_end+0x8000d6b8>
    d9dc:	80002a26 	beq	r16,zero,da88 <__subdf3+0x534>
    d9e0:	0101ffc4 	movi	r4,2047
    d9e4:	49006626 	beq	r9,r4,db80 <__subdf3+0x62c>
    d9e8:	0085c83a 	sub	r2,zero,r2
    d9ec:	18c02034 	orhi	r3,r3,128
    d9f0:	01000e04 	movi	r4,56
    d9f4:	20807e16 	blt	r4,r2,dbf0 <__subdf3+0x69c>
    d9f8:	010007c4 	movi	r4,31
    d9fc:	2080e716 	blt	r4,r2,dd9c <__subdf3+0x848>
    da00:	01000804 	movi	r4,32
    da04:	2089c83a 	sub	r4,r4,r2
    da08:	1914983a 	sll	r10,r3,r4
    da0c:	8890d83a 	srl	r8,r17,r2
    da10:	8908983a 	sll	r4,r17,r4
    da14:	1884d83a 	srl	r2,r3,r2
    da18:	5222b03a 	or	r17,r10,r8
    da1c:	2006c03a 	cmpne	r3,r4,zero
    da20:	88e2b03a 	or	r17,r17,r3
    da24:	3463c83a 	sub	r17,r6,r17
    da28:	2885c83a 	sub	r2,r5,r2
    da2c:	344d803a 	cmpltu	r6,r6,r17
    da30:	1187c83a 	sub	r3,r2,r6
    da34:	4821883a 	mov	r16,r9
    da38:	3825883a 	mov	r18,r7
    da3c:	003f2306 	br	d6cc <__alt_data_end+0x8000d6cc>
    da40:	24d0b03a 	or	r8,r4,r19
    da44:	40001b1e 	bne	r8,zero,dab4 <__subdf3+0x560>
    da48:	0005883a 	mov	r2,zero
    da4c:	0009883a 	mov	r4,zero
    da50:	0021883a 	mov	r16,zero
    da54:	003f4906 	br	d77c <__alt_data_end+0x8000d77c>
    da58:	010007c4 	movi	r4,31
    da5c:	20803a16 	blt	r4,r2,db48 <__subdf3+0x5f4>
    da60:	01000804 	movi	r4,32
    da64:	2089c83a 	sub	r4,r4,r2
    da68:	2912983a 	sll	r9,r5,r4
    da6c:	3090d83a 	srl	r8,r6,r2
    da70:	3108983a 	sll	r4,r6,r4
    da74:	2884d83a 	srl	r2,r5,r2
    da78:	4a12b03a 	or	r9,r9,r8
    da7c:	2008c03a 	cmpne	r4,r4,zero
    da80:	4912b03a 	or	r9,r9,r4
    da84:	003f4e06 	br	d7c0 <__alt_data_end+0x8000d7c0>
    da88:	1c48b03a 	or	r4,r3,r17
    da8c:	20003c26 	beq	r4,zero,db80 <__subdf3+0x62c>
    da90:	0084303a 	nor	r2,zero,r2
    da94:	1000381e 	bne	r2,zero,db78 <__subdf3+0x624>
    da98:	3463c83a 	sub	r17,r6,r17
    da9c:	28c5c83a 	sub	r2,r5,r3
    daa0:	344d803a 	cmpltu	r6,r6,r17
    daa4:	1187c83a 	sub	r3,r2,r6
    daa8:	4821883a 	mov	r16,r9
    daac:	3825883a 	mov	r18,r7
    dab0:	003f0606 	br	d6cc <__alt_data_end+0x8000d6cc>
    dab4:	2023883a 	mov	r17,r4
    dab8:	003f0906 	br	d6e0 <__alt_data_end+0x8000d6e0>
    dabc:	0101ffc4 	movi	r4,2047
    dac0:	813f3a1e 	bne	r16,r4,d7ac <__alt_data_end+0x8000d7ac>
    dac4:	003ec406 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dac8:	0005883a 	mov	r2,zero
    dacc:	003fb106 	br	d994 <__alt_data_end+0x8000d994>
    dad0:	0005883a 	mov	r2,zero
    dad4:	003fbc06 	br	d9c8 <__alt_data_end+0x8000d9c8>
    dad8:	1c44b03a 	or	r2,r3,r17
    dadc:	80008e1e 	bne	r16,zero,dd18 <__subdf3+0x7c4>
    dae0:	1000c826 	beq	r2,zero,de04 <__subdf3+0x8b0>
    dae4:	2984b03a 	or	r2,r5,r6
    dae8:	103ebb26 	beq	r2,zero,d5d8 <__alt_data_end+0x8000d5d8>
    daec:	8989883a 	add	r4,r17,r6
    daf0:	1945883a 	add	r2,r3,r5
    daf4:	2447803a 	cmpltu	r3,r4,r17
    daf8:	1887883a 	add	r3,r3,r2
    dafc:	1880202c 	andhi	r2,r3,128
    db00:	2023883a 	mov	r17,r4
    db04:	103f1626 	beq	r2,zero,d760 <__alt_data_end+0x8000d760>
    db08:	00bfe034 	movhi	r2,65408
    db0c:	10bfffc4 	addi	r2,r2,-1
    db10:	5021883a 	mov	r16,r10
    db14:	1886703a 	and	r3,r3,r2
    db18:	003eaf06 	br	d5d8 <__alt_data_end+0x8000d5d8>
    db1c:	3825883a 	mov	r18,r7
    db20:	003f0f06 	br	d760 <__alt_data_end+0x8000d760>
    db24:	1c44b03a 	or	r2,r3,r17
    db28:	8000251e 	bne	r16,zero,dbc0 <__subdf3+0x66c>
    db2c:	1000661e 	bne	r2,zero,dcc8 <__subdf3+0x774>
    db30:	2990b03a 	or	r8,r5,r6
    db34:	40009626 	beq	r8,zero,dd90 <__subdf3+0x83c>
    db38:	2807883a 	mov	r3,r5
    db3c:	3023883a 	mov	r17,r6
    db40:	3825883a 	mov	r18,r7
    db44:	003ea406 	br	d5d8 <__alt_data_end+0x8000d5d8>
    db48:	127ff804 	addi	r9,r2,-32
    db4c:	01000804 	movi	r4,32
    db50:	2a52d83a 	srl	r9,r5,r9
    db54:	11008c26 	beq	r2,r4,dd88 <__subdf3+0x834>
    db58:	01001004 	movi	r4,64
    db5c:	2085c83a 	sub	r2,r4,r2
    db60:	2884983a 	sll	r2,r5,r2
    db64:	118cb03a 	or	r6,r2,r6
    db68:	300cc03a 	cmpne	r6,r6,zero
    db6c:	4992b03a 	or	r9,r9,r6
    db70:	0005883a 	mov	r2,zero
    db74:	003f1206 	br	d7c0 <__alt_data_end+0x8000d7c0>
    db78:	0101ffc4 	movi	r4,2047
    db7c:	493f9c1e 	bne	r9,r4,d9f0 <__alt_data_end+0x8000d9f0>
    db80:	2807883a 	mov	r3,r5
    db84:	3023883a 	mov	r17,r6
    db88:	4821883a 	mov	r16,r9
    db8c:	3825883a 	mov	r18,r7
    db90:	003e9106 	br	d5d8 <__alt_data_end+0x8000d5d8>
    db94:	80001f1e 	bne	r16,zero,dc14 <__subdf3+0x6c0>
    db98:	1c48b03a 	or	r4,r3,r17
    db9c:	20005a26 	beq	r4,zero,dd08 <__subdf3+0x7b4>
    dba0:	0084303a 	nor	r2,zero,r2
    dba4:	1000561e 	bne	r2,zero,dd00 <__subdf3+0x7ac>
    dba8:	89a3883a 	add	r17,r17,r6
    dbac:	1945883a 	add	r2,r3,r5
    dbb0:	898d803a 	cmpltu	r6,r17,r6
    dbb4:	3087883a 	add	r3,r6,r2
    dbb8:	4821883a 	mov	r16,r9
    dbbc:	003f0506 	br	d7d4 <__alt_data_end+0x8000d7d4>
    dbc0:	10002b1e 	bne	r2,zero,dc70 <__subdf3+0x71c>
    dbc4:	2984b03a 	or	r2,r5,r6
    dbc8:	10008026 	beq	r2,zero,ddcc <__subdf3+0x878>
    dbcc:	2807883a 	mov	r3,r5
    dbd0:	3023883a 	mov	r17,r6
    dbd4:	3825883a 	mov	r18,r7
    dbd8:	0401ffc4 	movi	r16,2047
    dbdc:	003e7e06 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dbe0:	3809883a 	mov	r4,r7
    dbe4:	0011883a 	mov	r8,zero
    dbe8:	0005883a 	mov	r2,zero
    dbec:	003ee306 	br	d77c <__alt_data_end+0x8000d77c>
    dbf0:	1c62b03a 	or	r17,r3,r17
    dbf4:	8822c03a 	cmpne	r17,r17,zero
    dbf8:	0005883a 	mov	r2,zero
    dbfc:	003f8906 	br	da24 <__alt_data_end+0x8000da24>
    dc00:	3809883a 	mov	r4,r7
    dc04:	4821883a 	mov	r16,r9
    dc08:	0011883a 	mov	r8,zero
    dc0c:	0005883a 	mov	r2,zero
    dc10:	003eda06 	br	d77c <__alt_data_end+0x8000d77c>
    dc14:	0101ffc4 	movi	r4,2047
    dc18:	49003b26 	beq	r9,r4,dd08 <__subdf3+0x7b4>
    dc1c:	0085c83a 	sub	r2,zero,r2
    dc20:	18c02034 	orhi	r3,r3,128
    dc24:	01000e04 	movi	r4,56
    dc28:	20806e16 	blt	r4,r2,dde4 <__subdf3+0x890>
    dc2c:	010007c4 	movi	r4,31
    dc30:	20807716 	blt	r4,r2,de10 <__subdf3+0x8bc>
    dc34:	01000804 	movi	r4,32
    dc38:	2089c83a 	sub	r4,r4,r2
    dc3c:	1914983a 	sll	r10,r3,r4
    dc40:	8890d83a 	srl	r8,r17,r2
    dc44:	8908983a 	sll	r4,r17,r4
    dc48:	1884d83a 	srl	r2,r3,r2
    dc4c:	5222b03a 	or	r17,r10,r8
    dc50:	2006c03a 	cmpne	r3,r4,zero
    dc54:	88e2b03a 	or	r17,r17,r3
    dc58:	89a3883a 	add	r17,r17,r6
    dc5c:	1145883a 	add	r2,r2,r5
    dc60:	898d803a 	cmpltu	r6,r17,r6
    dc64:	3087883a 	add	r3,r6,r2
    dc68:	4821883a 	mov	r16,r9
    dc6c:	003ed906 	br	d7d4 <__alt_data_end+0x8000d7d4>
    dc70:	2984b03a 	or	r2,r5,r6
    dc74:	10004226 	beq	r2,zero,dd80 <__subdf3+0x82c>
    dc78:	1808d0fa 	srli	r4,r3,3
    dc7c:	8822d0fa 	srli	r17,r17,3
    dc80:	1806977a 	slli	r3,r3,29
    dc84:	2080022c 	andhi	r2,r4,8
    dc88:	1c62b03a 	or	r17,r3,r17
    dc8c:	10000826 	beq	r2,zero,dcb0 <__subdf3+0x75c>
    dc90:	2812d0fa 	srli	r9,r5,3
    dc94:	4880022c 	andhi	r2,r9,8
    dc98:	1000051e 	bne	r2,zero,dcb0 <__subdf3+0x75c>
    dc9c:	300cd0fa 	srli	r6,r6,3
    dca0:	2804977a 	slli	r2,r5,29
    dca4:	4809883a 	mov	r4,r9
    dca8:	3825883a 	mov	r18,r7
    dcac:	11a2b03a 	or	r17,r2,r6
    dcb0:	8806d77a 	srli	r3,r17,29
    dcb4:	200890fa 	slli	r4,r4,3
    dcb8:	882290fa 	slli	r17,r17,3
    dcbc:	0401ffc4 	movi	r16,2047
    dcc0:	1906b03a 	or	r3,r3,r4
    dcc4:	003e4406 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dcc8:	2984b03a 	or	r2,r5,r6
    dccc:	103e4226 	beq	r2,zero,d5d8 <__alt_data_end+0x8000d5d8>
    dcd0:	8989c83a 	sub	r4,r17,r6
    dcd4:	8911803a 	cmpltu	r8,r17,r4
    dcd8:	1945c83a 	sub	r2,r3,r5
    dcdc:	1205c83a 	sub	r2,r2,r8
    dce0:	1200202c 	andhi	r8,r2,128
    dce4:	403e9a26 	beq	r8,zero,d750 <__alt_data_end+0x8000d750>
    dce8:	3463c83a 	sub	r17,r6,r17
    dcec:	28c5c83a 	sub	r2,r5,r3
    dcf0:	344d803a 	cmpltu	r6,r6,r17
    dcf4:	1187c83a 	sub	r3,r2,r6
    dcf8:	3825883a 	mov	r18,r7
    dcfc:	003e3606 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dd00:	0101ffc4 	movi	r4,2047
    dd04:	493fc71e 	bne	r9,r4,dc24 <__alt_data_end+0x8000dc24>
    dd08:	2807883a 	mov	r3,r5
    dd0c:	3023883a 	mov	r17,r6
    dd10:	4821883a 	mov	r16,r9
    dd14:	003e3006 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dd18:	10003626 	beq	r2,zero,ddf4 <__subdf3+0x8a0>
    dd1c:	2984b03a 	or	r2,r5,r6
    dd20:	10001726 	beq	r2,zero,dd80 <__subdf3+0x82c>
    dd24:	1808d0fa 	srli	r4,r3,3
    dd28:	8822d0fa 	srli	r17,r17,3
    dd2c:	1806977a 	slli	r3,r3,29
    dd30:	2080022c 	andhi	r2,r4,8
    dd34:	1c62b03a 	or	r17,r3,r17
    dd38:	10000726 	beq	r2,zero,dd58 <__subdf3+0x804>
    dd3c:	2812d0fa 	srli	r9,r5,3
    dd40:	4880022c 	andhi	r2,r9,8
    dd44:	1000041e 	bne	r2,zero,dd58 <__subdf3+0x804>
    dd48:	300cd0fa 	srli	r6,r6,3
    dd4c:	2804977a 	slli	r2,r5,29
    dd50:	4809883a 	mov	r4,r9
    dd54:	11a2b03a 	or	r17,r2,r6
    dd58:	8806d77a 	srli	r3,r17,29
    dd5c:	200890fa 	slli	r4,r4,3
    dd60:	882290fa 	slli	r17,r17,3
    dd64:	3825883a 	mov	r18,r7
    dd68:	1906b03a 	or	r3,r3,r4
    dd6c:	0401ffc4 	movi	r16,2047
    dd70:	003e1906 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dd74:	000b883a 	mov	r5,zero
    dd78:	0005883a 	mov	r2,zero
    dd7c:	003e2e06 	br	d638 <__alt_data_end+0x8000d638>
    dd80:	0401ffc4 	movi	r16,2047
    dd84:	003e1406 	br	d5d8 <__alt_data_end+0x8000d5d8>
    dd88:	0005883a 	mov	r2,zero
    dd8c:	003f7506 	br	db64 <__alt_data_end+0x8000db64>
    dd90:	0005883a 	mov	r2,zero
    dd94:	0009883a 	mov	r4,zero
    dd98:	003e7806 	br	d77c <__alt_data_end+0x8000d77c>
    dd9c:	123ff804 	addi	r8,r2,-32
    dda0:	01000804 	movi	r4,32
    dda4:	1a10d83a 	srl	r8,r3,r8
    dda8:	11002526 	beq	r2,r4,de40 <__subdf3+0x8ec>
    ddac:	01001004 	movi	r4,64
    ddb0:	2085c83a 	sub	r2,r4,r2
    ddb4:	1884983a 	sll	r2,r3,r2
    ddb8:	1444b03a 	or	r2,r2,r17
    ddbc:	1004c03a 	cmpne	r2,r2,zero
    ddc0:	40a2b03a 	or	r17,r8,r2
    ddc4:	0005883a 	mov	r2,zero
    ddc8:	003f1606 	br	da24 <__alt_data_end+0x8000da24>
    ddcc:	02000434 	movhi	r8,16
    ddd0:	0009883a 	mov	r4,zero
    ddd4:	423fffc4 	addi	r8,r8,-1
    ddd8:	00bfffc4 	movi	r2,-1
    dddc:	0401ffc4 	movi	r16,2047
    dde0:	003e6606 	br	d77c <__alt_data_end+0x8000d77c>
    dde4:	1c62b03a 	or	r17,r3,r17
    dde8:	8822c03a 	cmpne	r17,r17,zero
    ddec:	0005883a 	mov	r2,zero
    ddf0:	003f9906 	br	dc58 <__alt_data_end+0x8000dc58>
    ddf4:	2807883a 	mov	r3,r5
    ddf8:	3023883a 	mov	r17,r6
    ddfc:	0401ffc4 	movi	r16,2047
    de00:	003df506 	br	d5d8 <__alt_data_end+0x8000d5d8>
    de04:	2807883a 	mov	r3,r5
    de08:	3023883a 	mov	r17,r6
    de0c:	003df206 	br	d5d8 <__alt_data_end+0x8000d5d8>
    de10:	123ff804 	addi	r8,r2,-32
    de14:	01000804 	movi	r4,32
    de18:	1a10d83a 	srl	r8,r3,r8
    de1c:	11000a26 	beq	r2,r4,de48 <__subdf3+0x8f4>
    de20:	01001004 	movi	r4,64
    de24:	2085c83a 	sub	r2,r4,r2
    de28:	1884983a 	sll	r2,r3,r2
    de2c:	1444b03a 	or	r2,r2,r17
    de30:	1004c03a 	cmpne	r2,r2,zero
    de34:	40a2b03a 	or	r17,r8,r2
    de38:	0005883a 	mov	r2,zero
    de3c:	003f8606 	br	dc58 <__alt_data_end+0x8000dc58>
    de40:	0005883a 	mov	r2,zero
    de44:	003fdc06 	br	ddb8 <__alt_data_end+0x8000ddb8>
    de48:	0005883a 	mov	r2,zero
    de4c:	003ff706 	br	de2c <__alt_data_end+0x8000de2c>

0000de50 <__fixdfsi>:
    de50:	280cd53a 	srli	r6,r5,20
    de54:	00c00434 	movhi	r3,16
    de58:	18ffffc4 	addi	r3,r3,-1
    de5c:	3181ffcc 	andi	r6,r6,2047
    de60:	01c0ff84 	movi	r7,1022
    de64:	28c6703a 	and	r3,r5,r3
    de68:	280ad7fa 	srli	r5,r5,31
    de6c:	3980120e 	bge	r7,r6,deb8 <__fixdfsi+0x68>
    de70:	00810744 	movi	r2,1053
    de74:	11800c16 	blt	r2,r6,dea8 <__fixdfsi+0x58>
    de78:	00810cc4 	movi	r2,1075
    de7c:	1185c83a 	sub	r2,r2,r6
    de80:	01c007c4 	movi	r7,31
    de84:	18c00434 	orhi	r3,r3,16
    de88:	38800d16 	blt	r7,r2,dec0 <__fixdfsi+0x70>
    de8c:	31befb44 	addi	r6,r6,-1043
    de90:	2084d83a 	srl	r2,r4,r2
    de94:	1986983a 	sll	r3,r3,r6
    de98:	1884b03a 	or	r2,r3,r2
    de9c:	28000726 	beq	r5,zero,debc <__fixdfsi+0x6c>
    dea0:	0085c83a 	sub	r2,zero,r2
    dea4:	f800283a 	ret
    dea8:	00a00034 	movhi	r2,32768
    deac:	10bfffc4 	addi	r2,r2,-1
    deb0:	2885883a 	add	r2,r5,r2
    deb4:	f800283a 	ret
    deb8:	0005883a 	mov	r2,zero
    debc:	f800283a 	ret
    dec0:	008104c4 	movi	r2,1043
    dec4:	1185c83a 	sub	r2,r2,r6
    dec8:	1884d83a 	srl	r2,r3,r2
    decc:	003ff306 	br	de9c <__alt_data_end+0x8000de9c>

0000ded0 <__floatsidf>:
    ded0:	defffd04 	addi	sp,sp,-12
    ded4:	dfc00215 	stw	ra,8(sp)
    ded8:	dc400115 	stw	r17,4(sp)
    dedc:	dc000015 	stw	r16,0(sp)
    dee0:	20002b26 	beq	r4,zero,df90 <__floatsidf+0xc0>
    dee4:	2023883a 	mov	r17,r4
    dee8:	2020d7fa 	srli	r16,r4,31
    deec:	20002d16 	blt	r4,zero,dfa4 <__floatsidf+0xd4>
    def0:	8809883a 	mov	r4,r17
    def4:	000e0540 	call	e054 <__clzsi2>
    def8:	01410784 	movi	r5,1054
    defc:	288bc83a 	sub	r5,r5,r2
    df00:	01010cc4 	movi	r4,1075
    df04:	2149c83a 	sub	r4,r4,r5
    df08:	00c007c4 	movi	r3,31
    df0c:	1900160e 	bge	r3,r4,df68 <__floatsidf+0x98>
    df10:	00c104c4 	movi	r3,1043
    df14:	1947c83a 	sub	r3,r3,r5
    df18:	88c6983a 	sll	r3,r17,r3
    df1c:	00800434 	movhi	r2,16
    df20:	10bfffc4 	addi	r2,r2,-1
    df24:	1886703a 	and	r3,r3,r2
    df28:	2941ffcc 	andi	r5,r5,2047
    df2c:	800d883a 	mov	r6,r16
    df30:	0005883a 	mov	r2,zero
    df34:	280a953a 	slli	r5,r5,20
    df38:	31803fcc 	andi	r6,r6,255
    df3c:	01000434 	movhi	r4,16
    df40:	300c97fa 	slli	r6,r6,31
    df44:	213fffc4 	addi	r4,r4,-1
    df48:	1906703a 	and	r3,r3,r4
    df4c:	1946b03a 	or	r3,r3,r5
    df50:	1986b03a 	or	r3,r3,r6
    df54:	dfc00217 	ldw	ra,8(sp)
    df58:	dc400117 	ldw	r17,4(sp)
    df5c:	dc000017 	ldw	r16,0(sp)
    df60:	dec00304 	addi	sp,sp,12
    df64:	f800283a 	ret
    df68:	00c002c4 	movi	r3,11
    df6c:	1887c83a 	sub	r3,r3,r2
    df70:	88c6d83a 	srl	r3,r17,r3
    df74:	8904983a 	sll	r2,r17,r4
    df78:	01000434 	movhi	r4,16
    df7c:	213fffc4 	addi	r4,r4,-1
    df80:	2941ffcc 	andi	r5,r5,2047
    df84:	1906703a 	and	r3,r3,r4
    df88:	800d883a 	mov	r6,r16
    df8c:	003fe906 	br	df34 <__alt_data_end+0x8000df34>
    df90:	000d883a 	mov	r6,zero
    df94:	000b883a 	mov	r5,zero
    df98:	0007883a 	mov	r3,zero
    df9c:	0005883a 	mov	r2,zero
    dfa0:	003fe406 	br	df34 <__alt_data_end+0x8000df34>
    dfa4:	0123c83a 	sub	r17,zero,r4
    dfa8:	003fd106 	br	def0 <__alt_data_end+0x8000def0>

0000dfac <__floatunsidf>:
    dfac:	defffe04 	addi	sp,sp,-8
    dfb0:	dc000015 	stw	r16,0(sp)
    dfb4:	dfc00115 	stw	ra,4(sp)
    dfb8:	2021883a 	mov	r16,r4
    dfbc:	20002226 	beq	r4,zero,e048 <__floatunsidf+0x9c>
    dfc0:	000e0540 	call	e054 <__clzsi2>
    dfc4:	01010784 	movi	r4,1054
    dfc8:	2089c83a 	sub	r4,r4,r2
    dfcc:	01810cc4 	movi	r6,1075
    dfd0:	310dc83a 	sub	r6,r6,r4
    dfd4:	00c007c4 	movi	r3,31
    dfd8:	1980120e 	bge	r3,r6,e024 <__floatunsidf+0x78>
    dfdc:	00c104c4 	movi	r3,1043
    dfe0:	1907c83a 	sub	r3,r3,r4
    dfe4:	80ca983a 	sll	r5,r16,r3
    dfe8:	00800434 	movhi	r2,16
    dfec:	10bfffc4 	addi	r2,r2,-1
    dff0:	2101ffcc 	andi	r4,r4,2047
    dff4:	0021883a 	mov	r16,zero
    dff8:	288a703a 	and	r5,r5,r2
    dffc:	2008953a 	slli	r4,r4,20
    e000:	00c00434 	movhi	r3,16
    e004:	18ffffc4 	addi	r3,r3,-1
    e008:	28c6703a 	and	r3,r5,r3
    e00c:	8005883a 	mov	r2,r16
    e010:	1906b03a 	or	r3,r3,r4
    e014:	dfc00117 	ldw	ra,4(sp)
    e018:	dc000017 	ldw	r16,0(sp)
    e01c:	dec00204 	addi	sp,sp,8
    e020:	f800283a 	ret
    e024:	00c002c4 	movi	r3,11
    e028:	188bc83a 	sub	r5,r3,r2
    e02c:	814ad83a 	srl	r5,r16,r5
    e030:	00c00434 	movhi	r3,16
    e034:	18ffffc4 	addi	r3,r3,-1
    e038:	81a0983a 	sll	r16,r16,r6
    e03c:	2101ffcc 	andi	r4,r4,2047
    e040:	28ca703a 	and	r5,r5,r3
    e044:	003fed06 	br	dffc <__alt_data_end+0x8000dffc>
    e048:	0009883a 	mov	r4,zero
    e04c:	000b883a 	mov	r5,zero
    e050:	003fea06 	br	dffc <__alt_data_end+0x8000dffc>

0000e054 <__clzsi2>:
    e054:	00bfffd4 	movui	r2,65535
    e058:	11000536 	bltu	r2,r4,e070 <__clzsi2+0x1c>
    e05c:	00803fc4 	movi	r2,255
    e060:	11000f36 	bltu	r2,r4,e0a0 <__clzsi2+0x4c>
    e064:	00800804 	movi	r2,32
    e068:	0007883a 	mov	r3,zero
    e06c:	00000506 	br	e084 <__clzsi2+0x30>
    e070:	00804034 	movhi	r2,256
    e074:	10bfffc4 	addi	r2,r2,-1
    e078:	11000c2e 	bgeu	r2,r4,e0ac <__clzsi2+0x58>
    e07c:	00800204 	movi	r2,8
    e080:	00c00604 	movi	r3,24
    e084:	20c8d83a 	srl	r4,r4,r3
    e088:	00d00034 	movhi	r3,16384
    e08c:	18c0a504 	addi	r3,r3,660
    e090:	1909883a 	add	r4,r3,r4
    e094:	20c00003 	ldbu	r3,0(r4)
    e098:	10c5c83a 	sub	r2,r2,r3
    e09c:	f800283a 	ret
    e0a0:	00800604 	movi	r2,24
    e0a4:	00c00204 	movi	r3,8
    e0a8:	003ff606 	br	e084 <__alt_data_end+0x8000e084>
    e0ac:	00800404 	movi	r2,16
    e0b0:	1007883a 	mov	r3,r2
    e0b4:	003ff306 	br	e084 <__alt_data_end+0x8000e084>

0000e0b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0b8:	defffe04 	addi	sp,sp,-8
    e0bc:	dfc00115 	stw	ra,4(sp)
    e0c0:	df000015 	stw	fp,0(sp)
    e0c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e0c8:	d0a00b17 	ldw	r2,-32724(gp)
    e0cc:	10000326 	beq	r2,zero,e0dc <alt_get_errno+0x24>
    e0d0:	d0a00b17 	ldw	r2,-32724(gp)
    e0d4:	103ee83a 	callr	r2
    e0d8:	00000106 	br	e0e0 <alt_get_errno+0x28>
    e0dc:	d0a01004 	addi	r2,gp,-32704
}
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	dfc00117 	ldw	ra,4(sp)
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00204 	addi	sp,sp,8
    e0f0:	f800283a 	ret

0000e0f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e0f4:	defffb04 	addi	sp,sp,-20
    e0f8:	dfc00415 	stw	ra,16(sp)
    e0fc:	df000315 	stw	fp,12(sp)
    e100:	df000304 	addi	fp,sp,12
    e104:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e108:	e0bfff17 	ldw	r2,-4(fp)
    e10c:	10000616 	blt	r2,zero,e128 <close+0x34>
    e110:	e0bfff17 	ldw	r2,-4(fp)
    e114:	10c00324 	muli	r3,r2,12
    e118:	00900034 	movhi	r2,16384
    e11c:	10835204 	addi	r2,r2,3400
    e120:	1885883a 	add	r2,r3,r2
    e124:	00000106 	br	e12c <close+0x38>
    e128:	0005883a 	mov	r2,zero
    e12c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e130:	e0bffd17 	ldw	r2,-12(fp)
    e134:	10001926 	beq	r2,zero,e19c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e138:	e0bffd17 	ldw	r2,-12(fp)
    e13c:	10800017 	ldw	r2,0(r2)
    e140:	10800417 	ldw	r2,16(r2)
    e144:	10000626 	beq	r2,zero,e160 <close+0x6c>
    e148:	e0bffd17 	ldw	r2,-12(fp)
    e14c:	10800017 	ldw	r2,0(r2)
    e150:	10800417 	ldw	r2,16(r2)
    e154:	e13ffd17 	ldw	r4,-12(fp)
    e158:	103ee83a 	callr	r2
    e15c:	00000106 	br	e164 <close+0x70>
    e160:	0005883a 	mov	r2,zero
    e164:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e168:	e13fff17 	ldw	r4,-4(fp)
    e16c:	000ea080 	call	ea08 <alt_release_fd>
    if (rval < 0)
    e170:	e0bffe17 	ldw	r2,-8(fp)
    e174:	1000070e 	bge	r2,zero,e194 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e178:	000e0b80 	call	e0b8 <alt_get_errno>
    e17c:	1007883a 	mov	r3,r2
    e180:	e0bffe17 	ldw	r2,-8(fp)
    e184:	0085c83a 	sub	r2,zero,r2
    e188:	18800015 	stw	r2,0(r3)
      return -1;
    e18c:	00bfffc4 	movi	r2,-1
    e190:	00000706 	br	e1b0 <close+0xbc>
    }
    return 0;
    e194:	0005883a 	mov	r2,zero
    e198:	00000506 	br	e1b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e19c:	000e0b80 	call	e0b8 <alt_get_errno>
    e1a0:	1007883a 	mov	r3,r2
    e1a4:	00801444 	movi	r2,81
    e1a8:	18800015 	stw	r2,0(r3)
    return -1;
    e1ac:	00bfffc4 	movi	r2,-1
  }
}
    e1b0:	e037883a 	mov	sp,fp
    e1b4:	dfc00117 	ldw	ra,4(sp)
    e1b8:	df000017 	ldw	fp,0(sp)
    e1bc:	dec00204 	addi	sp,sp,8
    e1c0:	f800283a 	ret

0000e1c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e1c4:	defffc04 	addi	sp,sp,-16
    e1c8:	df000315 	stw	fp,12(sp)
    e1cc:	df000304 	addi	fp,sp,12
    e1d0:	e13ffd15 	stw	r4,-12(fp)
    e1d4:	e17ffe15 	stw	r5,-8(fp)
    e1d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e1dc:	e0bfff17 	ldw	r2,-4(fp)
}
    e1e0:	e037883a 	mov	sp,fp
    e1e4:	df000017 	ldw	fp,0(sp)
    e1e8:	dec00104 	addi	sp,sp,4
    e1ec:	f800283a 	ret

0000e1f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e1f0:	defffe04 	addi	sp,sp,-8
    e1f4:	dfc00115 	stw	ra,4(sp)
    e1f8:	df000015 	stw	fp,0(sp)
    e1fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e200:	d0a00b17 	ldw	r2,-32724(gp)
    e204:	10000326 	beq	r2,zero,e214 <alt_get_errno+0x24>
    e208:	d0a00b17 	ldw	r2,-32724(gp)
    e20c:	103ee83a 	callr	r2
    e210:	00000106 	br	e218 <alt_get_errno+0x28>
    e214:	d0a01004 	addi	r2,gp,-32704
}
    e218:	e037883a 	mov	sp,fp
    e21c:	dfc00117 	ldw	ra,4(sp)
    e220:	df000017 	ldw	fp,0(sp)
    e224:	dec00204 	addi	sp,sp,8
    e228:	f800283a 	ret

0000e22c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e22c:	defffb04 	addi	sp,sp,-20
    e230:	dfc00415 	stw	ra,16(sp)
    e234:	df000315 	stw	fp,12(sp)
    e238:	df000304 	addi	fp,sp,12
    e23c:	e13ffe15 	stw	r4,-8(fp)
    e240:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e244:	e0bffe17 	ldw	r2,-8(fp)
    e248:	10000616 	blt	r2,zero,e264 <fstat+0x38>
    e24c:	e0bffe17 	ldw	r2,-8(fp)
    e250:	10c00324 	muli	r3,r2,12
    e254:	00900034 	movhi	r2,16384
    e258:	10835204 	addi	r2,r2,3400
    e25c:	1885883a 	add	r2,r3,r2
    e260:	00000106 	br	e268 <fstat+0x3c>
    e264:	0005883a 	mov	r2,zero
    e268:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e26c:	e0bffd17 	ldw	r2,-12(fp)
    e270:	10001026 	beq	r2,zero,e2b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e274:	e0bffd17 	ldw	r2,-12(fp)
    e278:	10800017 	ldw	r2,0(r2)
    e27c:	10800817 	ldw	r2,32(r2)
    e280:	10000726 	beq	r2,zero,e2a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e284:	e0bffd17 	ldw	r2,-12(fp)
    e288:	10800017 	ldw	r2,0(r2)
    e28c:	10800817 	ldw	r2,32(r2)
    e290:	e17fff17 	ldw	r5,-4(fp)
    e294:	e13ffd17 	ldw	r4,-12(fp)
    e298:	103ee83a 	callr	r2
    e29c:	00000a06 	br	e2c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e2a0:	e0bfff17 	ldw	r2,-4(fp)
    e2a4:	00c80004 	movi	r3,8192
    e2a8:	10c00115 	stw	r3,4(r2)
      return 0;
    e2ac:	0005883a 	mov	r2,zero
    e2b0:	00000506 	br	e2c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e2b4:	000e1f00 	call	e1f0 <alt_get_errno>
    e2b8:	1007883a 	mov	r3,r2
    e2bc:	00801444 	movi	r2,81
    e2c0:	18800015 	stw	r2,0(r3)
    return -1;
    e2c4:	00bfffc4 	movi	r2,-1
  }
}
    e2c8:	e037883a 	mov	sp,fp
    e2cc:	dfc00117 	ldw	ra,4(sp)
    e2d0:	df000017 	ldw	fp,0(sp)
    e2d4:	dec00204 	addi	sp,sp,8
    e2d8:	f800283a 	ret

0000e2dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e2dc:	defffe04 	addi	sp,sp,-8
    e2e0:	dfc00115 	stw	ra,4(sp)
    e2e4:	df000015 	stw	fp,0(sp)
    e2e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e2ec:	d0a00b17 	ldw	r2,-32724(gp)
    e2f0:	10000326 	beq	r2,zero,e300 <alt_get_errno+0x24>
    e2f4:	d0a00b17 	ldw	r2,-32724(gp)
    e2f8:	103ee83a 	callr	r2
    e2fc:	00000106 	br	e304 <alt_get_errno+0x28>
    e300:	d0a01004 	addi	r2,gp,-32704
}
    e304:	e037883a 	mov	sp,fp
    e308:	dfc00117 	ldw	ra,4(sp)
    e30c:	df000017 	ldw	fp,0(sp)
    e310:	dec00204 	addi	sp,sp,8
    e314:	f800283a 	ret

0000e318 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e318:	deffed04 	addi	sp,sp,-76
    e31c:	dfc01215 	stw	ra,72(sp)
    e320:	df001115 	stw	fp,68(sp)
    e324:	df001104 	addi	fp,sp,68
    e328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e32c:	e0bfff17 	ldw	r2,-4(fp)
    e330:	10000616 	blt	r2,zero,e34c <isatty+0x34>
    e334:	e0bfff17 	ldw	r2,-4(fp)
    e338:	10c00324 	muli	r3,r2,12
    e33c:	00900034 	movhi	r2,16384
    e340:	10835204 	addi	r2,r2,3400
    e344:	1885883a 	add	r2,r3,r2
    e348:	00000106 	br	e350 <isatty+0x38>
    e34c:	0005883a 	mov	r2,zero
    e350:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e354:	e0bfef17 	ldw	r2,-68(fp)
    e358:	10000e26 	beq	r2,zero,e394 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e35c:	e0bfef17 	ldw	r2,-68(fp)
    e360:	10800017 	ldw	r2,0(r2)
    e364:	10800817 	ldw	r2,32(r2)
    e368:	1000021e 	bne	r2,zero,e374 <isatty+0x5c>
    {
      return 1;
    e36c:	00800044 	movi	r2,1
    e370:	00000d06 	br	e3a8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e374:	e0bff004 	addi	r2,fp,-64
    e378:	100b883a 	mov	r5,r2
    e37c:	e13fff17 	ldw	r4,-4(fp)
    e380:	000e22c0 	call	e22c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e384:	e0bff117 	ldw	r2,-60(fp)
    e388:	10880020 	cmpeqi	r2,r2,8192
    e38c:	10803fcc 	andi	r2,r2,255
    e390:	00000506 	br	e3a8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e394:	000e2dc0 	call	e2dc <alt_get_errno>
    e398:	1007883a 	mov	r3,r2
    e39c:	00801444 	movi	r2,81
    e3a0:	18800015 	stw	r2,0(r3)
    return 0;
    e3a4:	0005883a 	mov	r2,zero
  }
}
    e3a8:	e037883a 	mov	sp,fp
    e3ac:	dfc00117 	ldw	ra,4(sp)
    e3b0:	df000017 	ldw	fp,0(sp)
    e3b4:	dec00204 	addi	sp,sp,8
    e3b8:	f800283a 	ret

0000e3bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e3bc:	defffc04 	addi	sp,sp,-16
    e3c0:	df000315 	stw	fp,12(sp)
    e3c4:	df000304 	addi	fp,sp,12
    e3c8:	e13ffd15 	stw	r4,-12(fp)
    e3cc:	e17ffe15 	stw	r5,-8(fp)
    e3d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e3d4:	e0fffe17 	ldw	r3,-8(fp)
    e3d8:	e0bffd17 	ldw	r2,-12(fp)
    e3dc:	18800c26 	beq	r3,r2,e410 <alt_load_section+0x54>
  {
    while( to != end )
    e3e0:	00000806 	br	e404 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e3e4:	e0bffe17 	ldw	r2,-8(fp)
    e3e8:	10c00104 	addi	r3,r2,4
    e3ec:	e0fffe15 	stw	r3,-8(fp)
    e3f0:	e0fffd17 	ldw	r3,-12(fp)
    e3f4:	19000104 	addi	r4,r3,4
    e3f8:	e13ffd15 	stw	r4,-12(fp)
    e3fc:	18c00017 	ldw	r3,0(r3)
    e400:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e404:	e0fffe17 	ldw	r3,-8(fp)
    e408:	e0bfff17 	ldw	r2,-4(fp)
    e40c:	18bff51e 	bne	r3,r2,e3e4 <__alt_data_end+0x8000e3e4>
    {
      *to++ = *from++;
    }
  }
}
    e410:	0001883a 	nop
    e414:	e037883a 	mov	sp,fp
    e418:	df000017 	ldw	fp,0(sp)
    e41c:	dec00104 	addi	sp,sp,4
    e420:	f800283a 	ret

0000e424 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e424:	defffe04 	addi	sp,sp,-8
    e428:	dfc00115 	stw	ra,4(sp)
    e42c:	df000015 	stw	fp,0(sp)
    e430:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e434:	01900034 	movhi	r6,16384
    e438:	31886104 	addi	r6,r6,8580
    e43c:	01500034 	movhi	r5,16384
    e440:	29411f04 	addi	r5,r5,1148
    e444:	01000074 	movhi	r4,1
    e448:	21078b04 	addi	r4,r4,7724
    e44c:	000e3bc0 	call	e3bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e450:	01800034 	movhi	r6,0
    e454:	31809104 	addi	r6,r6,580
    e458:	01400034 	movhi	r5,0
    e45c:	29400804 	addi	r5,r5,32
    e460:	01000034 	movhi	r4,0
    e464:	21000804 	addi	r4,r4,32
    e468:	000e3bc0 	call	e3bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e46c:	01900034 	movhi	r6,16384
    e470:	31811f04 	addi	r6,r6,1148
    e474:	01500034 	movhi	r5,16384
    e478:	29400004 	addi	r5,r5,0
    e47c:	01000074 	movhi	r4,1
    e480:	21066c04 	addi	r4,r4,6576
    e484:	000e3bc0 	call	e3bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e488:	0010b180 	call	10b18 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e48c:	0010f140 	call	10f14 <alt_icache_flush_all>
}
    e490:	0001883a 	nop
    e494:	e037883a 	mov	sp,fp
    e498:	dfc00117 	ldw	ra,4(sp)
    e49c:	df000017 	ldw	fp,0(sp)
    e4a0:	dec00204 	addi	sp,sp,8
    e4a4:	f800283a 	ret

0000e4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4a8:	defffe04 	addi	sp,sp,-8
    e4ac:	dfc00115 	stw	ra,4(sp)
    e4b0:	df000015 	stw	fp,0(sp)
    e4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e4b8:	d0a00b17 	ldw	r2,-32724(gp)
    e4bc:	10000326 	beq	r2,zero,e4cc <alt_get_errno+0x24>
    e4c0:	d0a00b17 	ldw	r2,-32724(gp)
    e4c4:	103ee83a 	callr	r2
    e4c8:	00000106 	br	e4d0 <alt_get_errno+0x28>
    e4cc:	d0a01004 	addi	r2,gp,-32704
}
    e4d0:	e037883a 	mov	sp,fp
    e4d4:	dfc00117 	ldw	ra,4(sp)
    e4d8:	df000017 	ldw	fp,0(sp)
    e4dc:	dec00204 	addi	sp,sp,8
    e4e0:	f800283a 	ret

0000e4e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e4e4:	defff904 	addi	sp,sp,-28
    e4e8:	dfc00615 	stw	ra,24(sp)
    e4ec:	df000515 	stw	fp,20(sp)
    e4f0:	df000504 	addi	fp,sp,20
    e4f4:	e13ffd15 	stw	r4,-12(fp)
    e4f8:	e17ffe15 	stw	r5,-8(fp)
    e4fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e500:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e504:	e0bffd17 	ldw	r2,-12(fp)
    e508:	10000616 	blt	r2,zero,e524 <lseek+0x40>
    e50c:	e0bffd17 	ldw	r2,-12(fp)
    e510:	10c00324 	muli	r3,r2,12
    e514:	00900034 	movhi	r2,16384
    e518:	10835204 	addi	r2,r2,3400
    e51c:	1885883a 	add	r2,r3,r2
    e520:	00000106 	br	e528 <lseek+0x44>
    e524:	0005883a 	mov	r2,zero
    e528:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e52c:	e0bffc17 	ldw	r2,-16(fp)
    e530:	10001026 	beq	r2,zero,e574 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e534:	e0bffc17 	ldw	r2,-16(fp)
    e538:	10800017 	ldw	r2,0(r2)
    e53c:	10800717 	ldw	r2,28(r2)
    e540:	10000926 	beq	r2,zero,e568 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e544:	e0bffc17 	ldw	r2,-16(fp)
    e548:	10800017 	ldw	r2,0(r2)
    e54c:	10800717 	ldw	r2,28(r2)
    e550:	e1bfff17 	ldw	r6,-4(fp)
    e554:	e17ffe17 	ldw	r5,-8(fp)
    e558:	e13ffc17 	ldw	r4,-16(fp)
    e55c:	103ee83a 	callr	r2
    e560:	e0bffb15 	stw	r2,-20(fp)
    e564:	00000506 	br	e57c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e568:	00bfde84 	movi	r2,-134
    e56c:	e0bffb15 	stw	r2,-20(fp)
    e570:	00000206 	br	e57c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e574:	00bfebc4 	movi	r2,-81
    e578:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e57c:	e0bffb17 	ldw	r2,-20(fp)
    e580:	1000070e 	bge	r2,zero,e5a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e584:	000e4a80 	call	e4a8 <alt_get_errno>
    e588:	1007883a 	mov	r3,r2
    e58c:	e0bffb17 	ldw	r2,-20(fp)
    e590:	0085c83a 	sub	r2,zero,r2
    e594:	18800015 	stw	r2,0(r3)
    rc = -1;
    e598:	00bfffc4 	movi	r2,-1
    e59c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e5a0:	e0bffb17 	ldw	r2,-20(fp)
}
    e5a4:	e037883a 	mov	sp,fp
    e5a8:	dfc00117 	ldw	ra,4(sp)
    e5ac:	df000017 	ldw	fp,0(sp)
    e5b0:	dec00204 	addi	sp,sp,8
    e5b4:	f800283a 	ret

0000e5b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e5b8:	defffd04 	addi	sp,sp,-12
    e5bc:	dfc00215 	stw	ra,8(sp)
    e5c0:	df000115 	stw	fp,4(sp)
    e5c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e5c8:	0009883a 	mov	r4,zero
    e5cc:	000ec840 	call	ec84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e5d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e5d4:	000ecbc0 	call	ecbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e5d8:	01900034 	movhi	r6,16384
    e5dc:	3180e804 	addi	r6,r6,928
    e5e0:	01500034 	movhi	r5,16384
    e5e4:	2940e804 	addi	r5,r5,928
    e5e8:	01100034 	movhi	r4,16384
    e5ec:	2100e804 	addi	r4,r4,928
    e5f0:	00112ac0 	call	112ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e5f4:	0010c180 	call	10c18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e5f8:	01000074 	movhi	r4,1
    e5fc:	21031e04 	addi	r4,r4,3192
    e600:	001161c0 	call	1161c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e604:	d0a01717 	ldw	r2,-32676(gp)
    e608:	d0e01817 	ldw	r3,-32672(gp)
    e60c:	d1201917 	ldw	r4,-32668(gp)
    e610:	200d883a 	mov	r6,r4
    e614:	180b883a 	mov	r5,r3
    e618:	1009883a 	mov	r4,r2
    e61c:	0000bbc0 	call	bbc <main>
    e620:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e624:	01000044 	movi	r4,1
    e628:	000e0f40 	call	e0f4 <close>
  exit (result);
    e62c:	e13fff17 	ldw	r4,-4(fp)
    e630:	00116300 	call	11630 <exit>

0000e634 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e634:	defffe04 	addi	sp,sp,-8
    e638:	df000115 	stw	fp,4(sp)
    e63c:	df000104 	addi	fp,sp,4
    e640:	e13fff15 	stw	r4,-4(fp)
}
    e644:	0001883a 	nop
    e648:	e037883a 	mov	sp,fp
    e64c:	df000017 	ldw	fp,0(sp)
    e650:	dec00104 	addi	sp,sp,4
    e654:	f800283a 	ret

0000e658 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e658:	defffe04 	addi	sp,sp,-8
    e65c:	df000115 	stw	fp,4(sp)
    e660:	df000104 	addi	fp,sp,4
    e664:	e13fff15 	stw	r4,-4(fp)
}
    e668:	0001883a 	nop
    e66c:	e037883a 	mov	sp,fp
    e670:	df000017 	ldw	fp,0(sp)
    e674:	dec00104 	addi	sp,sp,4
    e678:	f800283a 	ret

0000e67c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e67c:	defffe04 	addi	sp,sp,-8
    e680:	dfc00115 	stw	ra,4(sp)
    e684:	df000015 	stw	fp,0(sp)
    e688:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e68c:	d0a00b17 	ldw	r2,-32724(gp)
    e690:	10000326 	beq	r2,zero,e6a0 <alt_get_errno+0x24>
    e694:	d0a00b17 	ldw	r2,-32724(gp)
    e698:	103ee83a 	callr	r2
    e69c:	00000106 	br	e6a4 <alt_get_errno+0x28>
    e6a0:	d0a01004 	addi	r2,gp,-32704
}
    e6a4:	e037883a 	mov	sp,fp
    e6a8:	dfc00117 	ldw	ra,4(sp)
    e6ac:	df000017 	ldw	fp,0(sp)
    e6b0:	dec00204 	addi	sp,sp,8
    e6b4:	f800283a 	ret

0000e6b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e6b8:	defffd04 	addi	sp,sp,-12
    e6bc:	df000215 	stw	fp,8(sp)
    e6c0:	df000204 	addi	fp,sp,8
    e6c4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e6c8:	e0bfff17 	ldw	r2,-4(fp)
    e6cc:	10800217 	ldw	r2,8(r2)
    e6d0:	10d00034 	orhi	r3,r2,16384
    e6d4:	e0bfff17 	ldw	r2,-4(fp)
    e6d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e6dc:	e03ffe15 	stw	zero,-8(fp)
    e6e0:	00001d06 	br	e758 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e6e4:	00900034 	movhi	r2,16384
    e6e8:	10835204 	addi	r2,r2,3400
    e6ec:	e0fffe17 	ldw	r3,-8(fp)
    e6f0:	18c00324 	muli	r3,r3,12
    e6f4:	10c5883a 	add	r2,r2,r3
    e6f8:	10c00017 	ldw	r3,0(r2)
    e6fc:	e0bfff17 	ldw	r2,-4(fp)
    e700:	10800017 	ldw	r2,0(r2)
    e704:	1880111e 	bne	r3,r2,e74c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e708:	00900034 	movhi	r2,16384
    e70c:	10835204 	addi	r2,r2,3400
    e710:	e0fffe17 	ldw	r3,-8(fp)
    e714:	18c00324 	muli	r3,r3,12
    e718:	10c5883a 	add	r2,r2,r3
    e71c:	10800204 	addi	r2,r2,8
    e720:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e724:	1000090e 	bge	r2,zero,e74c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    e728:	e0bffe17 	ldw	r2,-8(fp)
    e72c:	10c00324 	muli	r3,r2,12
    e730:	00900034 	movhi	r2,16384
    e734:	10835204 	addi	r2,r2,3400
    e738:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e73c:	e0bfff17 	ldw	r2,-4(fp)
    e740:	18800226 	beq	r3,r2,e74c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e744:	00bffcc4 	movi	r2,-13
    e748:	00000806 	br	e76c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e74c:	e0bffe17 	ldw	r2,-8(fp)
    e750:	10800044 	addi	r2,r2,1
    e754:	e0bffe15 	stw	r2,-8(fp)
    e758:	d0a00a17 	ldw	r2,-32728(gp)
    e75c:	1007883a 	mov	r3,r2
    e760:	e0bffe17 	ldw	r2,-8(fp)
    e764:	18bfdf2e 	bgeu	r3,r2,e6e4 <__alt_data_end+0x8000e6e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e768:	0005883a 	mov	r2,zero
}
    e76c:	e037883a 	mov	sp,fp
    e770:	df000017 	ldw	fp,0(sp)
    e774:	dec00104 	addi	sp,sp,4
    e778:	f800283a 	ret

0000e77c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e77c:	defff604 	addi	sp,sp,-40
    e780:	dfc00915 	stw	ra,36(sp)
    e784:	df000815 	stw	fp,32(sp)
    e788:	df000804 	addi	fp,sp,32
    e78c:	e13ffd15 	stw	r4,-12(fp)
    e790:	e17ffe15 	stw	r5,-8(fp)
    e794:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e798:	00bfffc4 	movi	r2,-1
    e79c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    e7a0:	00bffb44 	movi	r2,-19
    e7a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    e7a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e7ac:	d1600804 	addi	r5,gp,-32736
    e7b0:	e13ffd17 	ldw	r4,-12(fp)
    e7b4:	0010cd80 	call	10cd8 <alt_find_dev>
    e7b8:	e0bff815 	stw	r2,-32(fp)
    e7bc:	e0bff817 	ldw	r2,-32(fp)
    e7c0:	1000051e 	bne	r2,zero,e7d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e7c4:	e13ffd17 	ldw	r4,-12(fp)
    e7c8:	0010d680 	call	10d68 <alt_find_file>
    e7cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    e7d0:	00800044 	movi	r2,1
    e7d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e7d8:	e0bff817 	ldw	r2,-32(fp)
    e7dc:	10002926 	beq	r2,zero,e884 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e7e0:	e13ff817 	ldw	r4,-32(fp)
    e7e4:	0010e700 	call	10e70 <alt_get_fd>
    e7e8:	e0bff915 	stw	r2,-28(fp)
    e7ec:	e0bff917 	ldw	r2,-28(fp)
    e7f0:	1000030e 	bge	r2,zero,e800 <open+0x84>
    {
      status = index;
    e7f4:	e0bff917 	ldw	r2,-28(fp)
    e7f8:	e0bffa15 	stw	r2,-24(fp)
    e7fc:	00002306 	br	e88c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    e800:	e0bff917 	ldw	r2,-28(fp)
    e804:	10c00324 	muli	r3,r2,12
    e808:	00900034 	movhi	r2,16384
    e80c:	10835204 	addi	r2,r2,3400
    e810:	1885883a 	add	r2,r3,r2
    e814:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e818:	e0fffe17 	ldw	r3,-8(fp)
    e81c:	00900034 	movhi	r2,16384
    e820:	10bfffc4 	addi	r2,r2,-1
    e824:	1886703a 	and	r3,r3,r2
    e828:	e0bffc17 	ldw	r2,-16(fp)
    e82c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e830:	e0bffb17 	ldw	r2,-20(fp)
    e834:	1000051e 	bne	r2,zero,e84c <open+0xd0>
    e838:	e13ffc17 	ldw	r4,-16(fp)
    e83c:	000e6b80 	call	e6b8 <alt_file_locked>
    e840:	e0bffa15 	stw	r2,-24(fp)
    e844:	e0bffa17 	ldw	r2,-24(fp)
    e848:	10001016 	blt	r2,zero,e88c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e84c:	e0bff817 	ldw	r2,-32(fp)
    e850:	10800317 	ldw	r2,12(r2)
    e854:	10000826 	beq	r2,zero,e878 <open+0xfc>
    e858:	e0bff817 	ldw	r2,-32(fp)
    e85c:	10800317 	ldw	r2,12(r2)
    e860:	e1ffff17 	ldw	r7,-4(fp)
    e864:	e1bffe17 	ldw	r6,-8(fp)
    e868:	e17ffd17 	ldw	r5,-12(fp)
    e86c:	e13ffc17 	ldw	r4,-16(fp)
    e870:	103ee83a 	callr	r2
    e874:	00000106 	br	e87c <open+0x100>
    e878:	0005883a 	mov	r2,zero
    e87c:	e0bffa15 	stw	r2,-24(fp)
    e880:	00000206 	br	e88c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e884:	00bffb44 	movi	r2,-19
    e888:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e88c:	e0bffa17 	ldw	r2,-24(fp)
    e890:	1000090e 	bge	r2,zero,e8b8 <open+0x13c>
  {
    alt_release_fd (index);  
    e894:	e13ff917 	ldw	r4,-28(fp)
    e898:	000ea080 	call	ea08 <alt_release_fd>
    ALT_ERRNO = -status;
    e89c:	000e67c0 	call	e67c <alt_get_errno>
    e8a0:	1007883a 	mov	r3,r2
    e8a4:	e0bffa17 	ldw	r2,-24(fp)
    e8a8:	0085c83a 	sub	r2,zero,r2
    e8ac:	18800015 	stw	r2,0(r3)
    return -1;
    e8b0:	00bfffc4 	movi	r2,-1
    e8b4:	00000106 	br	e8bc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    e8b8:	e0bff917 	ldw	r2,-28(fp)
}
    e8bc:	e037883a 	mov	sp,fp
    e8c0:	dfc00117 	ldw	ra,4(sp)
    e8c4:	df000017 	ldw	fp,0(sp)
    e8c8:	dec00204 	addi	sp,sp,8
    e8cc:	f800283a 	ret

0000e8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e8d0:	defffe04 	addi	sp,sp,-8
    e8d4:	dfc00115 	stw	ra,4(sp)
    e8d8:	df000015 	stw	fp,0(sp)
    e8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e8e0:	d0a00b17 	ldw	r2,-32724(gp)
    e8e4:	10000326 	beq	r2,zero,e8f4 <alt_get_errno+0x24>
    e8e8:	d0a00b17 	ldw	r2,-32724(gp)
    e8ec:	103ee83a 	callr	r2
    e8f0:	00000106 	br	e8f8 <alt_get_errno+0x28>
    e8f4:	d0a01004 	addi	r2,gp,-32704
}
    e8f8:	e037883a 	mov	sp,fp
    e8fc:	dfc00117 	ldw	ra,4(sp)
    e900:	df000017 	ldw	fp,0(sp)
    e904:	dec00204 	addi	sp,sp,8
    e908:	f800283a 	ret

0000e90c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e90c:	defff904 	addi	sp,sp,-28
    e910:	dfc00615 	stw	ra,24(sp)
    e914:	df000515 	stw	fp,20(sp)
    e918:	df000504 	addi	fp,sp,20
    e91c:	e13ffd15 	stw	r4,-12(fp)
    e920:	e17ffe15 	stw	r5,-8(fp)
    e924:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e928:	e0bffd17 	ldw	r2,-12(fp)
    e92c:	10000616 	blt	r2,zero,e948 <read+0x3c>
    e930:	e0bffd17 	ldw	r2,-12(fp)
    e934:	10c00324 	muli	r3,r2,12
    e938:	00900034 	movhi	r2,16384
    e93c:	10835204 	addi	r2,r2,3400
    e940:	1885883a 	add	r2,r3,r2
    e944:	00000106 	br	e94c <read+0x40>
    e948:	0005883a 	mov	r2,zero
    e94c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e950:	e0bffb17 	ldw	r2,-20(fp)
    e954:	10002226 	beq	r2,zero,e9e0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e958:	e0bffb17 	ldw	r2,-20(fp)
    e95c:	10800217 	ldw	r2,8(r2)
    e960:	108000cc 	andi	r2,r2,3
    e964:	10800060 	cmpeqi	r2,r2,1
    e968:	1000181e 	bne	r2,zero,e9cc <read+0xc0>
        (fd->dev->read))
    e96c:	e0bffb17 	ldw	r2,-20(fp)
    e970:	10800017 	ldw	r2,0(r2)
    e974:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e978:	10001426 	beq	r2,zero,e9cc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e97c:	e0bffb17 	ldw	r2,-20(fp)
    e980:	10800017 	ldw	r2,0(r2)
    e984:	10800517 	ldw	r2,20(r2)
    e988:	e0ffff17 	ldw	r3,-4(fp)
    e98c:	180d883a 	mov	r6,r3
    e990:	e17ffe17 	ldw	r5,-8(fp)
    e994:	e13ffb17 	ldw	r4,-20(fp)
    e998:	103ee83a 	callr	r2
    e99c:	e0bffc15 	stw	r2,-16(fp)
    e9a0:	e0bffc17 	ldw	r2,-16(fp)
    e9a4:	1000070e 	bge	r2,zero,e9c4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    e9a8:	000e8d00 	call	e8d0 <alt_get_errno>
    e9ac:	1007883a 	mov	r3,r2
    e9b0:	e0bffc17 	ldw	r2,-16(fp)
    e9b4:	0085c83a 	sub	r2,zero,r2
    e9b8:	18800015 	stw	r2,0(r3)
          return -1;
    e9bc:	00bfffc4 	movi	r2,-1
    e9c0:	00000c06 	br	e9f4 <read+0xe8>
        }
        return rval;
    e9c4:	e0bffc17 	ldw	r2,-16(fp)
    e9c8:	00000a06 	br	e9f4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e9cc:	000e8d00 	call	e8d0 <alt_get_errno>
    e9d0:	1007883a 	mov	r3,r2
    e9d4:	00800344 	movi	r2,13
    e9d8:	18800015 	stw	r2,0(r3)
    e9dc:	00000406 	br	e9f0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e9e0:	000e8d00 	call	e8d0 <alt_get_errno>
    e9e4:	1007883a 	mov	r3,r2
    e9e8:	00801444 	movi	r2,81
    e9ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e9f0:	00bfffc4 	movi	r2,-1
}
    e9f4:	e037883a 	mov	sp,fp
    e9f8:	dfc00117 	ldw	ra,4(sp)
    e9fc:	df000017 	ldw	fp,0(sp)
    ea00:	dec00204 	addi	sp,sp,8
    ea04:	f800283a 	ret

0000ea08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ea08:	defffe04 	addi	sp,sp,-8
    ea0c:	df000115 	stw	fp,4(sp)
    ea10:	df000104 	addi	fp,sp,4
    ea14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	108000d0 	cmplti	r2,r2,3
    ea20:	10000d1e 	bne	r2,zero,ea58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ea24:	00900034 	movhi	r2,16384
    ea28:	10835204 	addi	r2,r2,3400
    ea2c:	e0ffff17 	ldw	r3,-4(fp)
    ea30:	18c00324 	muli	r3,r3,12
    ea34:	10c5883a 	add	r2,r2,r3
    ea38:	10800204 	addi	r2,r2,8
    ea3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ea40:	00900034 	movhi	r2,16384
    ea44:	10835204 	addi	r2,r2,3400
    ea48:	e0ffff17 	ldw	r3,-4(fp)
    ea4c:	18c00324 	muli	r3,r3,12
    ea50:	10c5883a 	add	r2,r2,r3
    ea54:	10000015 	stw	zero,0(r2)
  }
}
    ea58:	0001883a 	nop
    ea5c:	e037883a 	mov	sp,fp
    ea60:	df000017 	ldw	fp,0(sp)
    ea64:	dec00104 	addi	sp,sp,4
    ea68:	f800283a 	ret

0000ea6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ea6c:	defff904 	addi	sp,sp,-28
    ea70:	df000615 	stw	fp,24(sp)
    ea74:	df000604 	addi	fp,sp,24
    ea78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea7c:	0005303a 	rdctl	r2,status
    ea80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea84:	e0fffe17 	ldw	r3,-8(fp)
    ea88:	00bfff84 	movi	r2,-2
    ea8c:	1884703a 	and	r2,r3,r2
    ea90:	1001703a 	wrctl	status,r2
  
  return context;
    ea94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ea98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea9c:	d0a00c17 	ldw	r2,-32720(gp)
    eaa0:	10c000c4 	addi	r3,r2,3
    eaa4:	00bfff04 	movi	r2,-4
    eaa8:	1884703a 	and	r2,r3,r2
    eaac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eab0:	d0e00c17 	ldw	r3,-32720(gp)
    eab4:	e0bfff17 	ldw	r2,-4(fp)
    eab8:	1887883a 	add	r3,r3,r2
    eabc:	00a00034 	movhi	r2,32768
    eac0:	10800004 	addi	r2,r2,0
    eac4:	10c0062e 	bgeu	r2,r3,eae0 <sbrk+0x74>
    eac8:	e0bffb17 	ldw	r2,-20(fp)
    eacc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ead0:	e0bffa17 	ldw	r2,-24(fp)
    ead4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ead8:	00bfffc4 	movi	r2,-1
    eadc:	00000b06 	br	eb0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    eae0:	d0a00c17 	ldw	r2,-32720(gp)
    eae4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    eae8:	d0e00c17 	ldw	r3,-32720(gp)
    eaec:	e0bfff17 	ldw	r2,-4(fp)
    eaf0:	1885883a 	add	r2,r3,r2
    eaf4:	d0a00c15 	stw	r2,-32720(gp)
    eaf8:	e0bffb17 	ldw	r2,-20(fp)
    eafc:	e0bffc15 	stw	r2,-16(fp)
    eb00:	e0bffc17 	ldw	r2,-16(fp)
    eb04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    eb08:	e0bffd17 	ldw	r2,-12(fp)
} 
    eb0c:	e037883a 	mov	sp,fp
    eb10:	df000017 	ldw	fp,0(sp)
    eb14:	dec00104 	addi	sp,sp,4
    eb18:	f800283a 	ret

0000eb1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb1c:	defffe04 	addi	sp,sp,-8
    eb20:	dfc00115 	stw	ra,4(sp)
    eb24:	df000015 	stw	fp,0(sp)
    eb28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb2c:	d0a00b17 	ldw	r2,-32724(gp)
    eb30:	10000326 	beq	r2,zero,eb40 <alt_get_errno+0x24>
    eb34:	d0a00b17 	ldw	r2,-32724(gp)
    eb38:	103ee83a 	callr	r2
    eb3c:	00000106 	br	eb44 <alt_get_errno+0x28>
    eb40:	d0a01004 	addi	r2,gp,-32704
}
    eb44:	e037883a 	mov	sp,fp
    eb48:	dfc00117 	ldw	ra,4(sp)
    eb4c:	df000017 	ldw	fp,0(sp)
    eb50:	dec00204 	addi	sp,sp,8
    eb54:	f800283a 	ret

0000eb58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    eb58:	defff904 	addi	sp,sp,-28
    eb5c:	dfc00615 	stw	ra,24(sp)
    eb60:	df000515 	stw	fp,20(sp)
    eb64:	df000504 	addi	fp,sp,20
    eb68:	e13ffd15 	stw	r4,-12(fp)
    eb6c:	e17ffe15 	stw	r5,-8(fp)
    eb70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb74:	e0bffd17 	ldw	r2,-12(fp)
    eb78:	10000616 	blt	r2,zero,eb94 <write+0x3c>
    eb7c:	e0bffd17 	ldw	r2,-12(fp)
    eb80:	10c00324 	muli	r3,r2,12
    eb84:	00900034 	movhi	r2,16384
    eb88:	10835204 	addi	r2,r2,3400
    eb8c:	1885883a 	add	r2,r3,r2
    eb90:	00000106 	br	eb98 <write+0x40>
    eb94:	0005883a 	mov	r2,zero
    eb98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eb9c:	e0bffb17 	ldw	r2,-20(fp)
    eba0:	10002126 	beq	r2,zero,ec28 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    eba4:	e0bffb17 	ldw	r2,-20(fp)
    eba8:	10800217 	ldw	r2,8(r2)
    ebac:	108000cc 	andi	r2,r2,3
    ebb0:	10001826 	beq	r2,zero,ec14 <write+0xbc>
    ebb4:	e0bffb17 	ldw	r2,-20(fp)
    ebb8:	10800017 	ldw	r2,0(r2)
    ebbc:	10800617 	ldw	r2,24(r2)
    ebc0:	10001426 	beq	r2,zero,ec14 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ebc4:	e0bffb17 	ldw	r2,-20(fp)
    ebc8:	10800017 	ldw	r2,0(r2)
    ebcc:	10800617 	ldw	r2,24(r2)
    ebd0:	e0ffff17 	ldw	r3,-4(fp)
    ebd4:	180d883a 	mov	r6,r3
    ebd8:	e17ffe17 	ldw	r5,-8(fp)
    ebdc:	e13ffb17 	ldw	r4,-20(fp)
    ebe0:	103ee83a 	callr	r2
    ebe4:	e0bffc15 	stw	r2,-16(fp)
    ebe8:	e0bffc17 	ldw	r2,-16(fp)
    ebec:	1000070e 	bge	r2,zero,ec0c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ebf0:	000eb1c0 	call	eb1c <alt_get_errno>
    ebf4:	1007883a 	mov	r3,r2
    ebf8:	e0bffc17 	ldw	r2,-16(fp)
    ebfc:	0085c83a 	sub	r2,zero,r2
    ec00:	18800015 	stw	r2,0(r3)
        return -1;
    ec04:	00bfffc4 	movi	r2,-1
    ec08:	00000c06 	br	ec3c <write+0xe4>
      }
      return rval;
    ec0c:	e0bffc17 	ldw	r2,-16(fp)
    ec10:	00000a06 	br	ec3c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ec14:	000eb1c0 	call	eb1c <alt_get_errno>
    ec18:	1007883a 	mov	r3,r2
    ec1c:	00800344 	movi	r2,13
    ec20:	18800015 	stw	r2,0(r3)
    ec24:	00000406 	br	ec38 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ec28:	000eb1c0 	call	eb1c <alt_get_errno>
    ec2c:	1007883a 	mov	r3,r2
    ec30:	00801444 	movi	r2,81
    ec34:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ec38:	00bfffc4 	movi	r2,-1
}
    ec3c:	e037883a 	mov	sp,fp
    ec40:	dfc00117 	ldw	ra,4(sp)
    ec44:	df000017 	ldw	fp,0(sp)
    ec48:	dec00204 	addi	sp,sp,8
    ec4c:	f800283a 	ret

0000ec50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ec50:	defffd04 	addi	sp,sp,-12
    ec54:	dfc00215 	stw	ra,8(sp)
    ec58:	df000115 	stw	fp,4(sp)
    ec5c:	df000104 	addi	fp,sp,4
    ec60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ec64:	d1600804 	addi	r5,gp,-32736
    ec68:	e13fff17 	ldw	r4,-4(fp)
    ec6c:	0010b740 	call	10b74 <alt_dev_llist_insert>
}
    ec70:	e037883a 	mov	sp,fp
    ec74:	dfc00117 	ldw	ra,4(sp)
    ec78:	df000017 	ldw	fp,0(sp)
    ec7c:	dec00204 	addi	sp,sp,8
    ec80:	f800283a 	ret

0000ec84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ec84:	defffd04 	addi	sp,sp,-12
    ec88:	dfc00215 	stw	ra,8(sp)
    ec8c:	df000115 	stw	fp,4(sp)
    ec90:	df000104 	addi	fp,sp,4
    ec94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    ec98:	00114cc0 	call	114cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ec9c:	00800044 	movi	r2,1
    eca0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    eca4:	0001883a 	nop
    eca8:	e037883a 	mov	sp,fp
    ecac:	dfc00117 	ldw	ra,4(sp)
    ecb0:	df000017 	ldw	fp,0(sp)
    ecb4:	dec00204 	addi	sp,sp,8
    ecb8:	f800283a 	ret

0000ecbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ecbc:	defffb04 	addi	sp,sp,-20
    ecc0:	dfc00415 	stw	ra,16(sp)
    ecc4:	df000315 	stw	fp,12(sp)
    ecc8:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    eccc:	01c00204 	movi	r7,8
    ecd0:	000d883a 	mov	r6,zero
    ecd4:	000b883a 	mov	r5,zero
    ecd8:	013fc834 	movhi	r4,65312
    ecdc:	21080004 	addi	r4,r4,8192
    ece0:	00100980 	call	10098 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    ece4:	01800204 	movi	r6,8
    ece8:	000b883a 	mov	r5,zero
    ecec:	01100034 	movhi	r4,16384
    ecf0:	2103bc04 	addi	r4,r4,3824
    ecf4:	000f71c0 	call	f71c <altera_avalon_jtag_uart_init>
    ecf8:	01100034 	movhi	r4,16384
    ecfc:	2103b204 	addi	r4,r4,3784
    ed00:	000ec500 	call	ec50 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    ed04:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( GPS_UART, GPS_UART);
    ed08:	01800104 	movi	r6,4
    ed0c:	000b883a 	mov	r5,zero
    ed10:	01100034 	movhi	r4,16384
    ed14:	2107d404 	addi	r4,r4,8016
    ed18:	00102240 	call	10224 <altera_avalon_uart_init>
    ed1c:	01100034 	movhi	r4,16384
    ed20:	2107ca04 	addi	r4,r4,7976
    ed24:	000ec500 	call	ec50 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    ed28:	00900034 	movhi	r2,16384
    ed2c:	1087fb04 	addi	r2,r2,8172
    ed30:	10800a17 	ldw	r2,40(r2)
    ed34:	10800017 	ldw	r2,0(r2)
    ed38:	1007883a 	mov	r3,r2
    ed3c:	00900034 	movhi	r2,16384
    ed40:	1087fb04 	addi	r2,r2,8172
    ed44:	10c00b15 	stw	r3,44(r2)
    ed48:	00900034 	movhi	r2,16384
    ed4c:	1087fb04 	addi	r2,r2,8172
    ed50:	10800a17 	ldw	r2,40(r2)
    ed54:	10800104 	addi	r2,r2,4
    ed58:	10800017 	ldw	r2,0(r2)
    ed5c:	1007883a 	mov	r3,r2
    ed60:	00900034 	movhi	r2,16384
    ed64:	1087fb04 	addi	r2,r2,8172
    ed68:	10c00c15 	stw	r3,48(r2)
    ed6c:	00900034 	movhi	r2,16384
    ed70:	1087fb04 	addi	r2,r2,8172
    ed74:	10800a17 	ldw	r2,40(r2)
    ed78:	10800204 	addi	r2,r2,8
    ed7c:	10800017 	ldw	r2,0(r2)
    ed80:	10ffffcc 	andi	r3,r2,65535
    ed84:	00900034 	movhi	r2,16384
    ed88:	1087fb04 	addi	r2,r2,8172
    ed8c:	10c01115 	stw	r3,68(r2)
    ed90:	00900034 	movhi	r2,16384
    ed94:	1087fb04 	addi	r2,r2,8172
    ed98:	10800a17 	ldw	r2,40(r2)
    ed9c:	10800204 	addi	r2,r2,8
    eda0:	10800017 	ldw	r2,0(r2)
    eda4:	1006d43a 	srli	r3,r2,16
    eda8:	00900034 	movhi	r2,16384
    edac:	1087fb04 	addi	r2,r2,8172
    edb0:	10c01215 	stw	r3,72(r2)
    edb4:	00900034 	movhi	r2,16384
    edb8:	1087fb04 	addi	r2,r2,8172
    edbc:	10800a17 	ldw	r2,40(r2)
    edc0:	10800304 	addi	r2,r2,12
    edc4:	10800017 	ldw	r2,0(r2)
    edc8:	1005d07a 	srai	r2,r2,1
    edcc:	10c0004c 	andi	r3,r2,1
    edd0:	00900034 	movhi	r2,16384
    edd4:	1087fb04 	addi	r2,r2,8172
    edd8:	10c00d15 	stw	r3,52(r2)
    eddc:	00900034 	movhi	r2,16384
    ede0:	1087fb04 	addi	r2,r2,8172
    ede4:	10800a17 	ldw	r2,40(r2)
    ede8:	10800304 	addi	r2,r2,12
    edec:	10800017 	ldw	r2,0(r2)
    edf0:	1005d23a 	srai	r2,r2,8
    edf4:	108003cc 	andi	r2,r2,15
    edf8:	10800044 	addi	r2,r2,1
    edfc:	1007883a 	mov	r3,r2
    ee00:	00900034 	movhi	r2,16384
    ee04:	1087fb04 	addi	r2,r2,8172
    ee08:	10c00e15 	stw	r3,56(r2)
    ee0c:	00900034 	movhi	r2,16384
    ee10:	1087fb04 	addi	r2,r2,8172
    ee14:	10800a17 	ldw	r2,40(r2)
    ee18:	10800304 	addi	r2,r2,12
    ee1c:	10800017 	ldw	r2,0(r2)
    ee20:	1005d1ba 	srai	r2,r2,6
    ee24:	108000cc 	andi	r2,r2,3
    ee28:	10800044 	addi	r2,r2,1
    ee2c:	1007883a 	mov	r3,r2
    ee30:	00900034 	movhi	r2,16384
    ee34:	1087fb04 	addi	r2,r2,8172
    ee38:	10c00f15 	stw	r3,60(r2)
    ee3c:	00900034 	movhi	r2,16384
    ee40:	1087fb04 	addi	r2,r2,8172
    ee44:	10800e17 	ldw	r2,56(r2)
    ee48:	1007883a 	mov	r3,r2
    ee4c:	00900034 	movhi	r2,16384
    ee50:	1087fb04 	addi	r2,r2,8172
    ee54:	10800f17 	ldw	r2,60(r2)
    ee58:	1885383a 	mul	r2,r3,r2
    ee5c:	e0bffd05 	stb	r2,-12(fp)
    ee60:	e0bffd03 	ldbu	r2,-12(fp)
    ee64:	10800268 	cmpgeui	r2,r2,9
    ee68:	1000051e 	bne	r2,zero,ee80 <alt_sys_init+0x1c4>
    ee6c:	00900034 	movhi	r2,16384
    ee70:	1087fb04 	addi	r2,r2,8172
    ee74:	00c00044 	movi	r3,1
    ee78:	10c01015 	stw	r3,64(r2)
    ee7c:	00000c06 	br	eeb0 <alt_sys_init+0x1f4>
    ee80:	e0bffd03 	ldbu	r2,-12(fp)
    ee84:	10800468 	cmpgeui	r2,r2,17
    ee88:	1000051e 	bne	r2,zero,eea0 <alt_sys_init+0x1e4>
    ee8c:	00900034 	movhi	r2,16384
    ee90:	1087fb04 	addi	r2,r2,8172
    ee94:	00c00084 	movi	r3,2
    ee98:	10c01015 	stw	r3,64(r2)
    ee9c:	00000406 	br	eeb0 <alt_sys_init+0x1f4>
    eea0:	00900034 	movhi	r2,16384
    eea4:	1087fb04 	addi	r2,r2,8172
    eea8:	00c00104 	movi	r3,4
    eeac:	10c01015 	stw	r3,64(r2)
    eeb0:	00900034 	movhi	r2,16384
    eeb4:	1087fb04 	addi	r2,r2,8172
    eeb8:	10800a17 	ldw	r2,40(r2)
    eebc:	10800304 	addi	r2,r2,12
    eec0:	10800017 	ldw	r2,0(r2)
    eec4:	1005d43a 	srai	r2,r2,16
    eec8:	e0bffd45 	stb	r2,-11(fp)
    eecc:	00900034 	movhi	r2,16384
    eed0:	1087fb04 	addi	r2,r2,8172
    eed4:	10800a17 	ldw	r2,40(r2)
    eed8:	10800304 	addi	r2,r2,12
    eedc:	10800017 	ldw	r2,0(r2)
    eee0:	1004d63a 	srli	r2,r2,24
    eee4:	e0bffd85 	stb	r2,-10(fp)
    eee8:	00900034 	movhi	r2,16384
    eeec:	1087fb04 	addi	r2,r2,8172
    eef0:	10801017 	ldw	r2,64(r2)
    eef4:	10800058 	cmpnei	r2,r2,1
    eef8:	1000041e 	bne	r2,zero,ef0c <alt_sys_init+0x250>
    eefc:	00900034 	movhi	r2,16384
    ef00:	1087fb04 	addi	r2,r2,8172
    ef04:	10001315 	stw	zero,76(r2)
    ef08:	00000e06 	br	ef44 <alt_sys_init+0x288>
    ef0c:	00900034 	movhi	r2,16384
    ef10:	1087fb04 	addi	r2,r2,8172
    ef14:	10801017 	ldw	r2,64(r2)
    ef18:	10800098 	cmpnei	r2,r2,2
    ef1c:	1000051e 	bne	r2,zero,ef34 <alt_sys_init+0x278>
    ef20:	00900034 	movhi	r2,16384
    ef24:	1087fb04 	addi	r2,r2,8172
    ef28:	00c00044 	movi	r3,1
    ef2c:	10c01315 	stw	r3,76(r2)
    ef30:	00000406 	br	ef44 <alt_sys_init+0x288>
    ef34:	00900034 	movhi	r2,16384
    ef38:	1087fb04 	addi	r2,r2,8172
    ef3c:	00c00084 	movi	r3,2
    ef40:	10c01315 	stw	r3,76(r2)
    ef44:	e0bffd43 	ldbu	r2,-11(fp)
    ef48:	00c00804 	movi	r3,32
    ef4c:	1885c83a 	sub	r2,r3,r2
    ef50:	00ffffc4 	movi	r3,-1
    ef54:	1886d83a 	srl	r3,r3,r2
    ef58:	00900034 	movhi	r2,16384
    ef5c:	1087fb04 	addi	r2,r2,8172
    ef60:	10c01415 	stw	r3,80(r2)
    ef64:	e0fffd43 	ldbu	r3,-11(fp)
    ef68:	00900034 	movhi	r2,16384
    ef6c:	1087fb04 	addi	r2,r2,8172
    ef70:	10801317 	ldw	r2,76(r2)
    ef74:	1887883a 	add	r3,r3,r2
    ef78:	00900034 	movhi	r2,16384
    ef7c:	1087fb04 	addi	r2,r2,8172
    ef80:	10c01515 	stw	r3,84(r2)
    ef84:	e0bffd83 	ldbu	r2,-10(fp)
    ef88:	00c00804 	movi	r3,32
    ef8c:	1885c83a 	sub	r2,r3,r2
    ef90:	00ffffc4 	movi	r3,-1
    ef94:	1886d83a 	srl	r3,r3,r2
    ef98:	00900034 	movhi	r2,16384
    ef9c:	1087fb04 	addi	r2,r2,8172
    efa0:	10c01615 	stw	r3,88(r2)
    efa4:	01100034 	movhi	r4,16384
    efa8:	2107fb04 	addi	r4,r4,8172
    efac:	000ec500 	call	ec50 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    efb0:	00900034 	movhi	r2,16384
    efb4:	10881204 	addi	r2,r2,8264
    efb8:	10800a17 	ldw	r2,40(r2)
    efbc:	10800017 	ldw	r2,0(r2)
    efc0:	1007883a 	mov	r3,r2
    efc4:	00900034 	movhi	r2,16384
    efc8:	10881204 	addi	r2,r2,8264
    efcc:	10c00b15 	stw	r3,44(r2)
    efd0:	00900034 	movhi	r2,16384
    efd4:	10881204 	addi	r2,r2,8264
    efd8:	10800a17 	ldw	r2,40(r2)
    efdc:	10800104 	addi	r2,r2,4
    efe0:	10800017 	ldw	r2,0(r2)
    efe4:	1007883a 	mov	r3,r2
    efe8:	00900034 	movhi	r2,16384
    efec:	10881204 	addi	r2,r2,8264
    eff0:	10c00c15 	stw	r3,48(r2)
    eff4:	00900034 	movhi	r2,16384
    eff8:	10881204 	addi	r2,r2,8264
    effc:	10800a17 	ldw	r2,40(r2)
    f000:	10800204 	addi	r2,r2,8
    f004:	10800017 	ldw	r2,0(r2)
    f008:	10ffffcc 	andi	r3,r2,65535
    f00c:	00900034 	movhi	r2,16384
    f010:	10881204 	addi	r2,r2,8264
    f014:	10c01115 	stw	r3,68(r2)
    f018:	00900034 	movhi	r2,16384
    f01c:	10881204 	addi	r2,r2,8264
    f020:	10800a17 	ldw	r2,40(r2)
    f024:	10800204 	addi	r2,r2,8
    f028:	10800017 	ldw	r2,0(r2)
    f02c:	1006d43a 	srli	r3,r2,16
    f030:	00900034 	movhi	r2,16384
    f034:	10881204 	addi	r2,r2,8264
    f038:	10c01215 	stw	r3,72(r2)
    f03c:	00900034 	movhi	r2,16384
    f040:	10881204 	addi	r2,r2,8264
    f044:	10800a17 	ldw	r2,40(r2)
    f048:	10800304 	addi	r2,r2,12
    f04c:	10800017 	ldw	r2,0(r2)
    f050:	1005d07a 	srai	r2,r2,1
    f054:	10c0004c 	andi	r3,r2,1
    f058:	00900034 	movhi	r2,16384
    f05c:	10881204 	addi	r2,r2,8264
    f060:	10c00d15 	stw	r3,52(r2)
    f064:	00900034 	movhi	r2,16384
    f068:	10881204 	addi	r2,r2,8264
    f06c:	10800a17 	ldw	r2,40(r2)
    f070:	10800304 	addi	r2,r2,12
    f074:	10800017 	ldw	r2,0(r2)
    f078:	1005d23a 	srai	r2,r2,8
    f07c:	108003cc 	andi	r2,r2,15
    f080:	10800044 	addi	r2,r2,1
    f084:	1007883a 	mov	r3,r2
    f088:	00900034 	movhi	r2,16384
    f08c:	10881204 	addi	r2,r2,8264
    f090:	10c00e15 	stw	r3,56(r2)
    f094:	00900034 	movhi	r2,16384
    f098:	10881204 	addi	r2,r2,8264
    f09c:	10800a17 	ldw	r2,40(r2)
    f0a0:	10800304 	addi	r2,r2,12
    f0a4:	10800017 	ldw	r2,0(r2)
    f0a8:	1005d1ba 	srai	r2,r2,6
    f0ac:	108000cc 	andi	r2,r2,3
    f0b0:	10800044 	addi	r2,r2,1
    f0b4:	1007883a 	mov	r3,r2
    f0b8:	00900034 	movhi	r2,16384
    f0bc:	10881204 	addi	r2,r2,8264
    f0c0:	10c00f15 	stw	r3,60(r2)
    f0c4:	00900034 	movhi	r2,16384
    f0c8:	10881204 	addi	r2,r2,8264
    f0cc:	10800e17 	ldw	r2,56(r2)
    f0d0:	1007883a 	mov	r3,r2
    f0d4:	00900034 	movhi	r2,16384
    f0d8:	10881204 	addi	r2,r2,8264
    f0dc:	10800f17 	ldw	r2,60(r2)
    f0e0:	1885383a 	mul	r2,r3,r2
    f0e4:	e0bffdc5 	stb	r2,-9(fp)
    f0e8:	e0bffdc3 	ldbu	r2,-9(fp)
    f0ec:	10800268 	cmpgeui	r2,r2,9
    f0f0:	1000051e 	bne	r2,zero,f108 <alt_sys_init+0x44c>
    f0f4:	00900034 	movhi	r2,16384
    f0f8:	10881204 	addi	r2,r2,8264
    f0fc:	00c00044 	movi	r3,1
    f100:	10c01015 	stw	r3,64(r2)
    f104:	00000c06 	br	f138 <alt_sys_init+0x47c>
    f108:	e0bffdc3 	ldbu	r2,-9(fp)
    f10c:	10800468 	cmpgeui	r2,r2,17
    f110:	1000051e 	bne	r2,zero,f128 <alt_sys_init+0x46c>
    f114:	00900034 	movhi	r2,16384
    f118:	10881204 	addi	r2,r2,8264
    f11c:	00c00084 	movi	r3,2
    f120:	10c01015 	stw	r3,64(r2)
    f124:	00000406 	br	f138 <alt_sys_init+0x47c>
    f128:	00900034 	movhi	r2,16384
    f12c:	10881204 	addi	r2,r2,8264
    f130:	00c00104 	movi	r3,4
    f134:	10c01015 	stw	r3,64(r2)
    f138:	00900034 	movhi	r2,16384
    f13c:	10881204 	addi	r2,r2,8264
    f140:	10800a17 	ldw	r2,40(r2)
    f144:	10800304 	addi	r2,r2,12
    f148:	10800017 	ldw	r2,0(r2)
    f14c:	1005d43a 	srai	r2,r2,16
    f150:	e0bffe05 	stb	r2,-8(fp)
    f154:	00900034 	movhi	r2,16384
    f158:	10881204 	addi	r2,r2,8264
    f15c:	10800a17 	ldw	r2,40(r2)
    f160:	10800304 	addi	r2,r2,12
    f164:	10800017 	ldw	r2,0(r2)
    f168:	1004d63a 	srli	r2,r2,24
    f16c:	e0bffe45 	stb	r2,-7(fp)
    f170:	00900034 	movhi	r2,16384
    f174:	10881204 	addi	r2,r2,8264
    f178:	10801017 	ldw	r2,64(r2)
    f17c:	10800058 	cmpnei	r2,r2,1
    f180:	1000041e 	bne	r2,zero,f194 <alt_sys_init+0x4d8>
    f184:	00900034 	movhi	r2,16384
    f188:	10881204 	addi	r2,r2,8264
    f18c:	10001315 	stw	zero,76(r2)
    f190:	00000e06 	br	f1cc <alt_sys_init+0x510>
    f194:	00900034 	movhi	r2,16384
    f198:	10881204 	addi	r2,r2,8264
    f19c:	10801017 	ldw	r2,64(r2)
    f1a0:	10800098 	cmpnei	r2,r2,2
    f1a4:	1000051e 	bne	r2,zero,f1bc <alt_sys_init+0x500>
    f1a8:	00900034 	movhi	r2,16384
    f1ac:	10881204 	addi	r2,r2,8264
    f1b0:	00c00044 	movi	r3,1
    f1b4:	10c01315 	stw	r3,76(r2)
    f1b8:	00000406 	br	f1cc <alt_sys_init+0x510>
    f1bc:	00900034 	movhi	r2,16384
    f1c0:	10881204 	addi	r2,r2,8264
    f1c4:	00c00084 	movi	r3,2
    f1c8:	10c01315 	stw	r3,76(r2)
    f1cc:	e0bffe03 	ldbu	r2,-8(fp)
    f1d0:	00c00804 	movi	r3,32
    f1d4:	1885c83a 	sub	r2,r3,r2
    f1d8:	00ffffc4 	movi	r3,-1
    f1dc:	1886d83a 	srl	r3,r3,r2
    f1e0:	00900034 	movhi	r2,16384
    f1e4:	10881204 	addi	r2,r2,8264
    f1e8:	10c01415 	stw	r3,80(r2)
    f1ec:	e0fffe03 	ldbu	r3,-8(fp)
    f1f0:	00900034 	movhi	r2,16384
    f1f4:	10881204 	addi	r2,r2,8264
    f1f8:	10801317 	ldw	r2,76(r2)
    f1fc:	1887883a 	add	r3,r3,r2
    f200:	00900034 	movhi	r2,16384
    f204:	10881204 	addi	r2,r2,8264
    f208:	10c01515 	stw	r3,84(r2)
    f20c:	e0bffe43 	ldbu	r2,-7(fp)
    f210:	00c00804 	movi	r3,32
    f214:	1885c83a 	sub	r2,r3,r2
    f218:	00ffffc4 	movi	r3,-1
    f21c:	1886d83a 	srl	r3,r3,r2
    f220:	00900034 	movhi	r2,16384
    f224:	10881204 	addi	r2,r2,8264
    f228:	10c01615 	stw	r3,88(r2)
    f22c:	01100034 	movhi	r4,16384
    f230:	21081204 	addi	r4,r4,8264
    f234:	000ec500 	call	ec50 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    f238:	00900034 	movhi	r2,16384
    f23c:	10882904 	addi	r2,r2,8356
    f240:	10800a17 	ldw	r2,40(r2)
    f244:	10800017 	ldw	r2,0(r2)
    f248:	1007883a 	mov	r3,r2
    f24c:	00900034 	movhi	r2,16384
    f250:	10882904 	addi	r2,r2,8356
    f254:	10c00b15 	stw	r3,44(r2)
    f258:	00900034 	movhi	r2,16384
    f25c:	10882904 	addi	r2,r2,8356
    f260:	10800a17 	ldw	r2,40(r2)
    f264:	10800104 	addi	r2,r2,4
    f268:	10800017 	ldw	r2,0(r2)
    f26c:	1007883a 	mov	r3,r2
    f270:	00900034 	movhi	r2,16384
    f274:	10882904 	addi	r2,r2,8356
    f278:	10c00c15 	stw	r3,48(r2)
    f27c:	00900034 	movhi	r2,16384
    f280:	10882904 	addi	r2,r2,8356
    f284:	10800a17 	ldw	r2,40(r2)
    f288:	10800204 	addi	r2,r2,8
    f28c:	10800017 	ldw	r2,0(r2)
    f290:	10ffffcc 	andi	r3,r2,65535
    f294:	00900034 	movhi	r2,16384
    f298:	10882904 	addi	r2,r2,8356
    f29c:	10c01115 	stw	r3,68(r2)
    f2a0:	00900034 	movhi	r2,16384
    f2a4:	10882904 	addi	r2,r2,8356
    f2a8:	10800a17 	ldw	r2,40(r2)
    f2ac:	10800204 	addi	r2,r2,8
    f2b0:	10800017 	ldw	r2,0(r2)
    f2b4:	1006d43a 	srli	r3,r2,16
    f2b8:	00900034 	movhi	r2,16384
    f2bc:	10882904 	addi	r2,r2,8356
    f2c0:	10c01215 	stw	r3,72(r2)
    f2c4:	00900034 	movhi	r2,16384
    f2c8:	10882904 	addi	r2,r2,8356
    f2cc:	10800a17 	ldw	r2,40(r2)
    f2d0:	10800304 	addi	r2,r2,12
    f2d4:	10800017 	ldw	r2,0(r2)
    f2d8:	1005d07a 	srai	r2,r2,1
    f2dc:	10c0004c 	andi	r3,r2,1
    f2e0:	00900034 	movhi	r2,16384
    f2e4:	10882904 	addi	r2,r2,8356
    f2e8:	10c00d15 	stw	r3,52(r2)
    f2ec:	00900034 	movhi	r2,16384
    f2f0:	10882904 	addi	r2,r2,8356
    f2f4:	10800a17 	ldw	r2,40(r2)
    f2f8:	10800304 	addi	r2,r2,12
    f2fc:	10800017 	ldw	r2,0(r2)
    f300:	1005d23a 	srai	r2,r2,8
    f304:	108003cc 	andi	r2,r2,15
    f308:	10800044 	addi	r2,r2,1
    f30c:	1007883a 	mov	r3,r2
    f310:	00900034 	movhi	r2,16384
    f314:	10882904 	addi	r2,r2,8356
    f318:	10c00e15 	stw	r3,56(r2)
    f31c:	00900034 	movhi	r2,16384
    f320:	10882904 	addi	r2,r2,8356
    f324:	10800a17 	ldw	r2,40(r2)
    f328:	10800304 	addi	r2,r2,12
    f32c:	10800017 	ldw	r2,0(r2)
    f330:	1005d1ba 	srai	r2,r2,6
    f334:	108000cc 	andi	r2,r2,3
    f338:	10800044 	addi	r2,r2,1
    f33c:	1007883a 	mov	r3,r2
    f340:	00900034 	movhi	r2,16384
    f344:	10882904 	addi	r2,r2,8356
    f348:	10c00f15 	stw	r3,60(r2)
    f34c:	00900034 	movhi	r2,16384
    f350:	10882904 	addi	r2,r2,8356
    f354:	10800e17 	ldw	r2,56(r2)
    f358:	1007883a 	mov	r3,r2
    f35c:	00900034 	movhi	r2,16384
    f360:	10882904 	addi	r2,r2,8356
    f364:	10800f17 	ldw	r2,60(r2)
    f368:	1885383a 	mul	r2,r3,r2
    f36c:	e0bffe85 	stb	r2,-6(fp)
    f370:	e0bffe83 	ldbu	r2,-6(fp)
    f374:	10800268 	cmpgeui	r2,r2,9
    f378:	1000051e 	bne	r2,zero,f390 <alt_sys_init+0x6d4>
    f37c:	00900034 	movhi	r2,16384
    f380:	10882904 	addi	r2,r2,8356
    f384:	00c00044 	movi	r3,1
    f388:	10c01015 	stw	r3,64(r2)
    f38c:	00000c06 	br	f3c0 <alt_sys_init+0x704>
    f390:	e0bffe83 	ldbu	r2,-6(fp)
    f394:	10800468 	cmpgeui	r2,r2,17
    f398:	1000051e 	bne	r2,zero,f3b0 <alt_sys_init+0x6f4>
    f39c:	00900034 	movhi	r2,16384
    f3a0:	10882904 	addi	r2,r2,8356
    f3a4:	00c00084 	movi	r3,2
    f3a8:	10c01015 	stw	r3,64(r2)
    f3ac:	00000406 	br	f3c0 <alt_sys_init+0x704>
    f3b0:	00900034 	movhi	r2,16384
    f3b4:	10882904 	addi	r2,r2,8356
    f3b8:	00c00104 	movi	r3,4
    f3bc:	10c01015 	stw	r3,64(r2)
    f3c0:	00900034 	movhi	r2,16384
    f3c4:	10882904 	addi	r2,r2,8356
    f3c8:	10800a17 	ldw	r2,40(r2)
    f3cc:	10800304 	addi	r2,r2,12
    f3d0:	10800017 	ldw	r2,0(r2)
    f3d4:	1005d43a 	srai	r2,r2,16
    f3d8:	e0bffec5 	stb	r2,-5(fp)
    f3dc:	00900034 	movhi	r2,16384
    f3e0:	10882904 	addi	r2,r2,8356
    f3e4:	10800a17 	ldw	r2,40(r2)
    f3e8:	10800304 	addi	r2,r2,12
    f3ec:	10800017 	ldw	r2,0(r2)
    f3f0:	1004d63a 	srli	r2,r2,24
    f3f4:	e0bfff05 	stb	r2,-4(fp)
    f3f8:	00900034 	movhi	r2,16384
    f3fc:	10882904 	addi	r2,r2,8356
    f400:	10801017 	ldw	r2,64(r2)
    f404:	10800058 	cmpnei	r2,r2,1
    f408:	1000041e 	bne	r2,zero,f41c <alt_sys_init+0x760>
    f40c:	00900034 	movhi	r2,16384
    f410:	10882904 	addi	r2,r2,8356
    f414:	10001315 	stw	zero,76(r2)
    f418:	00000e06 	br	f454 <alt_sys_init+0x798>
    f41c:	00900034 	movhi	r2,16384
    f420:	10882904 	addi	r2,r2,8356
    f424:	10801017 	ldw	r2,64(r2)
    f428:	10800098 	cmpnei	r2,r2,2
    f42c:	1000051e 	bne	r2,zero,f444 <alt_sys_init+0x788>
    f430:	00900034 	movhi	r2,16384
    f434:	10882904 	addi	r2,r2,8356
    f438:	00c00044 	movi	r3,1
    f43c:	10c01315 	stw	r3,76(r2)
    f440:	00000406 	br	f454 <alt_sys_init+0x798>
    f444:	00900034 	movhi	r2,16384
    f448:	10882904 	addi	r2,r2,8356
    f44c:	00c00084 	movi	r3,2
    f450:	10c01315 	stw	r3,76(r2)
    f454:	e0bffec3 	ldbu	r2,-5(fp)
    f458:	00c00804 	movi	r3,32
    f45c:	1885c83a 	sub	r2,r3,r2
    f460:	00ffffc4 	movi	r3,-1
    f464:	1886d83a 	srl	r3,r3,r2
    f468:	00900034 	movhi	r2,16384
    f46c:	10882904 	addi	r2,r2,8356
    f470:	10c01415 	stw	r3,80(r2)
    f474:	e0fffec3 	ldbu	r3,-5(fp)
    f478:	00900034 	movhi	r2,16384
    f47c:	10882904 	addi	r2,r2,8356
    f480:	10801317 	ldw	r2,76(r2)
    f484:	1887883a 	add	r3,r3,r2
    f488:	00900034 	movhi	r2,16384
    f48c:	10882904 	addi	r2,r2,8356
    f490:	10c01515 	stw	r3,84(r2)
    f494:	e0bfff03 	ldbu	r2,-4(fp)
    f498:	00c00804 	movi	r3,32
    f49c:	1885c83a 	sub	r2,r3,r2
    f4a0:	00ffffc4 	movi	r3,-1
    f4a4:	1886d83a 	srl	r3,r3,r2
    f4a8:	00900034 	movhi	r2,16384
    f4ac:	10882904 	addi	r2,r2,8356
    f4b0:	10c01615 	stw	r3,88(r2)
    f4b4:	01100034 	movhi	r4,16384
    f4b8:	21082904 	addi	r4,r4,8356
    f4bc:	000ec500 	call	ec50 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    f4c0:	00900034 	movhi	r2,16384
    f4c4:	10884004 	addi	r2,r2,8448
    f4c8:	10800a17 	ldw	r2,40(r2)
    f4cc:	10800017 	ldw	r2,0(r2)
    f4d0:	10c003cc 	andi	r3,r2,15
    f4d4:	00900034 	movhi	r2,16384
    f4d8:	10884004 	addi	r2,r2,8448
    f4dc:	10c00b15 	stw	r3,44(r2)
    f4e0:	00900034 	movhi	r2,16384
    f4e4:	10884004 	addi	r2,r2,8448
    f4e8:	10800a17 	ldw	r2,40(r2)
    f4ec:	10800017 	ldw	r2,0(r2)
    f4f0:	1005d13a 	srai	r2,r2,4
    f4f4:	10c0004c 	andi	r3,r2,1
    f4f8:	00900034 	movhi	r2,16384
    f4fc:	10884004 	addi	r2,r2,8448
    f500:	10c00c15 	stw	r3,48(r2)
    f504:	00900034 	movhi	r2,16384
    f508:	10884004 	addi	r2,r2,8448
    f50c:	10800a17 	ldw	r2,40(r2)
    f510:	10800017 	ldw	r2,0(r2)
    f514:	1005d17a 	srai	r2,r2,5
    f518:	10c0004c 	andi	r3,r2,1
    f51c:	00900034 	movhi	r2,16384
    f520:	10884004 	addi	r2,r2,8448
    f524:	10c00d15 	stw	r3,52(r2)
    f528:	00900034 	movhi	r2,16384
    f52c:	10884004 	addi	r2,r2,8448
    f530:	10800a17 	ldw	r2,40(r2)
    f534:	10800017 	ldw	r2,0(r2)
    f538:	1005d43a 	srai	r2,r2,16
    f53c:	10c003cc 	andi	r3,r2,15
    f540:	00900034 	movhi	r2,16384
    f544:	10884004 	addi	r2,r2,8448
    f548:	10c00e15 	stw	r3,56(r2)
    f54c:	00900034 	movhi	r2,16384
    f550:	10884004 	addi	r2,r2,8448
    f554:	10800a17 	ldw	r2,40(r2)
    f558:	10800017 	ldw	r2,0(r2)
    f55c:	1005d53a 	srai	r2,r2,20
    f560:	10c0004c 	andi	r3,r2,1
    f564:	00900034 	movhi	r2,16384
    f568:	10884004 	addi	r2,r2,8448
    f56c:	10c00f15 	stw	r3,60(r2)
    f570:	00900034 	movhi	r2,16384
    f574:	10884004 	addi	r2,r2,8448
    f578:	10800a17 	ldw	r2,40(r2)
    f57c:	10800017 	ldw	r2,0(r2)
    f580:	1005d57a 	srai	r2,r2,21
    f584:	10c0004c 	andi	r3,r2,1
    f588:	00900034 	movhi	r2,16384
    f58c:	10884004 	addi	r2,r2,8448
    f590:	10c01015 	stw	r3,64(r2)
    f594:	01100034 	movhi	r4,16384
    f598:	21084004 	addi	r4,r4,8448
    f59c:	000ec500 	call	ec50 <alt_dev_reg>
}
    f5a0:	0001883a 	nop
    f5a4:	e037883a 	mov	sp,fp
    f5a8:	dfc00117 	ldw	ra,4(sp)
    f5ac:	df000017 	ldw	fp,0(sp)
    f5b0:	dec00204 	addi	sp,sp,8
    f5b4:	f800283a 	ret

0000f5b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f5b8:	defffa04 	addi	sp,sp,-24
    f5bc:	dfc00515 	stw	ra,20(sp)
    f5c0:	df000415 	stw	fp,16(sp)
    f5c4:	df000404 	addi	fp,sp,16
    f5c8:	e13ffd15 	stw	r4,-12(fp)
    f5cc:	e17ffe15 	stw	r5,-8(fp)
    f5d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f5d4:	e0bffd17 	ldw	r2,-12(fp)
    f5d8:	10800017 	ldw	r2,0(r2)
    f5dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f5e0:	e0bffc17 	ldw	r2,-16(fp)
    f5e4:	10c00a04 	addi	r3,r2,40
    f5e8:	e0bffd17 	ldw	r2,-12(fp)
    f5ec:	10800217 	ldw	r2,8(r2)
    f5f0:	100f883a 	mov	r7,r2
    f5f4:	e1bfff17 	ldw	r6,-4(fp)
    f5f8:	e17ffe17 	ldw	r5,-8(fp)
    f5fc:	1809883a 	mov	r4,r3
    f600:	000fbe00 	call	fbe0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f604:	e037883a 	mov	sp,fp
    f608:	dfc00117 	ldw	ra,4(sp)
    f60c:	df000017 	ldw	fp,0(sp)
    f610:	dec00204 	addi	sp,sp,8
    f614:	f800283a 	ret

0000f618 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f618:	defffa04 	addi	sp,sp,-24
    f61c:	dfc00515 	stw	ra,20(sp)
    f620:	df000415 	stw	fp,16(sp)
    f624:	df000404 	addi	fp,sp,16
    f628:	e13ffd15 	stw	r4,-12(fp)
    f62c:	e17ffe15 	stw	r5,-8(fp)
    f630:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f634:	e0bffd17 	ldw	r2,-12(fp)
    f638:	10800017 	ldw	r2,0(r2)
    f63c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f640:	e0bffc17 	ldw	r2,-16(fp)
    f644:	10c00a04 	addi	r3,r2,40
    f648:	e0bffd17 	ldw	r2,-12(fp)
    f64c:	10800217 	ldw	r2,8(r2)
    f650:	100f883a 	mov	r7,r2
    f654:	e1bfff17 	ldw	r6,-4(fp)
    f658:	e17ffe17 	ldw	r5,-8(fp)
    f65c:	1809883a 	mov	r4,r3
    f660:	000fdfc0 	call	fdfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f664:	e037883a 	mov	sp,fp
    f668:	dfc00117 	ldw	ra,4(sp)
    f66c:	df000017 	ldw	fp,0(sp)
    f670:	dec00204 	addi	sp,sp,8
    f674:	f800283a 	ret

0000f678 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f678:	defffc04 	addi	sp,sp,-16
    f67c:	dfc00315 	stw	ra,12(sp)
    f680:	df000215 	stw	fp,8(sp)
    f684:	df000204 	addi	fp,sp,8
    f688:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f68c:	e0bfff17 	ldw	r2,-4(fp)
    f690:	10800017 	ldw	r2,0(r2)
    f694:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f698:	e0bffe17 	ldw	r2,-8(fp)
    f69c:	10c00a04 	addi	r3,r2,40
    f6a0:	e0bfff17 	ldw	r2,-4(fp)
    f6a4:	10800217 	ldw	r2,8(r2)
    f6a8:	100b883a 	mov	r5,r2
    f6ac:	1809883a 	mov	r4,r3
    f6b0:	000fa880 	call	fa88 <altera_avalon_jtag_uart_close>
}
    f6b4:	e037883a 	mov	sp,fp
    f6b8:	dfc00117 	ldw	ra,4(sp)
    f6bc:	df000017 	ldw	fp,0(sp)
    f6c0:	dec00204 	addi	sp,sp,8
    f6c4:	f800283a 	ret

0000f6c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f6c8:	defffa04 	addi	sp,sp,-24
    f6cc:	dfc00515 	stw	ra,20(sp)
    f6d0:	df000415 	stw	fp,16(sp)
    f6d4:	df000404 	addi	fp,sp,16
    f6d8:	e13ffd15 	stw	r4,-12(fp)
    f6dc:	e17ffe15 	stw	r5,-8(fp)
    f6e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f6e4:	e0bffd17 	ldw	r2,-12(fp)
    f6e8:	10800017 	ldw	r2,0(r2)
    f6ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f6f0:	e0bffc17 	ldw	r2,-16(fp)
    f6f4:	10800a04 	addi	r2,r2,40
    f6f8:	e1bfff17 	ldw	r6,-4(fp)
    f6fc:	e17ffe17 	ldw	r5,-8(fp)
    f700:	1009883a 	mov	r4,r2
    f704:	000faf00 	call	faf0 <altera_avalon_jtag_uart_ioctl>
}
    f708:	e037883a 	mov	sp,fp
    f70c:	dfc00117 	ldw	ra,4(sp)
    f710:	df000017 	ldw	fp,0(sp)
    f714:	dec00204 	addi	sp,sp,8
    f718:	f800283a 	ret

0000f71c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f71c:	defffa04 	addi	sp,sp,-24
    f720:	dfc00515 	stw	ra,20(sp)
    f724:	df000415 	stw	fp,16(sp)
    f728:	df000404 	addi	fp,sp,16
    f72c:	e13ffd15 	stw	r4,-12(fp)
    f730:	e17ffe15 	stw	r5,-8(fp)
    f734:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f738:	e0bffd17 	ldw	r2,-12(fp)
    f73c:	00c00044 	movi	r3,1
    f740:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f744:	e0bffd17 	ldw	r2,-12(fp)
    f748:	10800017 	ldw	r2,0(r2)
    f74c:	10800104 	addi	r2,r2,4
    f750:	1007883a 	mov	r3,r2
    f754:	e0bffd17 	ldw	r2,-12(fp)
    f758:	10800817 	ldw	r2,32(r2)
    f75c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f760:	e0bffe17 	ldw	r2,-8(fp)
    f764:	e0ffff17 	ldw	r3,-4(fp)
    f768:	d8000015 	stw	zero,0(sp)
    f76c:	e1fffd17 	ldw	r7,-12(fp)
    f770:	01800074 	movhi	r6,1
    f774:	31bdf704 	addi	r6,r6,-2084
    f778:	180b883a 	mov	r5,r3
    f77c:	1009883a 	mov	r4,r2
    f780:	0010f480 	call	10f48 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f784:	e0bffd17 	ldw	r2,-12(fp)
    f788:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f78c:	e0bffd17 	ldw	r2,-12(fp)
    f790:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f794:	d0e01b17 	ldw	r3,-32660(gp)
    f798:	e1fffd17 	ldw	r7,-12(fp)
    f79c:	01800074 	movhi	r6,1
    f7a0:	31be7a04 	addi	r6,r6,-1560
    f7a4:	180b883a 	mov	r5,r3
    f7a8:	1009883a 	mov	r4,r2
    f7ac:	00109ec0 	call	109ec <alt_alarm_start>
    f7b0:	1000040e 	bge	r2,zero,f7c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f7b4:	e0fffd17 	ldw	r3,-12(fp)
    f7b8:	00a00034 	movhi	r2,32768
    f7bc:	10bfffc4 	addi	r2,r2,-1
    f7c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f7c4:	0001883a 	nop
    f7c8:	e037883a 	mov	sp,fp
    f7cc:	dfc00117 	ldw	ra,4(sp)
    f7d0:	df000017 	ldw	fp,0(sp)
    f7d4:	dec00204 	addi	sp,sp,8
    f7d8:	f800283a 	ret

0000f7dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f7dc:	defff804 	addi	sp,sp,-32
    f7e0:	df000715 	stw	fp,28(sp)
    f7e4:	df000704 	addi	fp,sp,28
    f7e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f7ec:	e0bfff17 	ldw	r2,-4(fp)
    f7f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f7f4:	e0bffb17 	ldw	r2,-20(fp)
    f7f8:	10800017 	ldw	r2,0(r2)
    f7fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f800:	e0bffc17 	ldw	r2,-16(fp)
    f804:	10800104 	addi	r2,r2,4
    f808:	10800037 	ldwio	r2,0(r2)
    f80c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f810:	e0bffd17 	ldw	r2,-12(fp)
    f814:	1080c00c 	andi	r2,r2,768
    f818:	10006d26 	beq	r2,zero,f9d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f81c:	e0bffd17 	ldw	r2,-12(fp)
    f820:	1080400c 	andi	r2,r2,256
    f824:	10003526 	beq	r2,zero,f8fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f828:	00800074 	movhi	r2,1
    f82c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f830:	e0bffb17 	ldw	r2,-20(fp)
    f834:	10800a17 	ldw	r2,40(r2)
    f838:	10800044 	addi	r2,r2,1
    f83c:	1081ffcc 	andi	r2,r2,2047
    f840:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f844:	e0bffb17 	ldw	r2,-20(fp)
    f848:	10c00b17 	ldw	r3,44(r2)
    f84c:	e0bffe17 	ldw	r2,-8(fp)
    f850:	18801526 	beq	r3,r2,f8a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f854:	e0bffc17 	ldw	r2,-16(fp)
    f858:	10800037 	ldwio	r2,0(r2)
    f85c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f860:	e0bff917 	ldw	r2,-28(fp)
    f864:	10a0000c 	andi	r2,r2,32768
    f868:	10001126 	beq	r2,zero,f8b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f86c:	e0bffb17 	ldw	r2,-20(fp)
    f870:	10800a17 	ldw	r2,40(r2)
    f874:	e0fff917 	ldw	r3,-28(fp)
    f878:	1809883a 	mov	r4,r3
    f87c:	e0fffb17 	ldw	r3,-20(fp)
    f880:	1885883a 	add	r2,r3,r2
    f884:	10800e04 	addi	r2,r2,56
    f888:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f88c:	e0bffb17 	ldw	r2,-20(fp)
    f890:	10800a17 	ldw	r2,40(r2)
    f894:	10800044 	addi	r2,r2,1
    f898:	10c1ffcc 	andi	r3,r2,2047
    f89c:	e0bffb17 	ldw	r2,-20(fp)
    f8a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f8a4:	003fe206 	br	f830 <__alt_data_end+0x8000f830>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f8a8:	0001883a 	nop
    f8ac:	00000106 	br	f8b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f8b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f8b4:	e0bff917 	ldw	r2,-28(fp)
    f8b8:	10bfffec 	andhi	r2,r2,65535
    f8bc:	10000f26 	beq	r2,zero,f8fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	10c00817 	ldw	r3,32(r2)
    f8c8:	00bfff84 	movi	r2,-2
    f8cc:	1886703a 	and	r3,r3,r2
    f8d0:	e0bffb17 	ldw	r2,-20(fp)
    f8d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f8d8:	e0bffc17 	ldw	r2,-16(fp)
    f8dc:	10800104 	addi	r2,r2,4
    f8e0:	1007883a 	mov	r3,r2
    f8e4:	e0bffb17 	ldw	r2,-20(fp)
    f8e8:	10800817 	ldw	r2,32(r2)
    f8ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f8f0:	e0bffc17 	ldw	r2,-16(fp)
    f8f4:	10800104 	addi	r2,r2,4
    f8f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f8fc:	e0bffd17 	ldw	r2,-12(fp)
    f900:	1080800c 	andi	r2,r2,512
    f904:	103fbe26 	beq	r2,zero,f800 <__alt_data_end+0x8000f800>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f908:	e0bffd17 	ldw	r2,-12(fp)
    f90c:	1004d43a 	srli	r2,r2,16
    f910:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f914:	00001406 	br	f968 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f918:	e0bffc17 	ldw	r2,-16(fp)
    f91c:	e0fffb17 	ldw	r3,-20(fp)
    f920:	18c00d17 	ldw	r3,52(r3)
    f924:	e13ffb17 	ldw	r4,-20(fp)
    f928:	20c7883a 	add	r3,r4,r3
    f92c:	18c20e04 	addi	r3,r3,2104
    f930:	18c00003 	ldbu	r3,0(r3)
    f934:	18c03fcc 	andi	r3,r3,255
    f938:	18c0201c 	xori	r3,r3,128
    f93c:	18ffe004 	addi	r3,r3,-128
    f940:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f944:	e0bffb17 	ldw	r2,-20(fp)
    f948:	10800d17 	ldw	r2,52(r2)
    f94c:	10800044 	addi	r2,r2,1
    f950:	10c1ffcc 	andi	r3,r2,2047
    f954:	e0bffb17 	ldw	r2,-20(fp)
    f958:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f95c:	e0bffa17 	ldw	r2,-24(fp)
    f960:	10bfffc4 	addi	r2,r2,-1
    f964:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f968:	e0bffa17 	ldw	r2,-24(fp)
    f96c:	10000526 	beq	r2,zero,f984 <altera_avalon_jtag_uart_irq+0x1a8>
    f970:	e0bffb17 	ldw	r2,-20(fp)
    f974:	10c00d17 	ldw	r3,52(r2)
    f978:	e0bffb17 	ldw	r2,-20(fp)
    f97c:	10800c17 	ldw	r2,48(r2)
    f980:	18bfe51e 	bne	r3,r2,f918 <__alt_data_end+0x8000f918>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f984:	e0bffa17 	ldw	r2,-24(fp)
    f988:	103f9d26 	beq	r2,zero,f800 <__alt_data_end+0x8000f800>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f98c:	e0bffb17 	ldw	r2,-20(fp)
    f990:	10c00817 	ldw	r3,32(r2)
    f994:	00bfff44 	movi	r2,-3
    f998:	1886703a 	and	r3,r3,r2
    f99c:	e0bffb17 	ldw	r2,-20(fp)
    f9a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f9a4:	e0bffb17 	ldw	r2,-20(fp)
    f9a8:	10800017 	ldw	r2,0(r2)
    f9ac:	10800104 	addi	r2,r2,4
    f9b0:	1007883a 	mov	r3,r2
    f9b4:	e0bffb17 	ldw	r2,-20(fp)
    f9b8:	10800817 	ldw	r2,32(r2)
    f9bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f9c0:	e0bffc17 	ldw	r2,-16(fp)
    f9c4:	10800104 	addi	r2,r2,4
    f9c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f9cc:	003f8c06 	br	f800 <__alt_data_end+0x8000f800>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f9d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f9d4:	0001883a 	nop
    f9d8:	e037883a 	mov	sp,fp
    f9dc:	df000017 	ldw	fp,0(sp)
    f9e0:	dec00104 	addi	sp,sp,4
    f9e4:	f800283a 	ret

0000f9e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f9e8:	defff804 	addi	sp,sp,-32
    f9ec:	df000715 	stw	fp,28(sp)
    f9f0:	df000704 	addi	fp,sp,28
    f9f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f9f8:	e0bffb17 	ldw	r2,-20(fp)
    f9fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fa00:	e0bff917 	ldw	r2,-28(fp)
    fa04:	10800017 	ldw	r2,0(r2)
    fa08:	10800104 	addi	r2,r2,4
    fa0c:	10800037 	ldwio	r2,0(r2)
    fa10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fa14:	e0bffa17 	ldw	r2,-24(fp)
    fa18:	1081000c 	andi	r2,r2,1024
    fa1c:	10000b26 	beq	r2,zero,fa4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fa20:	e0bff917 	ldw	r2,-28(fp)
    fa24:	10800017 	ldw	r2,0(r2)
    fa28:	10800104 	addi	r2,r2,4
    fa2c:	1007883a 	mov	r3,r2
    fa30:	e0bff917 	ldw	r2,-28(fp)
    fa34:	10800817 	ldw	r2,32(r2)
    fa38:	10810014 	ori	r2,r2,1024
    fa3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fa40:	e0bff917 	ldw	r2,-28(fp)
    fa44:	10000915 	stw	zero,36(r2)
    fa48:	00000a06 	br	fa74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fa4c:	e0bff917 	ldw	r2,-28(fp)
    fa50:	10c00917 	ldw	r3,36(r2)
    fa54:	00a00034 	movhi	r2,32768
    fa58:	10bfff04 	addi	r2,r2,-4
    fa5c:	10c00536 	bltu	r2,r3,fa74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fa60:	e0bff917 	ldw	r2,-28(fp)
    fa64:	10800917 	ldw	r2,36(r2)
    fa68:	10c00044 	addi	r3,r2,1
    fa6c:	e0bff917 	ldw	r2,-28(fp)
    fa70:	10c00915 	stw	r3,36(r2)
    fa74:	d0a01b17 	ldw	r2,-32660(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fa78:	e037883a 	mov	sp,fp
    fa7c:	df000017 	ldw	fp,0(sp)
    fa80:	dec00104 	addi	sp,sp,4
    fa84:	f800283a 	ret

0000fa88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fa88:	defffd04 	addi	sp,sp,-12
    fa8c:	df000215 	stw	fp,8(sp)
    fa90:	df000204 	addi	fp,sp,8
    fa94:	e13ffe15 	stw	r4,-8(fp)
    fa98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fa9c:	00000506 	br	fab4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    faa0:	e0bfff17 	ldw	r2,-4(fp)
    faa4:	1090000c 	andi	r2,r2,16384
    faa8:	10000226 	beq	r2,zero,fab4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    faac:	00bffd44 	movi	r2,-11
    fab0:	00000b06 	br	fae0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fab4:	e0bffe17 	ldw	r2,-8(fp)
    fab8:	10c00d17 	ldw	r3,52(r2)
    fabc:	e0bffe17 	ldw	r2,-8(fp)
    fac0:	10800c17 	ldw	r2,48(r2)
    fac4:	18800526 	beq	r3,r2,fadc <altera_avalon_jtag_uart_close+0x54>
    fac8:	e0bffe17 	ldw	r2,-8(fp)
    facc:	10c00917 	ldw	r3,36(r2)
    fad0:	e0bffe17 	ldw	r2,-8(fp)
    fad4:	10800117 	ldw	r2,4(r2)
    fad8:	18bff136 	bltu	r3,r2,faa0 <__alt_data_end+0x8000faa0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fadc:	0005883a 	mov	r2,zero
}
    fae0:	e037883a 	mov	sp,fp
    fae4:	df000017 	ldw	fp,0(sp)
    fae8:	dec00104 	addi	sp,sp,4
    faec:	f800283a 	ret

0000faf0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    faf0:	defffa04 	addi	sp,sp,-24
    faf4:	df000515 	stw	fp,20(sp)
    faf8:	df000504 	addi	fp,sp,20
    fafc:	e13ffd15 	stw	r4,-12(fp)
    fb00:	e17ffe15 	stw	r5,-8(fp)
    fb04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fb08:	00bff9c4 	movi	r2,-25
    fb0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fb10:	e0bffe17 	ldw	r2,-8(fp)
    fb14:	10da8060 	cmpeqi	r3,r2,27137
    fb18:	1800031e 	bne	r3,zero,fb28 <altera_avalon_jtag_uart_ioctl+0x38>
    fb1c:	109a80a0 	cmpeqi	r2,r2,27138
    fb20:	1000181e 	bne	r2,zero,fb84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fb24:	00002906 	br	fbcc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fb28:	e0bffd17 	ldw	r2,-12(fp)
    fb2c:	10c00117 	ldw	r3,4(r2)
    fb30:	00a00034 	movhi	r2,32768
    fb34:	10bfffc4 	addi	r2,r2,-1
    fb38:	18802126 	beq	r3,r2,fbc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fb3c:	e0bfff17 	ldw	r2,-4(fp)
    fb40:	10800017 	ldw	r2,0(r2)
    fb44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fb48:	e0bffc17 	ldw	r2,-16(fp)
    fb4c:	10800090 	cmplti	r2,r2,2
    fb50:	1000061e 	bne	r2,zero,fb6c <altera_avalon_jtag_uart_ioctl+0x7c>
    fb54:	e0fffc17 	ldw	r3,-16(fp)
    fb58:	00a00034 	movhi	r2,32768
    fb5c:	10bfffc4 	addi	r2,r2,-1
    fb60:	18800226 	beq	r3,r2,fb6c <altera_avalon_jtag_uart_ioctl+0x7c>
    fb64:	e0bffc17 	ldw	r2,-16(fp)
    fb68:	00000206 	br	fb74 <altera_avalon_jtag_uart_ioctl+0x84>
    fb6c:	00a00034 	movhi	r2,32768
    fb70:	10bfff84 	addi	r2,r2,-2
    fb74:	e0fffd17 	ldw	r3,-12(fp)
    fb78:	18800115 	stw	r2,4(r3)
      rc = 0;
    fb7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fb80:	00000f06 	br	fbc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fb84:	e0bffd17 	ldw	r2,-12(fp)
    fb88:	10c00117 	ldw	r3,4(r2)
    fb8c:	00a00034 	movhi	r2,32768
    fb90:	10bfffc4 	addi	r2,r2,-1
    fb94:	18800c26 	beq	r3,r2,fbc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fb98:	e0bffd17 	ldw	r2,-12(fp)
    fb9c:	10c00917 	ldw	r3,36(r2)
    fba0:	e0bffd17 	ldw	r2,-12(fp)
    fba4:	10800117 	ldw	r2,4(r2)
    fba8:	1885803a 	cmpltu	r2,r3,r2
    fbac:	10c03fcc 	andi	r3,r2,255
    fbb0:	e0bfff17 	ldw	r2,-4(fp)
    fbb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fbb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fbbc:	00000206 	br	fbc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fbc0:	0001883a 	nop
    fbc4:	00000106 	br	fbcc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fbc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fbcc:	e0bffb17 	ldw	r2,-20(fp)
}
    fbd0:	e037883a 	mov	sp,fp
    fbd4:	df000017 	ldw	fp,0(sp)
    fbd8:	dec00104 	addi	sp,sp,4
    fbdc:	f800283a 	ret

0000fbe0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fbe0:	defff304 	addi	sp,sp,-52
    fbe4:	dfc00c15 	stw	ra,48(sp)
    fbe8:	df000b15 	stw	fp,44(sp)
    fbec:	df000b04 	addi	fp,sp,44
    fbf0:	e13ffc15 	stw	r4,-16(fp)
    fbf4:	e17ffd15 	stw	r5,-12(fp)
    fbf8:	e1bffe15 	stw	r6,-8(fp)
    fbfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fc00:	e0bffd17 	ldw	r2,-12(fp)
    fc04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc08:	00004706 	br	fd28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fc0c:	e0bffc17 	ldw	r2,-16(fp)
    fc10:	10800a17 	ldw	r2,40(r2)
    fc14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fc18:	e0bffc17 	ldw	r2,-16(fp)
    fc1c:	10800b17 	ldw	r2,44(r2)
    fc20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fc24:	e0fff717 	ldw	r3,-36(fp)
    fc28:	e0bff817 	ldw	r2,-32(fp)
    fc2c:	18800536 	bltu	r3,r2,fc44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fc30:	e0fff717 	ldw	r3,-36(fp)
    fc34:	e0bff817 	ldw	r2,-32(fp)
    fc38:	1885c83a 	sub	r2,r3,r2
    fc3c:	e0bff615 	stw	r2,-40(fp)
    fc40:	00000406 	br	fc54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fc44:	00c20004 	movi	r3,2048
    fc48:	e0bff817 	ldw	r2,-32(fp)
    fc4c:	1885c83a 	sub	r2,r3,r2
    fc50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fc54:	e0bff617 	ldw	r2,-40(fp)
    fc58:	10001e26 	beq	r2,zero,fcd4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fc5c:	e0fffe17 	ldw	r3,-8(fp)
    fc60:	e0bff617 	ldw	r2,-40(fp)
    fc64:	1880022e 	bgeu	r3,r2,fc70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fc68:	e0bffe17 	ldw	r2,-8(fp)
    fc6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fc70:	e0bffc17 	ldw	r2,-16(fp)
    fc74:	10c00e04 	addi	r3,r2,56
    fc78:	e0bff817 	ldw	r2,-32(fp)
    fc7c:	1885883a 	add	r2,r3,r2
    fc80:	e1bff617 	ldw	r6,-40(fp)
    fc84:	100b883a 	mov	r5,r2
    fc88:	e13ff517 	ldw	r4,-44(fp)
    fc8c:	00079140 	call	7914 <memcpy>
      ptr   += n;
    fc90:	e0fff517 	ldw	r3,-44(fp)
    fc94:	e0bff617 	ldw	r2,-40(fp)
    fc98:	1885883a 	add	r2,r3,r2
    fc9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fca0:	e0fffe17 	ldw	r3,-8(fp)
    fca4:	e0bff617 	ldw	r2,-40(fp)
    fca8:	1885c83a 	sub	r2,r3,r2
    fcac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fcb0:	e0fff817 	ldw	r3,-32(fp)
    fcb4:	e0bff617 	ldw	r2,-40(fp)
    fcb8:	1885883a 	add	r2,r3,r2
    fcbc:	10c1ffcc 	andi	r3,r2,2047
    fcc0:	e0bffc17 	ldw	r2,-16(fp)
    fcc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fcc8:	e0bffe17 	ldw	r2,-8(fp)
    fccc:	00bfcf16 	blt	zero,r2,fc0c <__alt_data_end+0x8000fc0c>
    fcd0:	00000106 	br	fcd8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fcd4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fcd8:	e0fff517 	ldw	r3,-44(fp)
    fcdc:	e0bffd17 	ldw	r2,-12(fp)
    fce0:	1880141e 	bne	r3,r2,fd34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fce4:	e0bfff17 	ldw	r2,-4(fp)
    fce8:	1090000c 	andi	r2,r2,16384
    fcec:	1000131e 	bne	r2,zero,fd3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fcf0:	0001883a 	nop
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	10c00a17 	ldw	r3,40(r2)
    fcfc:	e0bff717 	ldw	r2,-36(fp)
    fd00:	1880051e 	bne	r3,r2,fd18 <altera_avalon_jtag_uart_read+0x138>
    fd04:	e0bffc17 	ldw	r2,-16(fp)
    fd08:	10c00917 	ldw	r3,36(r2)
    fd0c:	e0bffc17 	ldw	r2,-16(fp)
    fd10:	10800117 	ldw	r2,4(r2)
    fd14:	18bff736 	bltu	r3,r2,fcf4 <__alt_data_end+0x8000fcf4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fd18:	e0bffc17 	ldw	r2,-16(fp)
    fd1c:	10c00a17 	ldw	r3,40(r2)
    fd20:	e0bff717 	ldw	r2,-36(fp)
    fd24:	18800726 	beq	r3,r2,fd44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fd28:	e0bffe17 	ldw	r2,-8(fp)
    fd2c:	00bfb716 	blt	zero,r2,fc0c <__alt_data_end+0x8000fc0c>
    fd30:	00000506 	br	fd48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fd34:	0001883a 	nop
    fd38:	00000306 	br	fd48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fd3c:	0001883a 	nop
    fd40:	00000106 	br	fd48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fd44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fd48:	e0fff517 	ldw	r3,-44(fp)
    fd4c:	e0bffd17 	ldw	r2,-12(fp)
    fd50:	18801826 	beq	r3,r2,fdb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd54:	0005303a 	rdctl	r2,status
    fd58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd5c:	e0fffb17 	ldw	r3,-20(fp)
    fd60:	00bfff84 	movi	r2,-2
    fd64:	1884703a 	and	r2,r3,r2
    fd68:	1001703a 	wrctl	status,r2
  
  return context;
    fd6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fd70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fd74:	e0bffc17 	ldw	r2,-16(fp)
    fd78:	10800817 	ldw	r2,32(r2)
    fd7c:	10c00054 	ori	r3,r2,1
    fd80:	e0bffc17 	ldw	r2,-16(fp)
    fd84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fd88:	e0bffc17 	ldw	r2,-16(fp)
    fd8c:	10800017 	ldw	r2,0(r2)
    fd90:	10800104 	addi	r2,r2,4
    fd94:	1007883a 	mov	r3,r2
    fd98:	e0bffc17 	ldw	r2,-16(fp)
    fd9c:	10800817 	ldw	r2,32(r2)
    fda0:	18800035 	stwio	r2,0(r3)
    fda4:	e0bffa17 	ldw	r2,-24(fp)
    fda8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdac:	e0bff917 	ldw	r2,-28(fp)
    fdb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fdb4:	e0fff517 	ldw	r3,-44(fp)
    fdb8:	e0bffd17 	ldw	r2,-12(fp)
    fdbc:	18800426 	beq	r3,r2,fdd0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fdc0:	e0fff517 	ldw	r3,-44(fp)
    fdc4:	e0bffd17 	ldw	r2,-12(fp)
    fdc8:	1885c83a 	sub	r2,r3,r2
    fdcc:	00000606 	br	fde8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fdd0:	e0bfff17 	ldw	r2,-4(fp)
    fdd4:	1090000c 	andi	r2,r2,16384
    fdd8:	10000226 	beq	r2,zero,fde4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fddc:	00bffd44 	movi	r2,-11
    fde0:	00000106 	br	fde8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fde4:	00bffec4 	movi	r2,-5
}
    fde8:	e037883a 	mov	sp,fp
    fdec:	dfc00117 	ldw	ra,4(sp)
    fdf0:	df000017 	ldw	fp,0(sp)
    fdf4:	dec00204 	addi	sp,sp,8
    fdf8:	f800283a 	ret

0000fdfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fdfc:	defff304 	addi	sp,sp,-52
    fe00:	dfc00c15 	stw	ra,48(sp)
    fe04:	df000b15 	stw	fp,44(sp)
    fe08:	df000b04 	addi	fp,sp,44
    fe0c:	e13ffc15 	stw	r4,-16(fp)
    fe10:	e17ffd15 	stw	r5,-12(fp)
    fe14:	e1bffe15 	stw	r6,-8(fp)
    fe18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fe1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fe20:	e0bffd17 	ldw	r2,-12(fp)
    fe24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe28:	00003706 	br	ff08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fe2c:	e0bffc17 	ldw	r2,-16(fp)
    fe30:	10800c17 	ldw	r2,48(r2)
    fe34:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fe38:	e0bffc17 	ldw	r2,-16(fp)
    fe3c:	10800d17 	ldw	r2,52(r2)
    fe40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fe44:	e0fff917 	ldw	r3,-28(fp)
    fe48:	e0bff517 	ldw	r2,-44(fp)
    fe4c:	1880062e 	bgeu	r3,r2,fe68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fe50:	e0fff517 	ldw	r3,-44(fp)
    fe54:	e0bff917 	ldw	r2,-28(fp)
    fe58:	1885c83a 	sub	r2,r3,r2
    fe5c:	10bfffc4 	addi	r2,r2,-1
    fe60:	e0bff615 	stw	r2,-40(fp)
    fe64:	00000b06 	br	fe94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fe68:	e0bff517 	ldw	r2,-44(fp)
    fe6c:	10000526 	beq	r2,zero,fe84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fe70:	00c20004 	movi	r3,2048
    fe74:	e0bff917 	ldw	r2,-28(fp)
    fe78:	1885c83a 	sub	r2,r3,r2
    fe7c:	e0bff615 	stw	r2,-40(fp)
    fe80:	00000406 	br	fe94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fe84:	00c1ffc4 	movi	r3,2047
    fe88:	e0bff917 	ldw	r2,-28(fp)
    fe8c:	1885c83a 	sub	r2,r3,r2
    fe90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fe94:	e0bff617 	ldw	r2,-40(fp)
    fe98:	10001e26 	beq	r2,zero,ff14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fe9c:	e0fffe17 	ldw	r3,-8(fp)
    fea0:	e0bff617 	ldw	r2,-40(fp)
    fea4:	1880022e 	bgeu	r3,r2,feb0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fea8:	e0bffe17 	ldw	r2,-8(fp)
    feac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    feb0:	e0bffc17 	ldw	r2,-16(fp)
    feb4:	10c20e04 	addi	r3,r2,2104
    feb8:	e0bff917 	ldw	r2,-28(fp)
    febc:	1885883a 	add	r2,r3,r2
    fec0:	e1bff617 	ldw	r6,-40(fp)
    fec4:	e17ffd17 	ldw	r5,-12(fp)
    fec8:	1009883a 	mov	r4,r2
    fecc:	00079140 	call	7914 <memcpy>
      ptr   += n;
    fed0:	e0fffd17 	ldw	r3,-12(fp)
    fed4:	e0bff617 	ldw	r2,-40(fp)
    fed8:	1885883a 	add	r2,r3,r2
    fedc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fee0:	e0fffe17 	ldw	r3,-8(fp)
    fee4:	e0bff617 	ldw	r2,-40(fp)
    fee8:	1885c83a 	sub	r2,r3,r2
    feec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fef0:	e0fff917 	ldw	r3,-28(fp)
    fef4:	e0bff617 	ldw	r2,-40(fp)
    fef8:	1885883a 	add	r2,r3,r2
    fefc:	10c1ffcc 	andi	r3,r2,2047
    ff00:	e0bffc17 	ldw	r2,-16(fp)
    ff04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ff08:	e0bffe17 	ldw	r2,-8(fp)
    ff0c:	00bfc716 	blt	zero,r2,fe2c <__alt_data_end+0x8000fe2c>
    ff10:	00000106 	br	ff18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ff14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff18:	0005303a 	rdctl	r2,status
    ff1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff20:	e0fffb17 	ldw	r3,-20(fp)
    ff24:	00bfff84 	movi	r2,-2
    ff28:	1884703a 	and	r2,r3,r2
    ff2c:	1001703a 	wrctl	status,r2
  
  return context;
    ff30:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ff34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ff38:	e0bffc17 	ldw	r2,-16(fp)
    ff3c:	10800817 	ldw	r2,32(r2)
    ff40:	10c00094 	ori	r3,r2,2
    ff44:	e0bffc17 	ldw	r2,-16(fp)
    ff48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ff4c:	e0bffc17 	ldw	r2,-16(fp)
    ff50:	10800017 	ldw	r2,0(r2)
    ff54:	10800104 	addi	r2,r2,4
    ff58:	1007883a 	mov	r3,r2
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10800817 	ldw	r2,32(r2)
    ff64:	18800035 	stwio	r2,0(r3)
    ff68:	e0bffa17 	ldw	r2,-24(fp)
    ff6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff70:	e0bff817 	ldw	r2,-32(fp)
    ff74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ff78:	e0bffe17 	ldw	r2,-8(fp)
    ff7c:	0080100e 	bge	zero,r2,ffc0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	1090000c 	andi	r2,r2,16384
    ff88:	1000101e 	bne	r2,zero,ffcc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ff8c:	0001883a 	nop
    ff90:	e0bffc17 	ldw	r2,-16(fp)
    ff94:	10c00d17 	ldw	r3,52(r2)
    ff98:	e0bff517 	ldw	r2,-44(fp)
    ff9c:	1880051e 	bne	r3,r2,ffb4 <altera_avalon_jtag_uart_write+0x1b8>
    ffa0:	e0bffc17 	ldw	r2,-16(fp)
    ffa4:	10c00917 	ldw	r3,36(r2)
    ffa8:	e0bffc17 	ldw	r2,-16(fp)
    ffac:	10800117 	ldw	r2,4(r2)
    ffb0:	18bff736 	bltu	r3,r2,ff90 <__alt_data_end+0x8000ff90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ffb4:	e0bffc17 	ldw	r2,-16(fp)
    ffb8:	10800917 	ldw	r2,36(r2)
    ffbc:	1000051e 	bne	r2,zero,ffd4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ffc0:	e0bffe17 	ldw	r2,-8(fp)
    ffc4:	00bfd016 	blt	zero,r2,ff08 <__alt_data_end+0x8000ff08>
    ffc8:	00000306 	br	ffd8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ffcc:	0001883a 	nop
    ffd0:	00000106 	br	ffd8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ffd4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ffd8:	e0fffd17 	ldw	r3,-12(fp)
    ffdc:	e0bff717 	ldw	r2,-36(fp)
    ffe0:	18800426 	beq	r3,r2,fff4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ffe4:	e0fffd17 	ldw	r3,-12(fp)
    ffe8:	e0bff717 	ldw	r2,-36(fp)
    ffec:	1885c83a 	sub	r2,r3,r2
    fff0:	00000606 	br	1000c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fff4:	e0bfff17 	ldw	r2,-4(fp)
    fff8:	1090000c 	andi	r2,r2,16384
    fffc:	10000226 	beq	r2,zero,10008 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10000:	00bffd44 	movi	r2,-11
   10004:	00000106 	br	1000c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10008:	00bffec4 	movi	r2,-5
}
   1000c:	e037883a 	mov	sp,fp
   10010:	dfc00117 	ldw	ra,4(sp)
   10014:	df000017 	ldw	fp,0(sp)
   10018:	dec00204 	addi	sp,sp,8
   1001c:	f800283a 	ret

00010020 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10020:	defffa04 	addi	sp,sp,-24
   10024:	dfc00515 	stw	ra,20(sp)
   10028:	df000415 	stw	fp,16(sp)
   1002c:	df000404 	addi	fp,sp,16
   10030:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10034:	0007883a 	mov	r3,zero
   10038:	e0bfff17 	ldw	r2,-4(fp)
   1003c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10040:	e0bfff17 	ldw	r2,-4(fp)
   10044:	10800104 	addi	r2,r2,4
   10048:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1004c:	0005303a 	rdctl	r2,status
   10050:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10054:	e0fffd17 	ldw	r3,-12(fp)
   10058:	00bfff84 	movi	r2,-2
   1005c:	1884703a 	and	r2,r3,r2
   10060:	1001703a 	wrctl	status,r2
  
  return context;
   10064:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10068:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1006c:	00113c40 	call	113c4 <alt_tick>
   10070:	e0bffc17 	ldw	r2,-16(fp)
   10074:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10078:	e0bffe17 	ldw	r2,-8(fp)
   1007c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10080:	0001883a 	nop
   10084:	e037883a 	mov	sp,fp
   10088:	dfc00117 	ldw	ra,4(sp)
   1008c:	df000017 	ldw	fp,0(sp)
   10090:	dec00204 	addi	sp,sp,8
   10094:	f800283a 	ret

00010098 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10098:	defff804 	addi	sp,sp,-32
   1009c:	dfc00715 	stw	ra,28(sp)
   100a0:	df000615 	stw	fp,24(sp)
   100a4:	df000604 	addi	fp,sp,24
   100a8:	e13ffc15 	stw	r4,-16(fp)
   100ac:	e17ffd15 	stw	r5,-12(fp)
   100b0:	e1bffe15 	stw	r6,-8(fp)
   100b4:	e1ffff15 	stw	r7,-4(fp)
   100b8:	e0bfff17 	ldw	r2,-4(fp)
   100bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   100c0:	d0a01b17 	ldw	r2,-32660(gp)
   100c4:	1000021e 	bne	r2,zero,100d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   100c8:	e0bffb17 	ldw	r2,-20(fp)
   100cc:	d0a01b15 	stw	r2,-32660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   100d0:	e0bffc17 	ldw	r2,-16(fp)
   100d4:	10800104 	addi	r2,r2,4
   100d8:	00c001c4 	movi	r3,7
   100dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   100e0:	d8000015 	stw	zero,0(sp)
   100e4:	e1fffc17 	ldw	r7,-16(fp)
   100e8:	01800074 	movhi	r6,1
   100ec:	31800804 	addi	r6,r6,32
   100f0:	e17ffe17 	ldw	r5,-8(fp)
   100f4:	e13ffd17 	ldw	r4,-12(fp)
   100f8:	0010f480 	call	10f48 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   100fc:	0001883a 	nop
   10100:	e037883a 	mov	sp,fp
   10104:	dfc00117 	ldw	ra,4(sp)
   10108:	df000017 	ldw	fp,0(sp)
   1010c:	dec00204 	addi	sp,sp,8
   10110:	f800283a 	ret

00010114 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10114:	defffa04 	addi	sp,sp,-24
   10118:	dfc00515 	stw	ra,20(sp)
   1011c:	df000415 	stw	fp,16(sp)
   10120:	df000404 	addi	fp,sp,16
   10124:	e13ffd15 	stw	r4,-12(fp)
   10128:	e17ffe15 	stw	r5,-8(fp)
   1012c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   10130:	e0bffd17 	ldw	r2,-12(fp)
   10134:	10800017 	ldw	r2,0(r2)
   10138:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1013c:	e0bffc17 	ldw	r2,-16(fp)
   10140:	10c00a04 	addi	r3,r2,40
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	10800217 	ldw	r2,8(r2)
   1014c:	100f883a 	mov	r7,r2
   10150:	e1bfff17 	ldw	r6,-4(fp)
   10154:	e17ffe17 	ldw	r5,-8(fp)
   10158:	1809883a 	mov	r4,r3
   1015c:	00106280 	call	10628 <altera_avalon_uart_read>
      fd->fd_flags);
}
   10160:	e037883a 	mov	sp,fp
   10164:	dfc00117 	ldw	ra,4(sp)
   10168:	df000017 	ldw	fp,0(sp)
   1016c:	dec00204 	addi	sp,sp,8
   10170:	f800283a 	ret

00010174 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10174:	defffa04 	addi	sp,sp,-24
   10178:	dfc00515 	stw	ra,20(sp)
   1017c:	df000415 	stw	fp,16(sp)
   10180:	df000404 	addi	fp,sp,16
   10184:	e13ffd15 	stw	r4,-12(fp)
   10188:	e17ffe15 	stw	r5,-8(fp)
   1018c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800017 	ldw	r2,0(r2)
   10198:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1019c:	e0bffc17 	ldw	r2,-16(fp)
   101a0:	10c00a04 	addi	r3,r2,40
   101a4:	e0bffd17 	ldw	r2,-12(fp)
   101a8:	10800217 	ldw	r2,8(r2)
   101ac:	100f883a 	mov	r7,r2
   101b0:	e1bfff17 	ldw	r6,-4(fp)
   101b4:	e17ffe17 	ldw	r5,-8(fp)
   101b8:	1809883a 	mov	r4,r3
   101bc:	00108400 	call	10840 <altera_avalon_uart_write>
      fd->fd_flags);
}
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   101d4:	defffc04 	addi	sp,sp,-16
   101d8:	dfc00315 	stw	ra,12(sp)
   101dc:	df000215 	stw	fp,8(sp)
   101e0:	df000204 	addi	fp,sp,8
   101e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   101e8:	e0bfff17 	ldw	r2,-4(fp)
   101ec:	10800017 	ldw	r2,0(r2)
   101f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   101f4:	e0bffe17 	ldw	r2,-8(fp)
   101f8:	10c00a04 	addi	r3,r2,40
   101fc:	e0bfff17 	ldw	r2,-4(fp)
   10200:	10800217 	ldw	r2,8(r2)
   10204:	100b883a 	mov	r5,r2
   10208:	1809883a 	mov	r4,r3
   1020c:	00105980 	call	10598 <altera_avalon_uart_close>
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

00010224 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   10224:	defff804 	addi	sp,sp,-32
   10228:	dfc00715 	stw	ra,28(sp)
   1022c:	df000615 	stw	fp,24(sp)
   10230:	df000604 	addi	fp,sp,24
   10234:	e13ffd15 	stw	r4,-12(fp)
   10238:	e17ffe15 	stw	r5,-8(fp)
   1023c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   10240:	e0bffd17 	ldw	r2,-12(fp)
   10244:	10800017 	ldw	r2,0(r2)
   10248:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1024c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   10250:	1000041e 	bne	r2,zero,10264 <altera_avalon_uart_init+0x40>
   10254:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   10258:	1000021e 	bne	r2,zero,10264 <altera_avalon_uart_init+0x40>
   1025c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   10260:	10000226 	beq	r2,zero,1026c <altera_avalon_uart_init+0x48>
   10264:	00800044 	movi	r2,1
   10268:	00000106 	br	10270 <altera_avalon_uart_init+0x4c>
   1026c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   10270:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   10274:	e0bffc17 	ldw	r2,-16(fp)
   10278:	10000f1e 	bne	r2,zero,102b8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   1027c:	e0bffd17 	ldw	r2,-12(fp)
   10280:	00c32004 	movi	r3,3200
   10284:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   10288:	e0bffb17 	ldw	r2,-20(fp)
   1028c:	10800304 	addi	r2,r2,12
   10290:	e0fffd17 	ldw	r3,-12(fp)
   10294:	18c00117 	ldw	r3,4(r3)
   10298:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   1029c:	d8000015 	stw	zero,0(sp)
   102a0:	e1fffd17 	ldw	r7,-12(fp)
   102a4:	01800074 	movhi	r6,1
   102a8:	3180b404 	addi	r6,r6,720
   102ac:	e17fff17 	ldw	r5,-4(fp)
   102b0:	e13ffe17 	ldw	r4,-8(fp)
   102b4:	0010f480 	call	10f48 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   102b8:	0001883a 	nop
   102bc:	e037883a 	mov	sp,fp
   102c0:	dfc00117 	ldw	ra,4(sp)
   102c4:	df000017 	ldw	fp,0(sp)
   102c8:	dec00204 	addi	sp,sp,8
   102cc:	f800283a 	ret

000102d0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   102d0:	defffa04 	addi	sp,sp,-24
   102d4:	dfc00515 	stw	ra,20(sp)
   102d8:	df000415 	stw	fp,16(sp)
   102dc:	df000404 	addi	fp,sp,16
   102e0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   102e4:	e0bfff17 	ldw	r2,-4(fp)
   102e8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   102ec:	e0bffc17 	ldw	r2,-16(fp)
   102f0:	10800017 	ldw	r2,0(r2)
   102f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   102f8:	e0bffd17 	ldw	r2,-12(fp)
   102fc:	10800204 	addi	r2,r2,8
   10300:	10800037 	ldwio	r2,0(r2)
   10304:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   10308:	e0bffd17 	ldw	r2,-12(fp)
   1030c:	10800204 	addi	r2,r2,8
   10310:	0007883a 	mov	r3,zero
   10314:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   10318:	e0bffd17 	ldw	r2,-12(fp)
   1031c:	10800204 	addi	r2,r2,8
   10320:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   10324:	e0bffe17 	ldw	r2,-8(fp)
   10328:	1080200c 	andi	r2,r2,128
   1032c:	10000326 	beq	r2,zero,1033c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   10330:	e17ffe17 	ldw	r5,-8(fp)
   10334:	e13ffc17 	ldw	r4,-16(fp)
   10338:	001036c0 	call	1036c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   1033c:	e0bffe17 	ldw	r2,-8(fp)
   10340:	1081100c 	andi	r2,r2,1088
   10344:	10000326 	beq	r2,zero,10354 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   10348:	e17ffe17 	ldw	r5,-8(fp)
   1034c:	e13ffc17 	ldw	r4,-16(fp)
   10350:	00104500 	call	10450 <altera_avalon_uart_txirq>
  }
  

}
   10354:	0001883a 	nop
   10358:	e037883a 	mov	sp,fp
   1035c:	dfc00117 	ldw	ra,4(sp)
   10360:	df000017 	ldw	fp,0(sp)
   10364:	dec00204 	addi	sp,sp,8
   10368:	f800283a 	ret

0001036c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1036c:	defffc04 	addi	sp,sp,-16
   10370:	df000315 	stw	fp,12(sp)
   10374:	df000304 	addi	fp,sp,12
   10378:	e13ffe15 	stw	r4,-8(fp)
   1037c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   10380:	e0bfff17 	ldw	r2,-4(fp)
   10384:	108000cc 	andi	r2,r2,3
   10388:	10002c1e 	bne	r2,zero,1043c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   1038c:	e0bffe17 	ldw	r2,-8(fp)
   10390:	10800317 	ldw	r2,12(r2)
   10394:	e0bffe17 	ldw	r2,-8(fp)
   10398:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1039c:	e0bffe17 	ldw	r2,-8(fp)
   103a0:	10800317 	ldw	r2,12(r2)
   103a4:	10800044 	addi	r2,r2,1
   103a8:	10800fcc 	andi	r2,r2,63
   103ac:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	10800317 	ldw	r2,12(r2)
   103b8:	e0fffe17 	ldw	r3,-8(fp)
   103bc:	18c00017 	ldw	r3,0(r3)
   103c0:	18c00037 	ldwio	r3,0(r3)
   103c4:	1809883a 	mov	r4,r3
   103c8:	e0fffe17 	ldw	r3,-8(fp)
   103cc:	1885883a 	add	r2,r3,r2
   103d0:	10800704 	addi	r2,r2,28
   103d4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   103d8:	e0bffe17 	ldw	r2,-8(fp)
   103dc:	e0fffd17 	ldw	r3,-12(fp)
   103e0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	10800317 	ldw	r2,12(r2)
   103ec:	10800044 	addi	r2,r2,1
   103f0:	10800fcc 	andi	r2,r2,63
   103f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   103f8:	e0bffe17 	ldw	r2,-8(fp)
   103fc:	10c00217 	ldw	r3,8(r2)
   10400:	e0bffd17 	ldw	r2,-12(fp)
   10404:	18800e1e 	bne	r3,r2,10440 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   10408:	e0bffe17 	ldw	r2,-8(fp)
   1040c:	10c00117 	ldw	r3,4(r2)
   10410:	00bfdfc4 	movi	r2,-129
   10414:	1886703a 	and	r3,r3,r2
   10418:	e0bffe17 	ldw	r2,-8(fp)
   1041c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   10420:	e0bffe17 	ldw	r2,-8(fp)
   10424:	10800017 	ldw	r2,0(r2)
   10428:	10800304 	addi	r2,r2,12
   1042c:	e0fffe17 	ldw	r3,-8(fp)
   10430:	18c00117 	ldw	r3,4(r3)
   10434:	10c00035 	stwio	r3,0(r2)
   10438:	00000106 	br	10440 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   1043c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   10440:	e037883a 	mov	sp,fp
   10444:	df000017 	ldw	fp,0(sp)
   10448:	dec00104 	addi	sp,sp,4
   1044c:	f800283a 	ret

00010450 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   10450:	defffb04 	addi	sp,sp,-20
   10454:	df000415 	stw	fp,16(sp)
   10458:	df000404 	addi	fp,sp,16
   1045c:	e13ffc15 	stw	r4,-16(fp)
   10460:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   10464:	e0bffc17 	ldw	r2,-16(fp)
   10468:	10c00417 	ldw	r3,16(r2)
   1046c:	e0bffc17 	ldw	r2,-16(fp)
   10470:	10800517 	ldw	r2,20(r2)
   10474:	18803226 	beq	r3,r2,10540 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   10478:	e0bffc17 	ldw	r2,-16(fp)
   1047c:	10800617 	ldw	r2,24(r2)
   10480:	1080008c 	andi	r2,r2,2
   10484:	10000326 	beq	r2,zero,10494 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   10488:	e0bffd17 	ldw	r2,-12(fp)
   1048c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   10490:	10001d26 	beq	r2,zero,10508 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   10494:	e0bffc17 	ldw	r2,-16(fp)
   10498:	10800417 	ldw	r2,16(r2)
   1049c:	e0bffc17 	ldw	r2,-16(fp)
   104a0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   104a4:	e0bffc17 	ldw	r2,-16(fp)
   104a8:	10800017 	ldw	r2,0(r2)
   104ac:	10800104 	addi	r2,r2,4
   104b0:	e0fffc17 	ldw	r3,-16(fp)
   104b4:	18c00417 	ldw	r3,16(r3)
   104b8:	e13ffc17 	ldw	r4,-16(fp)
   104bc:	20c7883a 	add	r3,r4,r3
   104c0:	18c01704 	addi	r3,r3,92
   104c4:	18c00003 	ldbu	r3,0(r3)
   104c8:	18c03fcc 	andi	r3,r3,255
   104cc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	10800417 	ldw	r2,16(r2)
   104d8:	10800044 	addi	r2,r2,1
   104dc:	e0fffc17 	ldw	r3,-16(fp)
   104e0:	18800415 	stw	r2,16(r3)
   104e4:	10c00fcc 	andi	r3,r2,63
   104e8:	e0bffc17 	ldw	r2,-16(fp)
   104ec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   104f0:	e0bffc17 	ldw	r2,-16(fp)
   104f4:	10800117 	ldw	r2,4(r2)
   104f8:	10c01014 	ori	r3,r2,64
   104fc:	e0bffc17 	ldw	r2,-16(fp)
   10500:	10c00115 	stw	r3,4(r2)
   10504:	00000e06 	br	10540 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   10508:	e0bffc17 	ldw	r2,-16(fp)
   1050c:	10800017 	ldw	r2,0(r2)
   10510:	10800204 	addi	r2,r2,8
   10514:	10800037 	ldwio	r2,0(r2)
   10518:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1051c:	e0bffd17 	ldw	r2,-12(fp)
   10520:	1082000c 	andi	r2,r2,2048
   10524:	1000061e 	bne	r2,zero,10540 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   10528:	e0bffc17 	ldw	r2,-16(fp)
   1052c:	10c00117 	ldw	r3,4(r2)
   10530:	00bfefc4 	movi	r2,-65
   10534:	1886703a 	and	r3,r3,r2
   10538:	e0bffc17 	ldw	r2,-16(fp)
   1053c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   10540:	e0bffc17 	ldw	r2,-16(fp)
   10544:	10c00417 	ldw	r3,16(r2)
   10548:	e0bffc17 	ldw	r2,-16(fp)
   1054c:	10800517 	ldw	r2,20(r2)
   10550:	1880061e 	bne	r3,r2,1056c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	10c00117 	ldw	r3,4(r2)
   1055c:	00beefc4 	movi	r2,-1089
   10560:	1886703a 	and	r3,r3,r2
   10564:	e0bffc17 	ldw	r2,-16(fp)
   10568:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1056c:	e0bffc17 	ldw	r2,-16(fp)
   10570:	10800017 	ldw	r2,0(r2)
   10574:	10800304 	addi	r2,r2,12
   10578:	e0fffc17 	ldw	r3,-16(fp)
   1057c:	18c00117 	ldw	r3,4(r3)
   10580:	10c00035 	stwio	r3,0(r2)
}
   10584:	0001883a 	nop
   10588:	e037883a 	mov	sp,fp
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00104 	addi	sp,sp,4
   10594:	f800283a 	ret

00010598 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   10598:	defffd04 	addi	sp,sp,-12
   1059c:	df000215 	stw	fp,8(sp)
   105a0:	df000204 	addi	fp,sp,8
   105a4:	e13ffe15 	stw	r4,-8(fp)
   105a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   105ac:	00000506 	br	105c4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   105b0:	e0bfff17 	ldw	r2,-4(fp)
   105b4:	1090000c 	andi	r2,r2,16384
   105b8:	10000226 	beq	r2,zero,105c4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   105bc:	00bffd44 	movi	r2,-11
   105c0:	00000606 	br	105dc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   105c4:	e0bffe17 	ldw	r2,-8(fp)
   105c8:	10c00417 	ldw	r3,16(r2)
   105cc:	e0bffe17 	ldw	r2,-8(fp)
   105d0:	10800517 	ldw	r2,20(r2)
   105d4:	18bff61e 	bne	r3,r2,105b0 <__alt_data_end+0x800105b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   105d8:	0005883a 	mov	r2,zero
}
   105dc:	e037883a 	mov	sp,fp
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00104 	addi	sp,sp,4
   105e8:	f800283a 	ret

000105ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   105ec:	defffe04 	addi	sp,sp,-8
   105f0:	dfc00115 	stw	ra,4(sp)
   105f4:	df000015 	stw	fp,0(sp)
   105f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   105fc:	d0a00b17 	ldw	r2,-32724(gp)
   10600:	10000326 	beq	r2,zero,10610 <alt_get_errno+0x24>
   10604:	d0a00b17 	ldw	r2,-32724(gp)
   10608:	103ee83a 	callr	r2
   1060c:	00000106 	br	10614 <alt_get_errno+0x28>
   10610:	d0a01004 	addi	r2,gp,-32704
}
   10614:	e037883a 	mov	sp,fp
   10618:	dfc00117 	ldw	ra,4(sp)
   1061c:	df000017 	ldw	fp,0(sp)
   10620:	dec00204 	addi	sp,sp,8
   10624:	f800283a 	ret

00010628 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   10628:	defff204 	addi	sp,sp,-56
   1062c:	dfc00d15 	stw	ra,52(sp)
   10630:	df000c15 	stw	fp,48(sp)
   10634:	df000c04 	addi	fp,sp,48
   10638:	e13ffc15 	stw	r4,-16(fp)
   1063c:	e17ffd15 	stw	r5,-12(fp)
   10640:	e1bffe15 	stw	r6,-8(fp)
   10644:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   10648:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   1064c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   10650:	e0bfff17 	ldw	r2,-4(fp)
   10654:	1090000c 	andi	r2,r2,16384
   10658:	1005003a 	cmpeq	r2,r2,zero
   1065c:	10803fcc 	andi	r2,r2,255
   10660:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   10664:	00001306 	br	106b4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   10668:	e0bff517 	ldw	r2,-44(fp)
   1066c:	10800044 	addi	r2,r2,1
   10670:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   10674:	e0bffd17 	ldw	r2,-12(fp)
   10678:	10c00044 	addi	r3,r2,1
   1067c:	e0fffd15 	stw	r3,-12(fp)
   10680:	e0fffc17 	ldw	r3,-16(fp)
   10684:	18c00217 	ldw	r3,8(r3)
   10688:	e13ffc17 	ldw	r4,-16(fp)
   1068c:	20c7883a 	add	r3,r4,r3
   10690:	18c00704 	addi	r3,r3,28
   10694:	18c00003 	ldbu	r3,0(r3)
   10698:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   1069c:	e0bffc17 	ldw	r2,-16(fp)
   106a0:	10800217 	ldw	r2,8(r2)
   106a4:	10800044 	addi	r2,r2,1
   106a8:	10c00fcc 	andi	r3,r2,63
   106ac:	e0bffc17 	ldw	r2,-16(fp)
   106b0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   106b4:	e0fff517 	ldw	r3,-44(fp)
   106b8:	e0bffe17 	ldw	r2,-8(fp)
   106bc:	1880050e 	bge	r3,r2,106d4 <altera_avalon_uart_read+0xac>
   106c0:	e0bffc17 	ldw	r2,-16(fp)
   106c4:	10c00217 	ldw	r3,8(r2)
   106c8:	e0bffc17 	ldw	r2,-16(fp)
   106cc:	10800317 	ldw	r2,12(r2)
   106d0:	18bfe51e 	bne	r3,r2,10668 <__alt_data_end+0x80010668>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   106d4:	e0bff517 	ldw	r2,-44(fp)
   106d8:	1000251e 	bne	r2,zero,10770 <altera_avalon_uart_read+0x148>
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	10c00217 	ldw	r3,8(r2)
   106e4:	e0bffc17 	ldw	r2,-16(fp)
   106e8:	10800317 	ldw	r2,12(r2)
   106ec:	1880201e 	bne	r3,r2,10770 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   106f0:	e0bff617 	ldw	r2,-40(fp)
   106f4:	1000071e 	bne	r2,zero,10714 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   106f8:	00105ec0 	call	105ec <alt_get_errno>
   106fc:	1007883a 	mov	r3,r2
   10700:	008002c4 	movi	r2,11
   10704:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   10708:	00800044 	movi	r2,1
   1070c:	e0bff405 	stb	r2,-48(fp)
        break;
   10710:	00001b06 	br	10780 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10714:	0005303a 	rdctl	r2,status
   10718:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1071c:	e0fff917 	ldw	r3,-28(fp)
   10720:	00bfff84 	movi	r2,-2
   10724:	1884703a 	and	r2,r3,r2
   10728:	1001703a 	wrctl	status,r2
  
  return context;
   1072c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   10730:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   10734:	e0bffc17 	ldw	r2,-16(fp)
   10738:	10800117 	ldw	r2,4(r2)
   1073c:	10c02014 	ori	r3,r2,128
   10740:	e0bffc17 	ldw	r2,-16(fp)
   10744:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   10748:	e0bffc17 	ldw	r2,-16(fp)
   1074c:	10800017 	ldw	r2,0(r2)
   10750:	10800304 	addi	r2,r2,12
   10754:	e0fffc17 	ldw	r3,-16(fp)
   10758:	18c00117 	ldw	r3,4(r3)
   1075c:	10c00035 	stwio	r3,0(r2)
   10760:	e0bff817 	ldw	r2,-32(fp)
   10764:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10768:	e0bffa17 	ldw	r2,-24(fp)
   1076c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   10770:	e0bff517 	ldw	r2,-44(fp)
   10774:	1000021e 	bne	r2,zero,10780 <altera_avalon_uart_read+0x158>
   10778:	e0bffe17 	ldw	r2,-8(fp)
   1077c:	103fcd1e 	bne	r2,zero,106b4 <__alt_data_end+0x800106b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10780:	0005303a 	rdctl	r2,status
   10784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10788:	e0fffb17 	ldw	r3,-20(fp)
   1078c:	00bfff84 	movi	r2,-2
   10790:	1884703a 	and	r2,r3,r2
   10794:	1001703a 	wrctl	status,r2
  
  return context;
   10798:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   1079c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   107a0:	e0bffc17 	ldw	r2,-16(fp)
   107a4:	10800117 	ldw	r2,4(r2)
   107a8:	10c02014 	ori	r3,r2,128
   107ac:	e0bffc17 	ldw	r2,-16(fp)
   107b0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	10800017 	ldw	r2,0(r2)
   107bc:	10800304 	addi	r2,r2,12
   107c0:	e0fffc17 	ldw	r3,-16(fp)
   107c4:	18c00117 	ldw	r3,4(r3)
   107c8:	10c00035 	stwio	r3,0(r2)
   107cc:	e0bff817 	ldw	r2,-32(fp)
   107d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107d4:	e0bff717 	ldw	r2,-36(fp)
   107d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   107dc:	e0bff403 	ldbu	r2,-48(fp)
   107e0:	10000226 	beq	r2,zero,107ec <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   107e4:	00bffd44 	movi	r2,-11
   107e8:	00000106 	br	107f0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   107ec:	e0bff517 	ldw	r2,-44(fp)
  }
}
   107f0:	e037883a 	mov	sp,fp
   107f4:	dfc00117 	ldw	ra,4(sp)
   107f8:	df000017 	ldw	fp,0(sp)
   107fc:	dec00204 	addi	sp,sp,8
   10800:	f800283a 	ret

00010804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10804:	defffe04 	addi	sp,sp,-8
   10808:	dfc00115 	stw	ra,4(sp)
   1080c:	df000015 	stw	fp,0(sp)
   10810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10814:	d0a00b17 	ldw	r2,-32724(gp)
   10818:	10000326 	beq	r2,zero,10828 <alt_get_errno+0x24>
   1081c:	d0a00b17 	ldw	r2,-32724(gp)
   10820:	103ee83a 	callr	r2
   10824:	00000106 	br	1082c <alt_get_errno+0x28>
   10828:	d0a01004 	addi	r2,gp,-32704
}
   1082c:	e037883a 	mov	sp,fp
   10830:	dfc00117 	ldw	ra,4(sp)
   10834:	df000017 	ldw	fp,0(sp)
   10838:	dec00204 	addi	sp,sp,8
   1083c:	f800283a 	ret

00010840 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   10840:	defff204 	addi	sp,sp,-56
   10844:	dfc00d15 	stw	ra,52(sp)
   10848:	df000c15 	stw	fp,48(sp)
   1084c:	df000c04 	addi	fp,sp,48
   10850:	e13ffc15 	stw	r4,-16(fp)
   10854:	e17ffd15 	stw	r5,-12(fp)
   10858:	e1bffe15 	stw	r6,-8(fp)
   1085c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   10860:	e0bffe17 	ldw	r2,-8(fp)
   10864:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   10868:	e0bfff17 	ldw	r2,-4(fp)
   1086c:	1090000c 	andi	r2,r2,16384
   10870:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   10874:	00003c06 	br	10968 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   10878:	e0bffc17 	ldw	r2,-16(fp)
   1087c:	10800517 	ldw	r2,20(r2)
   10880:	10800044 	addi	r2,r2,1
   10884:	10800fcc 	andi	r2,r2,63
   10888:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   1088c:	e0bffc17 	ldw	r2,-16(fp)
   10890:	10c00417 	ldw	r3,16(r2)
   10894:	e0bff717 	ldw	r2,-36(fp)
   10898:	1880221e 	bne	r3,r2,10924 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   1089c:	e0bff517 	ldw	r2,-44(fp)
   108a0:	10000526 	beq	r2,zero,108b8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   108a4:	00108040 	call	10804 <alt_get_errno>
   108a8:	1007883a 	mov	r3,r2
   108ac:	008002c4 	movi	r2,11
   108b0:	18800015 	stw	r2,0(r3)
        break;
   108b4:	00002e06 	br	10970 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108b8:	0005303a 	rdctl	r2,status
   108bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108c0:	e0fff917 	ldw	r3,-28(fp)
   108c4:	00bfff84 	movi	r2,-2
   108c8:	1884703a 	and	r2,r3,r2
   108cc:	1001703a 	wrctl	status,r2
  
  return context;
   108d0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   108d4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   108d8:	e0bffc17 	ldw	r2,-16(fp)
   108dc:	10800117 	ldw	r2,4(r2)
   108e0:	10c11014 	ori	r3,r2,1088
   108e4:	e0bffc17 	ldw	r2,-16(fp)
   108e8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   108ec:	e0bffc17 	ldw	r2,-16(fp)
   108f0:	10800017 	ldw	r2,0(r2)
   108f4:	10800304 	addi	r2,r2,12
   108f8:	e0fffc17 	ldw	r3,-16(fp)
   108fc:	18c00117 	ldw	r3,4(r3)
   10900:	10c00035 	stwio	r3,0(r2)
   10904:	e0bff817 	ldw	r2,-32(fp)
   10908:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1090c:	e0bff617 	ldw	r2,-40(fp)
   10910:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   10914:	e0bffc17 	ldw	r2,-16(fp)
   10918:	10c00417 	ldw	r3,16(r2)
   1091c:	e0bff717 	ldw	r2,-36(fp)
   10920:	18bffc26 	beq	r3,r2,10914 <__alt_data_end+0x80010914>
      }
    }

    count--;
   10924:	e0bff417 	ldw	r2,-48(fp)
   10928:	10bfffc4 	addi	r2,r2,-1
   1092c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   10930:	e0bffc17 	ldw	r2,-16(fp)
   10934:	10c00517 	ldw	r3,20(r2)
   10938:	e0bffd17 	ldw	r2,-12(fp)
   1093c:	11000044 	addi	r4,r2,1
   10940:	e13ffd15 	stw	r4,-12(fp)
   10944:	10800003 	ldbu	r2,0(r2)
   10948:	1009883a 	mov	r4,r2
   1094c:	e0bffc17 	ldw	r2,-16(fp)
   10950:	10c5883a 	add	r2,r2,r3
   10954:	10801704 	addi	r2,r2,92
   10958:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   1095c:	e0bffc17 	ldw	r2,-16(fp)
   10960:	e0fff717 	ldw	r3,-36(fp)
   10964:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   10968:	e0bff417 	ldw	r2,-48(fp)
   1096c:	103fc21e 	bne	r2,zero,10878 <__alt_data_end+0x80010878>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10970:	0005303a 	rdctl	r2,status
   10974:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10978:	e0fffb17 	ldw	r3,-20(fp)
   1097c:	00bfff84 	movi	r2,-2
   10980:	1884703a 	and	r2,r3,r2
   10984:	1001703a 	wrctl	status,r2
  
  return context;
   10988:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   1098c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   10990:	e0bffc17 	ldw	r2,-16(fp)
   10994:	10800117 	ldw	r2,4(r2)
   10998:	10c11014 	ori	r3,r2,1088
   1099c:	e0bffc17 	ldw	r2,-16(fp)
   109a0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   109a4:	e0bffc17 	ldw	r2,-16(fp)
   109a8:	10800017 	ldw	r2,0(r2)
   109ac:	10800304 	addi	r2,r2,12
   109b0:	e0fffc17 	ldw	r3,-16(fp)
   109b4:	18c00117 	ldw	r3,4(r3)
   109b8:	10c00035 	stwio	r3,0(r2)
   109bc:	e0bff817 	ldw	r2,-32(fp)
   109c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109c4:	e0bffa17 	ldw	r2,-24(fp)
   109c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   109cc:	e0fffe17 	ldw	r3,-8(fp)
   109d0:	e0bff417 	ldw	r2,-48(fp)
   109d4:	1885c83a 	sub	r2,r3,r2
}
   109d8:	e037883a 	mov	sp,fp
   109dc:	dfc00117 	ldw	ra,4(sp)
   109e0:	df000017 	ldw	fp,0(sp)
   109e4:	dec00204 	addi	sp,sp,8
   109e8:	f800283a 	ret

000109ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   109ec:	defff504 	addi	sp,sp,-44
   109f0:	df000a15 	stw	fp,40(sp)
   109f4:	df000a04 	addi	fp,sp,40
   109f8:	e13ffc15 	stw	r4,-16(fp)
   109fc:	e17ffd15 	stw	r5,-12(fp)
   10a00:	e1bffe15 	stw	r6,-8(fp)
   10a04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10a08:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10a0c:	d0a01b17 	ldw	r2,-32660(gp)
  
  if (alt_ticks_per_second ())
   10a10:	10003c26 	beq	r2,zero,10b04 <alt_alarm_start+0x118>
  {
    if (alarm)
   10a14:	e0bffc17 	ldw	r2,-16(fp)
   10a18:	10003826 	beq	r2,zero,10afc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10a1c:	e0bffc17 	ldw	r2,-16(fp)
   10a20:	e0fffe17 	ldw	r3,-8(fp)
   10a24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10a28:	e0bffc17 	ldw	r2,-16(fp)
   10a2c:	e0ffff17 	ldw	r3,-4(fp)
   10a30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a34:	0005303a 	rdctl	r2,status
   10a38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a3c:	e0fff917 	ldw	r3,-28(fp)
   10a40:	00bfff84 	movi	r2,-2
   10a44:	1884703a 	and	r2,r3,r2
   10a48:	1001703a 	wrctl	status,r2
  
  return context;
   10a4c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10a50:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10a54:	d0a01c17 	ldw	r2,-32656(gp)
      
      current_nticks = alt_nticks();
   10a58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10a5c:	e0fffd17 	ldw	r3,-12(fp)
   10a60:	e0bff617 	ldw	r2,-40(fp)
   10a64:	1885883a 	add	r2,r3,r2
   10a68:	10c00044 	addi	r3,r2,1
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10a74:	e0bffc17 	ldw	r2,-16(fp)
   10a78:	10c00217 	ldw	r3,8(r2)
   10a7c:	e0bff617 	ldw	r2,-40(fp)
   10a80:	1880042e 	bgeu	r3,r2,10a94 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10a84:	e0bffc17 	ldw	r2,-16(fp)
   10a88:	00c00044 	movi	r3,1
   10a8c:	10c00405 	stb	r3,16(r2)
   10a90:	00000206 	br	10a9c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10a94:	e0bffc17 	ldw	r2,-16(fp)
   10a98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10a9c:	e0bffc17 	ldw	r2,-16(fp)
   10aa0:	d0e00e04 	addi	r3,gp,-32712
   10aa4:	e0fffa15 	stw	r3,-24(fp)
   10aa8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10aac:	e0bffb17 	ldw	r2,-20(fp)
   10ab0:	e0fffa17 	ldw	r3,-24(fp)
   10ab4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10ab8:	e0bffa17 	ldw	r2,-24(fp)
   10abc:	10c00017 	ldw	r3,0(r2)
   10ac0:	e0bffb17 	ldw	r2,-20(fp)
   10ac4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10ac8:	e0bffa17 	ldw	r2,-24(fp)
   10acc:	10800017 	ldw	r2,0(r2)
   10ad0:	e0fffb17 	ldw	r3,-20(fp)
   10ad4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10ad8:	e0bffa17 	ldw	r2,-24(fp)
   10adc:	e0fffb17 	ldw	r3,-20(fp)
   10ae0:	10c00015 	stw	r3,0(r2)
   10ae4:	e0bff817 	ldw	r2,-32(fp)
   10ae8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10aec:	e0bff717 	ldw	r2,-36(fp)
   10af0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10af4:	0005883a 	mov	r2,zero
   10af8:	00000306 	br	10b08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10afc:	00bffa84 	movi	r2,-22
   10b00:	00000106 	br	10b08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10b04:	00bfde84 	movi	r2,-134
  }
}
   10b08:	e037883a 	mov	sp,fp
   10b0c:	df000017 	ldw	fp,0(sp)
   10b10:	dec00104 	addi	sp,sp,4
   10b14:	f800283a 	ret

00010b18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10b18:	deffff04 	addi	sp,sp,-4
   10b1c:	df000015 	stw	fp,0(sp)
   10b20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10b24:	0001883a 	nop
   10b28:	e037883a 	mov	sp,fp
   10b2c:	df000017 	ldw	fp,0(sp)
   10b30:	dec00104 	addi	sp,sp,4
   10b34:	f800283a 	ret

00010b38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b38:	defffe04 	addi	sp,sp,-8
   10b3c:	dfc00115 	stw	ra,4(sp)
   10b40:	df000015 	stw	fp,0(sp)
   10b44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b48:	d0a00b17 	ldw	r2,-32724(gp)
   10b4c:	10000326 	beq	r2,zero,10b5c <alt_get_errno+0x24>
   10b50:	d0a00b17 	ldw	r2,-32724(gp)
   10b54:	103ee83a 	callr	r2
   10b58:	00000106 	br	10b60 <alt_get_errno+0x28>
   10b5c:	d0a01004 	addi	r2,gp,-32704
}
   10b60:	e037883a 	mov	sp,fp
   10b64:	dfc00117 	ldw	ra,4(sp)
   10b68:	df000017 	ldw	fp,0(sp)
   10b6c:	dec00204 	addi	sp,sp,8
   10b70:	f800283a 	ret

00010b74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10b74:	defffa04 	addi	sp,sp,-24
   10b78:	dfc00515 	stw	ra,20(sp)
   10b7c:	df000415 	stw	fp,16(sp)
   10b80:	df000404 	addi	fp,sp,16
   10b84:	e13ffe15 	stw	r4,-8(fp)
   10b88:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10b8c:	e0bffe17 	ldw	r2,-8(fp)
   10b90:	10000326 	beq	r2,zero,10ba0 <alt_dev_llist_insert+0x2c>
   10b94:	e0bffe17 	ldw	r2,-8(fp)
   10b98:	10800217 	ldw	r2,8(r2)
   10b9c:	1000061e 	bne	r2,zero,10bb8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10ba0:	0010b380 	call	10b38 <alt_get_errno>
   10ba4:	1007883a 	mov	r3,r2
   10ba8:	00800584 	movi	r2,22
   10bac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10bb0:	00bffa84 	movi	r2,-22
   10bb4:	00001306 	br	10c04 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10bb8:	e0bffe17 	ldw	r2,-8(fp)
   10bbc:	e0ffff17 	ldw	r3,-4(fp)
   10bc0:	e0fffc15 	stw	r3,-16(fp)
   10bc4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10bc8:	e0bffd17 	ldw	r2,-12(fp)
   10bcc:	e0fffc17 	ldw	r3,-16(fp)
   10bd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10bd4:	e0bffc17 	ldw	r2,-16(fp)
   10bd8:	10c00017 	ldw	r3,0(r2)
   10bdc:	e0bffd17 	ldw	r2,-12(fp)
   10be0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10be4:	e0bffc17 	ldw	r2,-16(fp)
   10be8:	10800017 	ldw	r2,0(r2)
   10bec:	e0fffd17 	ldw	r3,-12(fp)
   10bf0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10bf4:	e0bffc17 	ldw	r2,-16(fp)
   10bf8:	e0fffd17 	ldw	r3,-12(fp)
   10bfc:	10c00015 	stw	r3,0(r2)

  return 0;  
   10c00:	0005883a 	mov	r2,zero
}
   10c04:	e037883a 	mov	sp,fp
   10c08:	dfc00117 	ldw	ra,4(sp)
   10c0c:	df000017 	ldw	fp,0(sp)
   10c10:	dec00204 	addi	sp,sp,8
   10c14:	f800283a 	ret

00010c18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10c18:	defffd04 	addi	sp,sp,-12
   10c1c:	dfc00215 	stw	ra,8(sp)
   10c20:	df000115 	stw	fp,4(sp)
   10c24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c28:	00800074 	movhi	r2,1
   10c2c:	10866b04 	addi	r2,r2,6572
   10c30:	e0bfff15 	stw	r2,-4(fp)
   10c34:	00000606 	br	10c50 <_do_ctors+0x38>
        (*ctor) (); 
   10c38:	e0bfff17 	ldw	r2,-4(fp)
   10c3c:	10800017 	ldw	r2,0(r2)
   10c40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c44:	e0bfff17 	ldw	r2,-4(fp)
   10c48:	10bfff04 	addi	r2,r2,-4
   10c4c:	e0bfff15 	stw	r2,-4(fp)
   10c50:	e0ffff17 	ldw	r3,-4(fp)
   10c54:	00800074 	movhi	r2,1
   10c58:	10866c04 	addi	r2,r2,6576
   10c5c:	18bff62e 	bgeu	r3,r2,10c38 <__alt_data_end+0x80010c38>
        (*ctor) (); 
}
   10c60:	0001883a 	nop
   10c64:	e037883a 	mov	sp,fp
   10c68:	dfc00117 	ldw	ra,4(sp)
   10c6c:	df000017 	ldw	fp,0(sp)
   10c70:	dec00204 	addi	sp,sp,8
   10c74:	f800283a 	ret

00010c78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10c78:	defffd04 	addi	sp,sp,-12
   10c7c:	dfc00215 	stw	ra,8(sp)
   10c80:	df000115 	stw	fp,4(sp)
   10c84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c88:	00800074 	movhi	r2,1
   10c8c:	10866b04 	addi	r2,r2,6572
   10c90:	e0bfff15 	stw	r2,-4(fp)
   10c94:	00000606 	br	10cb0 <_do_dtors+0x38>
        (*dtor) (); 
   10c98:	e0bfff17 	ldw	r2,-4(fp)
   10c9c:	10800017 	ldw	r2,0(r2)
   10ca0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10ca4:	e0bfff17 	ldw	r2,-4(fp)
   10ca8:	10bfff04 	addi	r2,r2,-4
   10cac:	e0bfff15 	stw	r2,-4(fp)
   10cb0:	e0ffff17 	ldw	r3,-4(fp)
   10cb4:	00800074 	movhi	r2,1
   10cb8:	10866c04 	addi	r2,r2,6576
   10cbc:	18bff62e 	bgeu	r3,r2,10c98 <__alt_data_end+0x80010c98>
        (*dtor) (); 
}
   10cc0:	0001883a 	nop
   10cc4:	e037883a 	mov	sp,fp
   10cc8:	dfc00117 	ldw	ra,4(sp)
   10ccc:	df000017 	ldw	fp,0(sp)
   10cd0:	dec00204 	addi	sp,sp,8
   10cd4:	f800283a 	ret

00010cd8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10cd8:	defffa04 	addi	sp,sp,-24
   10cdc:	dfc00515 	stw	ra,20(sp)
   10ce0:	df000415 	stw	fp,16(sp)
   10ce4:	df000404 	addi	fp,sp,16
   10ce8:	e13ffe15 	stw	r4,-8(fp)
   10cec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	10800017 	ldw	r2,0(r2)
   10cf8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10cfc:	e13ffe17 	ldw	r4,-8(fp)
   10d00:	00025e00 	call	25e0 <strlen>
   10d04:	10800044 	addi	r2,r2,1
   10d08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d0c:	00000d06 	br	10d44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10d10:	e0bffc17 	ldw	r2,-16(fp)
   10d14:	10800217 	ldw	r2,8(r2)
   10d18:	e0fffd17 	ldw	r3,-12(fp)
   10d1c:	180d883a 	mov	r6,r3
   10d20:	e17ffe17 	ldw	r5,-8(fp)
   10d24:	1009883a 	mov	r4,r2
   10d28:	00116680 	call	11668 <memcmp>
   10d2c:	1000021e 	bne	r2,zero,10d38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10d30:	e0bffc17 	ldw	r2,-16(fp)
   10d34:	00000706 	br	10d54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10d38:	e0bffc17 	ldw	r2,-16(fp)
   10d3c:	10800017 	ldw	r2,0(r2)
   10d40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d44:	e0fffc17 	ldw	r3,-16(fp)
   10d48:	e0bfff17 	ldw	r2,-4(fp)
   10d4c:	18bff01e 	bne	r3,r2,10d10 <__alt_data_end+0x80010d10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10d50:	0005883a 	mov	r2,zero
}
   10d54:	e037883a 	mov	sp,fp
   10d58:	dfc00117 	ldw	ra,4(sp)
   10d5c:	df000017 	ldw	fp,0(sp)
   10d60:	dec00204 	addi	sp,sp,8
   10d64:	f800283a 	ret

00010d68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10d68:	defffb04 	addi	sp,sp,-20
   10d6c:	dfc00415 	stw	ra,16(sp)
   10d70:	df000315 	stw	fp,12(sp)
   10d74:	df000304 	addi	fp,sp,12
   10d78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10d7c:	d0a00617 	ldw	r2,-32744(gp)
   10d80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10d84:	00003106 	br	10e4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10d88:	e0bffd17 	ldw	r2,-12(fp)
   10d8c:	10800217 	ldw	r2,8(r2)
   10d90:	1009883a 	mov	r4,r2
   10d94:	00025e00 	call	25e0 <strlen>
   10d98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10d9c:	e0bffd17 	ldw	r2,-12(fp)
   10da0:	10c00217 	ldw	r3,8(r2)
   10da4:	e0bffe17 	ldw	r2,-8(fp)
   10da8:	10bfffc4 	addi	r2,r2,-1
   10dac:	1885883a 	add	r2,r3,r2
   10db0:	10800003 	ldbu	r2,0(r2)
   10db4:	10803fcc 	andi	r2,r2,255
   10db8:	1080201c 	xori	r2,r2,128
   10dbc:	10bfe004 	addi	r2,r2,-128
   10dc0:	10800bd8 	cmpnei	r2,r2,47
   10dc4:	1000031e 	bne	r2,zero,10dd4 <alt_find_file+0x6c>
    {
      len -= 1;
   10dc8:	e0bffe17 	ldw	r2,-8(fp)
   10dcc:	10bfffc4 	addi	r2,r2,-1
   10dd0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10dd4:	e0bffe17 	ldw	r2,-8(fp)
   10dd8:	e0ffff17 	ldw	r3,-4(fp)
   10ddc:	1885883a 	add	r2,r3,r2
   10de0:	10800003 	ldbu	r2,0(r2)
   10de4:	10803fcc 	andi	r2,r2,255
   10de8:	1080201c 	xori	r2,r2,128
   10dec:	10bfe004 	addi	r2,r2,-128
   10df0:	10800be0 	cmpeqi	r2,r2,47
   10df4:	1000081e 	bne	r2,zero,10e18 <alt_find_file+0xb0>
   10df8:	e0bffe17 	ldw	r2,-8(fp)
   10dfc:	e0ffff17 	ldw	r3,-4(fp)
   10e00:	1885883a 	add	r2,r3,r2
   10e04:	10800003 	ldbu	r2,0(r2)
   10e08:	10803fcc 	andi	r2,r2,255
   10e0c:	1080201c 	xori	r2,r2,128
   10e10:	10bfe004 	addi	r2,r2,-128
   10e14:	10000a1e 	bne	r2,zero,10e40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10e18:	e0bffd17 	ldw	r2,-12(fp)
   10e1c:	10800217 	ldw	r2,8(r2)
   10e20:	e0fffe17 	ldw	r3,-8(fp)
   10e24:	180d883a 	mov	r6,r3
   10e28:	e17fff17 	ldw	r5,-4(fp)
   10e2c:	1009883a 	mov	r4,r2
   10e30:	00116680 	call	11668 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10e34:	1000021e 	bne	r2,zero,10e40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10e38:	e0bffd17 	ldw	r2,-12(fp)
   10e3c:	00000706 	br	10e5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10e40:	e0bffd17 	ldw	r2,-12(fp)
   10e44:	10800017 	ldw	r2,0(r2)
   10e48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10e4c:	e0fffd17 	ldw	r3,-12(fp)
   10e50:	d0a00604 	addi	r2,gp,-32744
   10e54:	18bfcc1e 	bne	r3,r2,10d88 <__alt_data_end+0x80010d88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10e58:	0005883a 	mov	r2,zero
}
   10e5c:	e037883a 	mov	sp,fp
   10e60:	dfc00117 	ldw	ra,4(sp)
   10e64:	df000017 	ldw	fp,0(sp)
   10e68:	dec00204 	addi	sp,sp,8
   10e6c:	f800283a 	ret

00010e70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10e70:	defffc04 	addi	sp,sp,-16
   10e74:	df000315 	stw	fp,12(sp)
   10e78:	df000304 	addi	fp,sp,12
   10e7c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10e80:	00bffa04 	movi	r2,-24
   10e84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10e88:	e03ffd15 	stw	zero,-12(fp)
   10e8c:	00001906 	br	10ef4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10e90:	00900034 	movhi	r2,16384
   10e94:	10835204 	addi	r2,r2,3400
   10e98:	e0fffd17 	ldw	r3,-12(fp)
   10e9c:	18c00324 	muli	r3,r3,12
   10ea0:	10c5883a 	add	r2,r2,r3
   10ea4:	10800017 	ldw	r2,0(r2)
   10ea8:	10000f1e 	bne	r2,zero,10ee8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10eac:	00900034 	movhi	r2,16384
   10eb0:	10835204 	addi	r2,r2,3400
   10eb4:	e0fffd17 	ldw	r3,-12(fp)
   10eb8:	18c00324 	muli	r3,r3,12
   10ebc:	10c5883a 	add	r2,r2,r3
   10ec0:	e0ffff17 	ldw	r3,-4(fp)
   10ec4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10ec8:	d0e00a17 	ldw	r3,-32728(gp)
   10ecc:	e0bffd17 	ldw	r2,-12(fp)
   10ed0:	1880020e 	bge	r3,r2,10edc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10edc:	e0bffd17 	ldw	r2,-12(fp)
   10ee0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10ee4:	00000606 	br	10f00 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10ee8:	e0bffd17 	ldw	r2,-12(fp)
   10eec:	10800044 	addi	r2,r2,1
   10ef0:	e0bffd15 	stw	r2,-12(fp)
   10ef4:	e0bffd17 	ldw	r2,-12(fp)
   10ef8:	10800810 	cmplti	r2,r2,32
   10efc:	103fe41e 	bne	r2,zero,10e90 <__alt_data_end+0x80010e90>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10f00:	e0bffe17 	ldw	r2,-8(fp)
}
   10f04:	e037883a 	mov	sp,fp
   10f08:	df000017 	ldw	fp,0(sp)
   10f0c:	dec00104 	addi	sp,sp,4
   10f10:	f800283a 	ret

00010f14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10f14:	defffe04 	addi	sp,sp,-8
   10f18:	dfc00115 	stw	ra,4(sp)
   10f1c:	df000015 	stw	fp,0(sp)
   10f20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10f24:	01440004 	movi	r5,4096
   10f28:	0009883a 	mov	r4,zero
   10f2c:	00114f00 	call	114f0 <alt_icache_flush>
#endif
}
   10f30:	0001883a 	nop
   10f34:	e037883a 	mov	sp,fp
   10f38:	dfc00117 	ldw	ra,4(sp)
   10f3c:	df000017 	ldw	fp,0(sp)
   10f40:	dec00204 	addi	sp,sp,8
   10f44:	f800283a 	ret

00010f48 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10f48:	defff904 	addi	sp,sp,-28
   10f4c:	dfc00615 	stw	ra,24(sp)
   10f50:	df000515 	stw	fp,20(sp)
   10f54:	df000504 	addi	fp,sp,20
   10f58:	e13ffc15 	stw	r4,-16(fp)
   10f5c:	e17ffd15 	stw	r5,-12(fp)
   10f60:	e1bffe15 	stw	r6,-8(fp)
   10f64:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10f68:	e0800217 	ldw	r2,8(fp)
   10f6c:	d8800015 	stw	r2,0(sp)
   10f70:	e1ffff17 	ldw	r7,-4(fp)
   10f74:	e1bffe17 	ldw	r6,-8(fp)
   10f78:	e17ffd17 	ldw	r5,-12(fp)
   10f7c:	e13ffc17 	ldw	r4,-16(fp)
   10f80:	00110f80 	call	110f8 <alt_iic_isr_register>
}  
   10f84:	e037883a 	mov	sp,fp
   10f88:	dfc00117 	ldw	ra,4(sp)
   10f8c:	df000017 	ldw	fp,0(sp)
   10f90:	dec00204 	addi	sp,sp,8
   10f94:	f800283a 	ret

00010f98 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10f98:	defff904 	addi	sp,sp,-28
   10f9c:	df000615 	stw	fp,24(sp)
   10fa0:	df000604 	addi	fp,sp,24
   10fa4:	e13ffe15 	stw	r4,-8(fp)
   10fa8:	e17fff15 	stw	r5,-4(fp)
   10fac:	e0bfff17 	ldw	r2,-4(fp)
   10fb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fb4:	0005303a 	rdctl	r2,status
   10fb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fbc:	e0fffb17 	ldw	r3,-20(fp)
   10fc0:	00bfff84 	movi	r2,-2
   10fc4:	1884703a 	and	r2,r3,r2
   10fc8:	1001703a 	wrctl	status,r2
  
  return context;
   10fcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10fd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10fd4:	00c00044 	movi	r3,1
   10fd8:	e0bffa17 	ldw	r2,-24(fp)
   10fdc:	1884983a 	sll	r2,r3,r2
   10fe0:	1007883a 	mov	r3,r2
   10fe4:	d0a01a17 	ldw	r2,-32664(gp)
   10fe8:	1884b03a 	or	r2,r3,r2
   10fec:	d0a01a15 	stw	r2,-32664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ff0:	d0a01a17 	ldw	r2,-32664(gp)
   10ff4:	100170fa 	wrctl	ienable,r2
   10ff8:	e0bffc17 	ldw	r2,-16(fp)
   10ffc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11000:	e0bffd17 	ldw	r2,-12(fp)
   11004:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11008:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1100c:	0001883a 	nop
}
   11010:	e037883a 	mov	sp,fp
   11014:	df000017 	ldw	fp,0(sp)
   11018:	dec00104 	addi	sp,sp,4
   1101c:	f800283a 	ret

00011020 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11020:	defff904 	addi	sp,sp,-28
   11024:	df000615 	stw	fp,24(sp)
   11028:	df000604 	addi	fp,sp,24
   1102c:	e13ffe15 	stw	r4,-8(fp)
   11030:	e17fff15 	stw	r5,-4(fp)
   11034:	e0bfff17 	ldw	r2,-4(fp)
   11038:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1103c:	0005303a 	rdctl	r2,status
   11040:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11044:	e0fffb17 	ldw	r3,-20(fp)
   11048:	00bfff84 	movi	r2,-2
   1104c:	1884703a 	and	r2,r3,r2
   11050:	1001703a 	wrctl	status,r2
  
  return context;
   11054:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11058:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1105c:	00c00044 	movi	r3,1
   11060:	e0bffa17 	ldw	r2,-24(fp)
   11064:	1884983a 	sll	r2,r3,r2
   11068:	0084303a 	nor	r2,zero,r2
   1106c:	1007883a 	mov	r3,r2
   11070:	d0a01a17 	ldw	r2,-32664(gp)
   11074:	1884703a 	and	r2,r3,r2
   11078:	d0a01a15 	stw	r2,-32664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1107c:	d0a01a17 	ldw	r2,-32664(gp)
   11080:	100170fa 	wrctl	ienable,r2
   11084:	e0bffc17 	ldw	r2,-16(fp)
   11088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1108c:	e0bffd17 	ldw	r2,-12(fp)
   11090:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11094:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11098:	0001883a 	nop
}
   1109c:	e037883a 	mov	sp,fp
   110a0:	df000017 	ldw	fp,0(sp)
   110a4:	dec00104 	addi	sp,sp,4
   110a8:	f800283a 	ret

000110ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   110ac:	defffc04 	addi	sp,sp,-16
   110b0:	df000315 	stw	fp,12(sp)
   110b4:	df000304 	addi	fp,sp,12
   110b8:	e13ffe15 	stw	r4,-8(fp)
   110bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   110c0:	000530fa 	rdctl	r2,ienable
   110c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   110c8:	00c00044 	movi	r3,1
   110cc:	e0bfff17 	ldw	r2,-4(fp)
   110d0:	1884983a 	sll	r2,r3,r2
   110d4:	1007883a 	mov	r3,r2
   110d8:	e0bffd17 	ldw	r2,-12(fp)
   110dc:	1884703a 	and	r2,r3,r2
   110e0:	1004c03a 	cmpne	r2,r2,zero
   110e4:	10803fcc 	andi	r2,r2,255
}
   110e8:	e037883a 	mov	sp,fp
   110ec:	df000017 	ldw	fp,0(sp)
   110f0:	dec00104 	addi	sp,sp,4
   110f4:	f800283a 	ret

000110f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   110f8:	defff504 	addi	sp,sp,-44
   110fc:	dfc00a15 	stw	ra,40(sp)
   11100:	df000915 	stw	fp,36(sp)
   11104:	df000904 	addi	fp,sp,36
   11108:	e13ffc15 	stw	r4,-16(fp)
   1110c:	e17ffd15 	stw	r5,-12(fp)
   11110:	e1bffe15 	stw	r6,-8(fp)
   11114:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11118:	00bffa84 	movi	r2,-22
   1111c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11120:	e0bffd17 	ldw	r2,-12(fp)
   11124:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11128:	e0bff817 	ldw	r2,-32(fp)
   1112c:	10800808 	cmpgei	r2,r2,32
   11130:	1000271e 	bne	r2,zero,111d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11134:	0005303a 	rdctl	r2,status
   11138:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1113c:	e0fffb17 	ldw	r3,-20(fp)
   11140:	00bfff84 	movi	r2,-2
   11144:	1884703a 	and	r2,r3,r2
   11148:	1001703a 	wrctl	status,r2
  
  return context;
   1114c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11150:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11154:	00900034 	movhi	r2,16384
   11158:	10887904 	addi	r2,r2,8676
   1115c:	e0fff817 	ldw	r3,-32(fp)
   11160:	180690fa 	slli	r3,r3,3
   11164:	10c5883a 	add	r2,r2,r3
   11168:	e0fffe17 	ldw	r3,-8(fp)
   1116c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11170:	00900034 	movhi	r2,16384
   11174:	10887904 	addi	r2,r2,8676
   11178:	e0fff817 	ldw	r3,-32(fp)
   1117c:	180690fa 	slli	r3,r3,3
   11180:	10c5883a 	add	r2,r2,r3
   11184:	10800104 	addi	r2,r2,4
   11188:	e0ffff17 	ldw	r3,-4(fp)
   1118c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	10000526 	beq	r2,zero,111ac <alt_iic_isr_register+0xb4>
   11198:	e0bff817 	ldw	r2,-32(fp)
   1119c:	100b883a 	mov	r5,r2
   111a0:	e13ffc17 	ldw	r4,-16(fp)
   111a4:	0010f980 	call	10f98 <alt_ic_irq_enable>
   111a8:	00000406 	br	111bc <alt_iic_isr_register+0xc4>
   111ac:	e0bff817 	ldw	r2,-32(fp)
   111b0:	100b883a 	mov	r5,r2
   111b4:	e13ffc17 	ldw	r4,-16(fp)
   111b8:	00110200 	call	11020 <alt_ic_irq_disable>
   111bc:	e0bff715 	stw	r2,-36(fp)
   111c0:	e0bffa17 	ldw	r2,-24(fp)
   111c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c8:	e0bff917 	ldw	r2,-28(fp)
   111cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   111d0:	e0bff717 	ldw	r2,-36(fp)
}
   111d4:	e037883a 	mov	sp,fp
   111d8:	dfc00117 	ldw	ra,4(sp)
   111dc:	df000017 	ldw	fp,0(sp)
   111e0:	dec00204 	addi	sp,sp,8
   111e4:	f800283a 	ret

000111e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   111e8:	defff904 	addi	sp,sp,-28
   111ec:	dfc00615 	stw	ra,24(sp)
   111f0:	df000515 	stw	fp,20(sp)
   111f4:	df000504 	addi	fp,sp,20
   111f8:	e13ffc15 	stw	r4,-16(fp)
   111fc:	e17ffd15 	stw	r5,-12(fp)
   11200:	e1bffe15 	stw	r6,-8(fp)
   11204:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11208:	e1bfff17 	ldw	r6,-4(fp)
   1120c:	e17ffe17 	ldw	r5,-8(fp)
   11210:	e13ffd17 	ldw	r4,-12(fp)
   11214:	000e77c0 	call	e77c <open>
   11218:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1121c:	e0bffb17 	ldw	r2,-20(fp)
   11220:	10001c16 	blt	r2,zero,11294 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11224:	00900034 	movhi	r2,16384
   11228:	10835204 	addi	r2,r2,3400
   1122c:	e0fffb17 	ldw	r3,-20(fp)
   11230:	18c00324 	muli	r3,r3,12
   11234:	10c5883a 	add	r2,r2,r3
   11238:	10c00017 	ldw	r3,0(r2)
   1123c:	e0bffc17 	ldw	r2,-16(fp)
   11240:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11244:	00900034 	movhi	r2,16384
   11248:	10835204 	addi	r2,r2,3400
   1124c:	e0fffb17 	ldw	r3,-20(fp)
   11250:	18c00324 	muli	r3,r3,12
   11254:	10c5883a 	add	r2,r2,r3
   11258:	10800104 	addi	r2,r2,4
   1125c:	10c00017 	ldw	r3,0(r2)
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11268:	00900034 	movhi	r2,16384
   1126c:	10835204 	addi	r2,r2,3400
   11270:	e0fffb17 	ldw	r3,-20(fp)
   11274:	18c00324 	muli	r3,r3,12
   11278:	10c5883a 	add	r2,r2,r3
   1127c:	10800204 	addi	r2,r2,8
   11280:	10c00017 	ldw	r3,0(r2)
   11284:	e0bffc17 	ldw	r2,-16(fp)
   11288:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1128c:	e13ffb17 	ldw	r4,-20(fp)
   11290:	000ea080 	call	ea08 <alt_release_fd>
  }
} 
   11294:	0001883a 	nop
   11298:	e037883a 	mov	sp,fp
   1129c:	dfc00117 	ldw	ra,4(sp)
   112a0:	df000017 	ldw	fp,0(sp)
   112a4:	dec00204 	addi	sp,sp,8
   112a8:	f800283a 	ret

000112ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   112ac:	defffb04 	addi	sp,sp,-20
   112b0:	dfc00415 	stw	ra,16(sp)
   112b4:	df000315 	stw	fp,12(sp)
   112b8:	df000304 	addi	fp,sp,12
   112bc:	e13ffd15 	stw	r4,-12(fp)
   112c0:	e17ffe15 	stw	r5,-8(fp)
   112c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   112c8:	01c07fc4 	movi	r7,511
   112cc:	01800044 	movi	r6,1
   112d0:	e17ffd17 	ldw	r5,-12(fp)
   112d4:	01100034 	movhi	r4,16384
   112d8:	21035504 	addi	r4,r4,3412
   112dc:	00111e80 	call	111e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   112e0:	01c07fc4 	movi	r7,511
   112e4:	000d883a 	mov	r6,zero
   112e8:	e17ffe17 	ldw	r5,-8(fp)
   112ec:	01100034 	movhi	r4,16384
   112f0:	21035204 	addi	r4,r4,3400
   112f4:	00111e80 	call	111e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   112f8:	01c07fc4 	movi	r7,511
   112fc:	01800044 	movi	r6,1
   11300:	e17fff17 	ldw	r5,-4(fp)
   11304:	01100034 	movhi	r4,16384
   11308:	21035804 	addi	r4,r4,3424
   1130c:	00111e80 	call	111e8 <alt_open_fd>
}  
   11310:	0001883a 	nop
   11314:	e037883a 	mov	sp,fp
   11318:	dfc00117 	ldw	ra,4(sp)
   1131c:	df000017 	ldw	fp,0(sp)
   11320:	dec00204 	addi	sp,sp,8
   11324:	f800283a 	ret

00011328 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11328:	defffa04 	addi	sp,sp,-24
   1132c:	df000515 	stw	fp,20(sp)
   11330:	df000504 	addi	fp,sp,20
   11334:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11338:	0005303a 	rdctl	r2,status
   1133c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11340:	e0fffc17 	ldw	r3,-16(fp)
   11344:	00bfff84 	movi	r2,-2
   11348:	1884703a 	and	r2,r3,r2
   1134c:	1001703a 	wrctl	status,r2
  
  return context;
   11350:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11354:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11358:	e0bfff17 	ldw	r2,-4(fp)
   1135c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11360:	e0bffd17 	ldw	r2,-12(fp)
   11364:	10800017 	ldw	r2,0(r2)
   11368:	e0fffd17 	ldw	r3,-12(fp)
   1136c:	18c00117 	ldw	r3,4(r3)
   11370:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11374:	e0bffd17 	ldw	r2,-12(fp)
   11378:	10800117 	ldw	r2,4(r2)
   1137c:	e0fffd17 	ldw	r3,-12(fp)
   11380:	18c00017 	ldw	r3,0(r3)
   11384:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11388:	e0bffd17 	ldw	r2,-12(fp)
   1138c:	e0fffd17 	ldw	r3,-12(fp)
   11390:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11394:	e0bffd17 	ldw	r2,-12(fp)
   11398:	e0fffd17 	ldw	r3,-12(fp)
   1139c:	10c00015 	stw	r3,0(r2)
   113a0:	e0bffb17 	ldw	r2,-20(fp)
   113a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113a8:	e0bffe17 	ldw	r2,-8(fp)
   113ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   113b0:	0001883a 	nop
   113b4:	e037883a 	mov	sp,fp
   113b8:	df000017 	ldw	fp,0(sp)
   113bc:	dec00104 	addi	sp,sp,4
   113c0:	f800283a 	ret

000113c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   113c4:	defffb04 	addi	sp,sp,-20
   113c8:	dfc00415 	stw	ra,16(sp)
   113cc:	df000315 	stw	fp,12(sp)
   113d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   113d4:	d0a00e17 	ldw	r2,-32712(gp)
   113d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   113dc:	d0a01c17 	ldw	r2,-32656(gp)
   113e0:	10800044 	addi	r2,r2,1
   113e4:	d0a01c15 	stw	r2,-32656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   113e8:	00002e06 	br	114a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   113ec:	e0bffd17 	ldw	r2,-12(fp)
   113f0:	10800017 	ldw	r2,0(r2)
   113f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   113f8:	e0bffd17 	ldw	r2,-12(fp)
   113fc:	10800403 	ldbu	r2,16(r2)
   11400:	10803fcc 	andi	r2,r2,255
   11404:	10000426 	beq	r2,zero,11418 <alt_tick+0x54>
   11408:	d0a01c17 	ldw	r2,-32656(gp)
   1140c:	1000021e 	bne	r2,zero,11418 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11410:	e0bffd17 	ldw	r2,-12(fp)
   11414:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11418:	e0bffd17 	ldw	r2,-12(fp)
   1141c:	10800217 	ldw	r2,8(r2)
   11420:	d0e01c17 	ldw	r3,-32656(gp)
   11424:	18801d36 	bltu	r3,r2,1149c <alt_tick+0xd8>
   11428:	e0bffd17 	ldw	r2,-12(fp)
   1142c:	10800403 	ldbu	r2,16(r2)
   11430:	10803fcc 	andi	r2,r2,255
   11434:	1000191e 	bne	r2,zero,1149c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11438:	e0bffd17 	ldw	r2,-12(fp)
   1143c:	10800317 	ldw	r2,12(r2)
   11440:	e0fffd17 	ldw	r3,-12(fp)
   11444:	18c00517 	ldw	r3,20(r3)
   11448:	1809883a 	mov	r4,r3
   1144c:	103ee83a 	callr	r2
   11450:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11454:	e0bfff17 	ldw	r2,-4(fp)
   11458:	1000031e 	bne	r2,zero,11468 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1145c:	e13ffd17 	ldw	r4,-12(fp)
   11460:	00113280 	call	11328 <alt_alarm_stop>
   11464:	00000d06 	br	1149c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11468:	e0bffd17 	ldw	r2,-12(fp)
   1146c:	10c00217 	ldw	r3,8(r2)
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	1887883a 	add	r3,r3,r2
   11478:	e0bffd17 	ldw	r2,-12(fp)
   1147c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11480:	e0bffd17 	ldw	r2,-12(fp)
   11484:	10c00217 	ldw	r3,8(r2)
   11488:	d0a01c17 	ldw	r2,-32656(gp)
   1148c:	1880032e 	bgeu	r3,r2,1149c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11490:	e0bffd17 	ldw	r2,-12(fp)
   11494:	00c00044 	movi	r3,1
   11498:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1149c:	e0bffe17 	ldw	r2,-8(fp)
   114a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   114a4:	e0fffd17 	ldw	r3,-12(fp)
   114a8:	d0a00e04 	addi	r2,gp,-32712
   114ac:	18bfcf1e 	bne	r3,r2,113ec <__alt_data_end+0x800113ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   114b0:	0001883a 	nop
}
   114b4:	0001883a 	nop
   114b8:	e037883a 	mov	sp,fp
   114bc:	dfc00117 	ldw	ra,4(sp)
   114c0:	df000017 	ldw	fp,0(sp)
   114c4:	dec00204 	addi	sp,sp,8
   114c8:	f800283a 	ret

000114cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   114cc:	deffff04 	addi	sp,sp,-4
   114d0:	df000015 	stw	fp,0(sp)
   114d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   114d8:	000170fa 	wrctl	ienable,zero
}
   114dc:	0001883a 	nop
   114e0:	e037883a 	mov	sp,fp
   114e4:	df000017 	ldw	fp,0(sp)
   114e8:	dec00104 	addi	sp,sp,4
   114ec:	f800283a 	ret

000114f0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   114f0:	defffb04 	addi	sp,sp,-20
   114f4:	df000415 	stw	fp,16(sp)
   114f8:	df000404 	addi	fp,sp,16
   114fc:	e13ffe15 	stw	r4,-8(fp)
   11500:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11504:	e0bfff17 	ldw	r2,-4(fp)
   11508:	10840070 	cmpltui	r2,r2,4097
   1150c:	1000021e 	bne	r2,zero,11518 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11510:	00840004 	movi	r2,4096
   11514:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11518:	e0fffe17 	ldw	r3,-8(fp)
   1151c:	e0bfff17 	ldw	r2,-4(fp)
   11520:	1885883a 	add	r2,r3,r2
   11524:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11528:	e0bffe17 	ldw	r2,-8(fp)
   1152c:	e0bffc15 	stw	r2,-16(fp)
   11530:	00000506 	br	11548 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1153c:	e0bffc17 	ldw	r2,-16(fp)
   11540:	10800804 	addi	r2,r2,32
   11544:	e0bffc15 	stw	r2,-16(fp)
   11548:	e0fffc17 	ldw	r3,-16(fp)
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	18bff836 	bltu	r3,r2,11534 <__alt_data_end+0x80011534>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11554:	e0bffe17 	ldw	r2,-8(fp)
   11558:	108007cc 	andi	r2,r2,31
   1155c:	10000226 	beq	r2,zero,11568 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11568:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1156c:	0001883a 	nop
   11570:	e037883a 	mov	sp,fp
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00104 	addi	sp,sp,4
   1157c:	f800283a 	ret

00011580 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11580:	defffe04 	addi	sp,sp,-8
   11584:	df000115 	stw	fp,4(sp)
   11588:	df000104 	addi	fp,sp,4
   1158c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11590:	e0bfff17 	ldw	r2,-4(fp)
   11594:	10bffe84 	addi	r2,r2,-6
   11598:	10c00428 	cmpgeui	r3,r2,16
   1159c:	18001a1e 	bne	r3,zero,11608 <alt_exception_cause_generated_bad_addr+0x88>
   115a0:	100690ba 	slli	r3,r2,2
   115a4:	00800074 	movhi	r2,1
   115a8:	10856e04 	addi	r2,r2,5560
   115ac:	1885883a 	add	r2,r3,r2
   115b0:	10800017 	ldw	r2,0(r2)
   115b4:	1000683a 	jmp	r2
   115b8:	000115f8 	rdprs	zero,zero,1111
   115bc:	000115f8 	rdprs	zero,zero,1111
   115c0:	00011608 	cmpgei	zero,zero,1112
   115c4:	00011608 	cmpgei	zero,zero,1112
   115c8:	00011608 	cmpgei	zero,zero,1112
   115cc:	000115f8 	rdprs	zero,zero,1111
   115d0:	00011600 	call	1160 <_fseeko_r+0x430>
   115d4:	00011608 	cmpgei	zero,zero,1112
   115d8:	000115f8 	rdprs	zero,zero,1111
   115dc:	000115f8 	rdprs	zero,zero,1111
   115e0:	00011608 	cmpgei	zero,zero,1112
   115e4:	000115f8 	rdprs	zero,zero,1111
   115e8:	00011600 	call	1160 <_fseeko_r+0x430>
   115ec:	00011608 	cmpgei	zero,zero,1112
   115f0:	00011608 	cmpgei	zero,zero,1112
   115f4:	000115f8 	rdprs	zero,zero,1111
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   115f8:	00800044 	movi	r2,1
   115fc:	00000306 	br	1160c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11600:	0005883a 	mov	r2,zero
   11604:	00000106 	br	1160c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11608:	0005883a 	mov	r2,zero
  }
}
   1160c:	e037883a 	mov	sp,fp
   11610:	df000017 	ldw	fp,0(sp)
   11614:	dec00104 	addi	sp,sp,4
   11618:	f800283a 	ret

0001161c <atexit>:
   1161c:	200b883a 	mov	r5,r4
   11620:	000f883a 	mov	r7,zero
   11624:	000d883a 	mov	r6,zero
   11628:	0009883a 	mov	r4,zero
   1162c:	00116e41 	jmpi	116e4 <__register_exitproc>

00011630 <exit>:
   11630:	defffe04 	addi	sp,sp,-8
   11634:	000b883a 	mov	r5,zero
   11638:	dc000015 	stw	r16,0(sp)
   1163c:	dfc00115 	stw	ra,4(sp)
   11640:	2021883a 	mov	r16,r4
   11644:	00117fc0 	call	117fc <__call_exitprocs>
   11648:	00900034 	movhi	r2,16384
   1164c:	10885104 	addi	r2,r2,8516
   11650:	11000017 	ldw	r4,0(r2)
   11654:	20800f17 	ldw	r2,60(r4)
   11658:	10000126 	beq	r2,zero,11660 <exit+0x30>
   1165c:	103ee83a 	callr	r2
   11660:	8009883a 	mov	r4,r16
   11664:	001197c0 	call	1197c <_exit>

00011668 <memcmp>:
   11668:	01c000c4 	movi	r7,3
   1166c:	3980192e 	bgeu	r7,r6,116d4 <memcmp+0x6c>
   11670:	2144b03a 	or	r2,r4,r5
   11674:	11c4703a 	and	r2,r2,r7
   11678:	10000f26 	beq	r2,zero,116b8 <memcmp+0x50>
   1167c:	20800003 	ldbu	r2,0(r4)
   11680:	28c00003 	ldbu	r3,0(r5)
   11684:	10c0151e 	bne	r2,r3,116dc <memcmp+0x74>
   11688:	31bfff84 	addi	r6,r6,-2
   1168c:	01ffffc4 	movi	r7,-1
   11690:	00000406 	br	116a4 <memcmp+0x3c>
   11694:	20800003 	ldbu	r2,0(r4)
   11698:	28c00003 	ldbu	r3,0(r5)
   1169c:	31bfffc4 	addi	r6,r6,-1
   116a0:	10c00e1e 	bne	r2,r3,116dc <memcmp+0x74>
   116a4:	21000044 	addi	r4,r4,1
   116a8:	29400044 	addi	r5,r5,1
   116ac:	31fff91e 	bne	r6,r7,11694 <__alt_data_end+0x80011694>
   116b0:	0005883a 	mov	r2,zero
   116b4:	f800283a 	ret
   116b8:	20c00017 	ldw	r3,0(r4)
   116bc:	28800017 	ldw	r2,0(r5)
   116c0:	18bfee1e 	bne	r3,r2,1167c <__alt_data_end+0x8001167c>
   116c4:	31bfff04 	addi	r6,r6,-4
   116c8:	21000104 	addi	r4,r4,4
   116cc:	29400104 	addi	r5,r5,4
   116d0:	39bff936 	bltu	r7,r6,116b8 <__alt_data_end+0x800116b8>
   116d4:	303fe91e 	bne	r6,zero,1167c <__alt_data_end+0x8001167c>
   116d8:	003ff506 	br	116b0 <__alt_data_end+0x800116b0>
   116dc:	10c5c83a 	sub	r2,r2,r3
   116e0:	f800283a 	ret

000116e4 <__register_exitproc>:
   116e4:	defffa04 	addi	sp,sp,-24
   116e8:	dc000315 	stw	r16,12(sp)
   116ec:	04100034 	movhi	r16,16384
   116f0:	84085104 	addi	r16,r16,8516
   116f4:	80c00017 	ldw	r3,0(r16)
   116f8:	dc400415 	stw	r17,16(sp)
   116fc:	dfc00515 	stw	ra,20(sp)
   11700:	18805217 	ldw	r2,328(r3)
   11704:	2023883a 	mov	r17,r4
   11708:	10003726 	beq	r2,zero,117e8 <__register_exitproc+0x104>
   1170c:	10c00117 	ldw	r3,4(r2)
   11710:	010007c4 	movi	r4,31
   11714:	20c00e16 	blt	r4,r3,11750 <__register_exitproc+0x6c>
   11718:	1a000044 	addi	r8,r3,1
   1171c:	8800221e 	bne	r17,zero,117a8 <__register_exitproc+0xc4>
   11720:	18c00084 	addi	r3,r3,2
   11724:	18c7883a 	add	r3,r3,r3
   11728:	18c7883a 	add	r3,r3,r3
   1172c:	12000115 	stw	r8,4(r2)
   11730:	10c7883a 	add	r3,r2,r3
   11734:	19400015 	stw	r5,0(r3)
   11738:	0005883a 	mov	r2,zero
   1173c:	dfc00517 	ldw	ra,20(sp)
   11740:	dc400417 	ldw	r17,16(sp)
   11744:	dc000317 	ldw	r16,12(sp)
   11748:	dec00604 	addi	sp,sp,24
   1174c:	f800283a 	ret
   11750:	00800034 	movhi	r2,0
   11754:	10800004 	addi	r2,r2,0
   11758:	10002626 	beq	r2,zero,117f4 <__register_exitproc+0x110>
   1175c:	01006404 	movi	r4,400
   11760:	d9400015 	stw	r5,0(sp)
   11764:	d9800115 	stw	r6,4(sp)
   11768:	d9c00215 	stw	r7,8(sp)
   1176c:	00000000 	call	0 <__alt_mem_SDRAM>
   11770:	d9400017 	ldw	r5,0(sp)
   11774:	d9800117 	ldw	r6,4(sp)
   11778:	d9c00217 	ldw	r7,8(sp)
   1177c:	10001d26 	beq	r2,zero,117f4 <__register_exitproc+0x110>
   11780:	81000017 	ldw	r4,0(r16)
   11784:	10000115 	stw	zero,4(r2)
   11788:	02000044 	movi	r8,1
   1178c:	22405217 	ldw	r9,328(r4)
   11790:	0007883a 	mov	r3,zero
   11794:	12400015 	stw	r9,0(r2)
   11798:	20805215 	stw	r2,328(r4)
   1179c:	10006215 	stw	zero,392(r2)
   117a0:	10006315 	stw	zero,396(r2)
   117a4:	883fde26 	beq	r17,zero,11720 <__alt_data_end+0x80011720>
   117a8:	18c9883a 	add	r4,r3,r3
   117ac:	2109883a 	add	r4,r4,r4
   117b0:	1109883a 	add	r4,r2,r4
   117b4:	21802215 	stw	r6,136(r4)
   117b8:	01800044 	movi	r6,1
   117bc:	12406217 	ldw	r9,392(r2)
   117c0:	30cc983a 	sll	r6,r6,r3
   117c4:	4992b03a 	or	r9,r9,r6
   117c8:	12406215 	stw	r9,392(r2)
   117cc:	21c04215 	stw	r7,264(r4)
   117d0:	01000084 	movi	r4,2
   117d4:	893fd21e 	bne	r17,r4,11720 <__alt_data_end+0x80011720>
   117d8:	11006317 	ldw	r4,396(r2)
   117dc:	218cb03a 	or	r6,r4,r6
   117e0:	11806315 	stw	r6,396(r2)
   117e4:	003fce06 	br	11720 <__alt_data_end+0x80011720>
   117e8:	18805304 	addi	r2,r3,332
   117ec:	18805215 	stw	r2,328(r3)
   117f0:	003fc606 	br	1170c <__alt_data_end+0x8001170c>
   117f4:	00bfffc4 	movi	r2,-1
   117f8:	003fd006 	br	1173c <__alt_data_end+0x8001173c>

000117fc <__call_exitprocs>:
   117fc:	defff504 	addi	sp,sp,-44
   11800:	df000915 	stw	fp,36(sp)
   11804:	dd400615 	stw	r21,24(sp)
   11808:	dc800315 	stw	r18,12(sp)
   1180c:	dfc00a15 	stw	ra,40(sp)
   11810:	ddc00815 	stw	r23,32(sp)
   11814:	dd800715 	stw	r22,28(sp)
   11818:	dd000515 	stw	r20,20(sp)
   1181c:	dcc00415 	stw	r19,16(sp)
   11820:	dc400215 	stw	r17,8(sp)
   11824:	dc000115 	stw	r16,4(sp)
   11828:	d9000015 	stw	r4,0(sp)
   1182c:	2839883a 	mov	fp,r5
   11830:	04800044 	movi	r18,1
   11834:	057fffc4 	movi	r21,-1
   11838:	00900034 	movhi	r2,16384
   1183c:	10885104 	addi	r2,r2,8516
   11840:	12000017 	ldw	r8,0(r2)
   11844:	45005217 	ldw	r20,328(r8)
   11848:	44c05204 	addi	r19,r8,328
   1184c:	a0001c26 	beq	r20,zero,118c0 <__call_exitprocs+0xc4>
   11850:	a0800117 	ldw	r2,4(r20)
   11854:	15ffffc4 	addi	r23,r2,-1
   11858:	b8000d16 	blt	r23,zero,11890 <__call_exitprocs+0x94>
   1185c:	14000044 	addi	r16,r2,1
   11860:	8421883a 	add	r16,r16,r16
   11864:	8421883a 	add	r16,r16,r16
   11868:	84402004 	addi	r17,r16,128
   1186c:	a463883a 	add	r17,r20,r17
   11870:	a421883a 	add	r16,r20,r16
   11874:	e0001e26 	beq	fp,zero,118f0 <__call_exitprocs+0xf4>
   11878:	80804017 	ldw	r2,256(r16)
   1187c:	e0801c26 	beq	fp,r2,118f0 <__call_exitprocs+0xf4>
   11880:	bdffffc4 	addi	r23,r23,-1
   11884:	843fff04 	addi	r16,r16,-4
   11888:	8c7fff04 	addi	r17,r17,-4
   1188c:	bd7ff91e 	bne	r23,r21,11874 <__alt_data_end+0x80011874>
   11890:	00800034 	movhi	r2,0
   11894:	10800004 	addi	r2,r2,0
   11898:	10000926 	beq	r2,zero,118c0 <__call_exitprocs+0xc4>
   1189c:	a0800117 	ldw	r2,4(r20)
   118a0:	1000301e 	bne	r2,zero,11964 <__call_exitprocs+0x168>
   118a4:	a0800017 	ldw	r2,0(r20)
   118a8:	10003226 	beq	r2,zero,11974 <__call_exitprocs+0x178>
   118ac:	a009883a 	mov	r4,r20
   118b0:	98800015 	stw	r2,0(r19)
   118b4:	00000000 	call	0 <__alt_mem_SDRAM>
   118b8:	9d000017 	ldw	r20,0(r19)
   118bc:	a03fe41e 	bne	r20,zero,11850 <__alt_data_end+0x80011850>
   118c0:	dfc00a17 	ldw	ra,40(sp)
   118c4:	df000917 	ldw	fp,36(sp)
   118c8:	ddc00817 	ldw	r23,32(sp)
   118cc:	dd800717 	ldw	r22,28(sp)
   118d0:	dd400617 	ldw	r21,24(sp)
   118d4:	dd000517 	ldw	r20,20(sp)
   118d8:	dcc00417 	ldw	r19,16(sp)
   118dc:	dc800317 	ldw	r18,12(sp)
   118e0:	dc400217 	ldw	r17,8(sp)
   118e4:	dc000117 	ldw	r16,4(sp)
   118e8:	dec00b04 	addi	sp,sp,44
   118ec:	f800283a 	ret
   118f0:	a0800117 	ldw	r2,4(r20)
   118f4:	80c00017 	ldw	r3,0(r16)
   118f8:	10bfffc4 	addi	r2,r2,-1
   118fc:	15c01426 	beq	r2,r23,11950 <__call_exitprocs+0x154>
   11900:	80000015 	stw	zero,0(r16)
   11904:	183fde26 	beq	r3,zero,11880 <__alt_data_end+0x80011880>
   11908:	95c8983a 	sll	r4,r18,r23
   1190c:	a0806217 	ldw	r2,392(r20)
   11910:	a5800117 	ldw	r22,4(r20)
   11914:	2084703a 	and	r2,r4,r2
   11918:	10000b26 	beq	r2,zero,11948 <__call_exitprocs+0x14c>
   1191c:	a0806317 	ldw	r2,396(r20)
   11920:	2088703a 	and	r4,r4,r2
   11924:	20000c1e 	bne	r4,zero,11958 <__call_exitprocs+0x15c>
   11928:	89400017 	ldw	r5,0(r17)
   1192c:	d9000017 	ldw	r4,0(sp)
   11930:	183ee83a 	callr	r3
   11934:	a0800117 	ldw	r2,4(r20)
   11938:	15bfbf1e 	bne	r2,r22,11838 <__alt_data_end+0x80011838>
   1193c:	98800017 	ldw	r2,0(r19)
   11940:	153fcf26 	beq	r2,r20,11880 <__alt_data_end+0x80011880>
   11944:	003fbc06 	br	11838 <__alt_data_end+0x80011838>
   11948:	183ee83a 	callr	r3
   1194c:	003ff906 	br	11934 <__alt_data_end+0x80011934>
   11950:	a5c00115 	stw	r23,4(r20)
   11954:	003feb06 	br	11904 <__alt_data_end+0x80011904>
   11958:	89000017 	ldw	r4,0(r17)
   1195c:	183ee83a 	callr	r3
   11960:	003ff406 	br	11934 <__alt_data_end+0x80011934>
   11964:	a0800017 	ldw	r2,0(r20)
   11968:	a027883a 	mov	r19,r20
   1196c:	1029883a 	mov	r20,r2
   11970:	003fb606 	br	1184c <__alt_data_end+0x8001184c>
   11974:	0005883a 	mov	r2,zero
   11978:	003ffb06 	br	11968 <__alt_data_end+0x80011968>

0001197c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1197c:	defffd04 	addi	sp,sp,-12
   11980:	df000215 	stw	fp,8(sp)
   11984:	df000204 	addi	fp,sp,8
   11988:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1198c:	0001883a 	nop
   11990:	e0bfff17 	ldw	r2,-4(fp)
   11994:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11998:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1199c:	10000226 	beq	r2,zero,119a8 <_exit+0x2c>
    ALT_SIM_FAIL();
   119a0:	002af070 	cmpltui	zero,zero,43969
   119a4:	00000106 	br	119ac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   119a8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   119ac:	003fff06 	br	119ac <__alt_data_end+0x800119ac>
